/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 12 15:38:51 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Cursor;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.DirectColorModel;
import java.awt.image.IndexColorModel;
import java.awt.image.PixelGrabber;
import java.awt.image.RescaleOp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import javax.swing.Action;
import javax.swing.JMenu;
import javax.swing.JPopupMenu;
import javax.swing.undo.StateEdit;
import javax.swing.undo.StateEditable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jhotdraw.draw.AbstractDrawing;
import org.jhotdraw.draw.AttributeKey;
import org.jhotdraw.draw.AttributeKeys;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.DefaultDrawingView;
import org.jhotdraw.draw.Drawing;
import org.jhotdraw.draw.DrawingEditorProxy;
import org.jhotdraw.draw.DrawingView;
import org.jhotdraw.draw.QuadTreeDrawing;
import org.jhotdraw.draw.connector.ChopBezierConnector;
import org.jhotdraw.draw.connector.ChopEllipseConnector;
import org.jhotdraw.draw.connector.ChopRectangleConnector;
import org.jhotdraw.draw.connector.ChopTriangleConnector;
import org.jhotdraw.draw.connector.Connector;
import org.jhotdraw.draw.connector.LocatorConnector;
import org.jhotdraw.draw.connector.StickyRectangleConnector;
import org.jhotdraw.draw.event.FigureAdapter;
import org.jhotdraw.draw.event.FigureEvent;
import org.jhotdraw.draw.figure.BezierFigure;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.GroupFigure;
import org.jhotdraw.draw.figure.ImageFigure;
import org.jhotdraw.draw.figure.LabelFigure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.figure.LineConnectionFigure;
import org.jhotdraw.draw.figure.LineFigure;
import org.jhotdraw.draw.figure.RectangleFigure;
import org.jhotdraw.draw.figure.TextAreaFigure;
import org.jhotdraw.draw.figure.TextHolderFigure;
import org.jhotdraw.draw.figure.TriangleFigure;
import org.jhotdraw.draw.handle.BezierControlPointHandle;
import org.jhotdraw.draw.handle.CloseHandle;
import org.jhotdraw.draw.handle.ConnectorHandle;
import org.jhotdraw.draw.handle.FontSizeHandle;
import org.jhotdraw.draw.handle.Handle;
import org.jhotdraw.draw.handle.MoveHandle;
import org.jhotdraw.draw.handle.NullHandle;
import org.jhotdraw.draw.io.ImageOutputFormat;
import org.jhotdraw.draw.locator.BezierLabelLocator;
import org.jhotdraw.draw.locator.FontSizeLocator;
import org.jhotdraw.draw.locator.Locator;
import org.jhotdraw.draw.locator.RelativeDecoratorLocator;
import org.jhotdraw.draw.locator.RelativeLocator;
import org.jhotdraw.geom.BezierPath;
import org.jhotdraw.xml.DefaultDOMFactory;
import org.jhotdraw.xml.JavaxDOMOutput;
import org.junit.runner.RunWith;
import sun.awt.SunHints;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TriangleFigure_ESTest extends TriangleFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(1.0, (-5852.2561), 1.0, 1.0);
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(triangleFigure0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)triangleFigure0.getTransformRestoreData();
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-5851.7561), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-5852.2561), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-5851.2561), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-5852.2561), rectangle2D_Double0.y, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertNotNull(triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertNotNull(defaultDrawing0);
      
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      assertFalse(lineConnectionFigure0.isConnectable());
      assertTrue(lineConnectionFigure0.isSelectable());
      assertEquals(0, lineConnectionFigure0.getLayer());
      assertEquals(3.0, lineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(lineConnectionFigure0.isClosed());
      assertTrue(lineConnectionFigure0.isRemovable());
      assertTrue(lineConnectionFigure0.isVisible());
      assertNotNull(lineConnectionFigure0);
      
      ChopRectangleConnector chopRectangleConnector0 = (ChopRectangleConnector)defaultDrawing0.findConnector(point2D_Double0, lineConnectionFigure0);
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertFalse(lineConnectionFigure0.isConnectable());
      assertTrue(lineConnectionFigure0.isSelectable());
      assertEquals(0, lineConnectionFigure0.getLayer());
      assertEquals(3.0, lineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(lineConnectionFigure0.isClosed());
      assertTrue(lineConnectionFigure0.isRemovable());
      assertTrue(lineConnectionFigure0.isVisible());
      assertFalse(chopRectangleConnector0.isConnectToDecorator());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(chopRectangleConnector0);
      
      ChopRectangleConnector chopRectangleConnector1 = (ChopRectangleConnector)defaultDrawing0.findCompatibleConnector(chopRectangleConnector0, false);
      assertFalse(chopRectangleConnector1.equals((Object)chopRectangleConnector0));
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertFalse(lineConnectionFigure0.isConnectable());
      assertTrue(lineConnectionFigure0.isSelectable());
      assertEquals(0, lineConnectionFigure0.getLayer());
      assertEquals(3.0, lineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(lineConnectionFigure0.isClosed());
      assertTrue(lineConnectionFigure0.isRemovable());
      assertTrue(lineConnectionFigure0.isVisible());
      assertFalse(chopRectangleConnector0.isConnectToDecorator());
      assertFalse(chopRectangleConnector1.isConnectToDecorator());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(chopRectangleConnector1);
      assertNotSame(chopRectangleConnector0, chopRectangleConnector1);
      assertNotSame(chopRectangleConnector1, chopRectangleConnector0);
      
      ChopTriangleConnector chopTriangleConnector0 = (ChopTriangleConnector)triangleFigure1.findCompatibleConnector(chopRectangleConnector1, false);
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertFalse(chopRectangleConnector0.equals((Object)chopRectangleConnector1));
      assertFalse(chopRectangleConnector1.equals((Object)chopRectangleConnector0));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertFalse(lineConnectionFigure0.isConnectable());
      assertTrue(lineConnectionFigure0.isSelectable());
      assertEquals(0, lineConnectionFigure0.getLayer());
      assertEquals(3.0, lineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(lineConnectionFigure0.isClosed());
      assertTrue(lineConnectionFigure0.isRemovable());
      assertTrue(lineConnectionFigure0.isVisible());
      assertFalse(chopRectangleConnector0.isConnectToDecorator());
      assertFalse(chopRectangleConnector1.isConnectToDecorator());
      assertFalse(chopTriangleConnector0.isConnectToDecorator());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(chopTriangleConnector0);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(chopRectangleConnector0, chopRectangleConnector1);
      assertNotSame(chopRectangleConnector1, chopRectangleConnector0);
      
      triangleFigure0.requestRemove();
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertNotSame(triangleFigure0, triangleFigure1);
      
      Collection<Handle> collection0 = triangleFigure0.createHandles(665);
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(collection0);
      assertNotSame(triangleFigure0, triangleFigure1);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)triangleFigure1.getTransformRestoreData();
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertEquals((-5851.2561), rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-5852.2561), rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals((-5851.7561), rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double1.x, 0.01);
      assertEquals(1.0, rectangle2D_Double1.width, 0.01);
      assertEquals(1.0, rectangle2D_Double1.height, 0.01);
      assertEquals((-5852.2561), rectangle2D_Double1.y, 0.01);
      assertNotNull(rectangle2D_Double1);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      
      ChopTriangleConnector chopTriangleConnector1 = (ChopTriangleConnector)triangleFigure0.findConnector(point2D_Double0, lineConnectionFigure0);
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(chopTriangleConnector1.equals((Object)chopTriangleConnector0));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertFalse(lineConnectionFigure0.isConnectable());
      assertTrue(lineConnectionFigure0.isSelectable());
      assertEquals(0, lineConnectionFigure0.getLayer());
      assertEquals(3.0, lineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(lineConnectionFigure0.isClosed());
      assertTrue(lineConnectionFigure0.isRemovable());
      assertTrue(lineConnectionFigure0.isVisible());
      assertFalse(chopTriangleConnector1.isConnectToDecorator());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(chopTriangleConnector1);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(chopTriangleConnector1, chopTriangleConnector0);
      
      ChopTriangleConnector chopTriangleConnector2 = (ChopTriangleConnector)triangleFigure0.findCompatibleConnector(chopTriangleConnector1, true);
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(chopTriangleConnector1.equals((Object)chopTriangleConnector0));
      assertFalse(chopTriangleConnector2.equals((Object)chopTriangleConnector0));
      assertFalse(chopTriangleConnector2.equals((Object)chopTriangleConnector1));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertFalse(lineConnectionFigure0.isConnectable());
      assertTrue(lineConnectionFigure0.isSelectable());
      assertEquals(0, lineConnectionFigure0.getLayer());
      assertEquals(3.0, lineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(lineConnectionFigure0.isClosed());
      assertTrue(lineConnectionFigure0.isRemovable());
      assertTrue(lineConnectionFigure0.isVisible());
      assertFalse(chopTriangleConnector1.isConnectToDecorator());
      assertFalse(chopTriangleConnector2.isConnectToDecorator());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(chopTriangleConnector2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(chopTriangleConnector1, chopTriangleConnector2);
      assertNotSame(chopTriangleConnector1, chopTriangleConnector0);
      assertNotSame(chopTriangleConnector2, chopTriangleConnector0);
      assertNotSame(chopTriangleConnector2, chopTriangleConnector1);
      
      Collection<Handle> collection1 = lineConnectionFigure0.createHandles(665);
      assertTrue(collection1.equals((Object)collection0));
      assertFalse(lineConnectionFigure0.isConnectable());
      assertTrue(lineConnectionFigure0.isSelectable());
      assertEquals(0, lineConnectionFigure0.getLayer());
      assertEquals(3.0, lineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(lineConnectionFigure0.isClosed());
      assertTrue(lineConnectionFigure0.isRemovable());
      assertTrue(lineConnectionFigure0.isVisible());
      assertNotNull(collection1);
      
      Point2D.Double point2D_Double1 = triangleFigure1.chop(point2D_Double0);
      assertTrue(point2D_Double1.equals((Object)point2D_Double0));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertEquals(0.0, point2D_Double1.x, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(point2D_Double0, point2D_Double1);
      
      Point2D.Double point2D_Double2 = (Point2D.Double)point2D_Double1.clone();
      assertTrue(point2D_Double1.equals((Object)point2D_Double0));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertTrue(point2D_Double2.equals((Object)point2D_Double0));
      assertTrue(point2D_Double2.equals((Object)point2D_Double1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(point2D_Double0.equals((Object)point2D_Double1));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertEquals(0.0, point2D_Double1.x, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertEquals(0.0, point2D_Double2.y, 0.01);
      assertEquals(0.0, point2D_Double2.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double2);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertNotSame(point2D_Double1, point2D_Double2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(point2D_Double2, point2D_Double1);
      assertNotSame(point2D_Double2, point2D_Double0);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double0, point2D_Double2);
      
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(0, bezierPath0.getWindingRule());
      assertEquals(3, bezierPath0.size());
      assertTrue(bezierPath0.isClosed());
      assertFalse(bezierPath0.isEmpty());
      assertEquals(2, BezierPath.C2_MASK);
      assertEquals(3, BezierPath.C1C2_MASK);
      assertEquals(1, BezierPath.C1_MASK);
      assertEquals(0, BezierPath.C0_MASK);
      assertNotNull(bezierPath0);
      assertNotSame(triangleFigure0, triangleFigure1);
      
      ChopTriangleConnector chopTriangleConnector3 = (ChopTriangleConnector)triangleFigure0.findConnector(point2D_Double1, lineConnectionFigure0);
      assertTrue(point2D_Double1.equals((Object)point2D_Double2));
      assertTrue(point2D_Double1.equals((Object)point2D_Double0));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertFalse(chopTriangleConnector3.equals((Object)chopTriangleConnector2));
      assertFalse(chopTriangleConnector3.equals((Object)chopTriangleConnector1));
      assertFalse(chopTriangleConnector3.equals((Object)chopTriangleConnector0));
      assertTrue(point2D_Double0.equals((Object)point2D_Double1));
      assertTrue(point2D_Double0.equals((Object)point2D_Double2));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertFalse(chopTriangleConnector3.isConnectToDecorator());
      assertFalse(lineConnectionFigure0.isConnectable());
      assertTrue(lineConnectionFigure0.isSelectable());
      assertEquals(0, lineConnectionFigure0.getLayer());
      assertEquals(3.0, lineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(lineConnectionFigure0.isClosed());
      assertTrue(lineConnectionFigure0.isRemovable());
      assertTrue(lineConnectionFigure0.isVisible());
      assertEquals(0.0, point2D_Double1.x, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(chopTriangleConnector3);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertNotSame(point2D_Double1, point2D_Double2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(chopTriangleConnector3, chopTriangleConnector2);
      assertNotSame(chopTriangleConnector3, chopTriangleConnector1);
      assertNotSame(chopTriangleConnector3, chopTriangleConnector0);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double0, point2D_Double2);
      
      Rectangle2D.Double rectangle2D_Double2 = triangleFigure1.getBounds();
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertEquals(1.5, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals((-5852.2561), rectangle2D_Double2.getMinY(), 0.01);
      assertEquals((-5851.7561), rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double2.getMinX(), 0.01);
      assertEquals((-5851.2561), rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2D_Double2.width, 0.01);
      assertEquals(1.0, rectangle2D_Double2.height, 0.01);
      assertEquals(1.0, rectangle2D_Double2.x, 0.01);
      assertEquals((-5852.2561), rectangle2D_Double2.y, 0.01);
      assertNotNull(rectangle2D_Double2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      
      TriangleFigure triangleFigure2 = triangleFigure1.clone();
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertFalse(triangleFigure2.equals((Object)triangleFigure0));
      assertFalse(triangleFigure2.equals((Object)triangleFigure1));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertTrue(triangleFigure2.isSelectable());
      assertTrue(triangleFigure2.isConnectable());
      assertTrue(triangleFigure2.isVisible());
      assertEquals(3.0, triangleFigure2.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure2.getLayer());
      assertTrue(triangleFigure2.isRemovable());
      assertNotNull(triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure2);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(triangleFigure2, triangleFigure0);
      assertNotSame(triangleFigure2, triangleFigure1);
      
      triangleFigure2.setSelectable(false);
      assertFalse(triangleFigure0.equals((Object)triangleFigure2));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure2));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertFalse(triangleFigure2.equals((Object)triangleFigure0));
      assertFalse(triangleFigure2.equals((Object)triangleFigure1));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertFalse(triangleFigure2.isSelectable());
      assertTrue(triangleFigure2.isConnectable());
      assertTrue(triangleFigure2.isVisible());
      assertEquals(3.0, triangleFigure2.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure2.getLayer());
      assertTrue(triangleFigure2.isRemovable());
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure2);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(triangleFigure2, triangleFigure0);
      assertNotSame(triangleFigure2, triangleFigure1);
      
      point2D_Double1.x = 0.0;
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      
      Collection<Handle> collection2 = triangleFigure1.createHandles(3);
      assertFalse(triangleFigure0.equals((Object)triangleFigure2));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure2));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(collection2.equals((Object)collection1));
      assertTrue(collection2.equals((Object)collection0));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertNotNull(collection2);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure2);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(collection2, collection0);
      
      Point2D.Double point2D_Double3 = triangleFigure2.chop(point2D_Double1);
      assertTrue(point2D_Double1.equals((Object)point2D_Double2));
      assertTrue(point2D_Double1.equals((Object)point2D_Double0));
      assertFalse(triangleFigure0.equals((Object)triangleFigure2));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure2));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(point2D_Double0.equals((Object)point2D_Double1));
      assertTrue(point2D_Double0.equals((Object)point2D_Double2));
      assertFalse(triangleFigure2.equals((Object)triangleFigure0));
      assertFalse(triangleFigure2.equals((Object)triangleFigure1));
      assertTrue(point2D_Double3.equals((Object)point2D_Double2));
      assertTrue(point2D_Double3.equals((Object)point2D_Double1));
      assertTrue(point2D_Double3.equals((Object)point2D_Double0));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertFalse(triangleFigure2.isSelectable());
      assertTrue(triangleFigure2.isConnectable());
      assertTrue(triangleFigure2.isVisible());
      assertEquals(3.0, triangleFigure2.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure2.getLayer());
      assertTrue(triangleFigure2.isRemovable());
      assertEquals(0.0, point2D_Double1.x, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double3.x, 0.01);
      assertEquals(0.0, point2D_Double3.y, 0.01);
      assertNotNull(point2D_Double3);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertNotSame(point2D_Double1, point2D_Double2);
      assertNotSame(point2D_Double1, point2D_Double3);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure2);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double0, point2D_Double2);
      assertNotSame(point2D_Double0, point2D_Double3);
      assertNotSame(triangleFigure2, triangleFigure0);
      assertNotSame(triangleFigure2, triangleFigure1);
      assertNotSame(point2D_Double3, point2D_Double1);
      assertNotSame(point2D_Double3, point2D_Double0);
      assertNotSame(point2D_Double3, point2D_Double2);
      
      Rectangle2D.Double rectangle2D_Double3 = triangleFigure1.getDrawingArea();
      assertFalse(triangleFigure0.equals((Object)triangleFigure2));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure2));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertFalse(rectangle2D_Double3.equals((Object)rectangle2D_Double2));
      assertFalse(rectangle2D_Double3.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double3.equals((Object)rectangle2D_Double1));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertEquals(4.5, rectangle2D_Double3.getMaxX(), 0.01);
      assertEquals((-1.5), rectangle2D_Double3.getMinX(), 0.01);
      assertEquals((-5851.7561), rectangle2D_Double3.getCenterY(), 0.01);
      assertEquals((-5848.7561), rectangle2D_Double3.getMaxY(), 0.01);
      assertEquals(1.5, rectangle2D_Double3.getCenterX(), 0.01);
      assertEquals((-5854.7561), rectangle2D_Double3.getMinY(), 0.01);
      assertEquals(6.0, rectangle2D_Double3.height, 0.01);
      assertEquals((-5854.7561), rectangle2D_Double3.y, 0.01);
      assertEquals(6.0, rectangle2D_Double3.width, 0.01);
      assertEquals((-1.5), rectangle2D_Double3.x, 0.01);
      assertNotNull(rectangle2D_Double3);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure2);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(rectangle2D_Double3, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double3, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double3, rectangle2D_Double1);
      
      Point2D.Double point2D_Double4 = triangleFigure0.chop(point2D_Double3);
      assertTrue(point2D_Double1.equals((Object)point2D_Double3));
      assertTrue(point2D_Double1.equals((Object)point2D_Double2));
      assertTrue(point2D_Double1.equals((Object)point2D_Double0));
      assertFalse(triangleFigure0.equals((Object)triangleFigure2));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure2));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(point2D_Double0.equals((Object)point2D_Double1));
      assertTrue(point2D_Double0.equals((Object)point2D_Double2));
      assertTrue(point2D_Double0.equals((Object)point2D_Double3));
      assertFalse(triangleFigure2.equals((Object)triangleFigure0));
      assertFalse(triangleFigure2.equals((Object)triangleFigure1));
      assertTrue(point2D_Double3.equals((Object)point2D_Double2));
      assertTrue(point2D_Double3.equals((Object)point2D_Double1));
      assertTrue(point2D_Double3.equals((Object)point2D_Double0));
      assertTrue(point2D_Double4.equals((Object)point2D_Double3));
      assertTrue(point2D_Double4.equals((Object)point2D_Double1));
      assertTrue(point2D_Double4.equals((Object)point2D_Double0));
      assertTrue(point2D_Double4.equals((Object)point2D_Double2));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertFalse(triangleFigure2.isSelectable());
      assertTrue(triangleFigure2.isConnectable());
      assertTrue(triangleFigure2.isVisible());
      assertEquals(3.0, triangleFigure2.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure2.getLayer());
      assertTrue(triangleFigure2.isRemovable());
      assertEquals(0.0, point2D_Double1.x, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double3.x, 0.01);
      assertEquals(0.0, point2D_Double3.y, 0.01);
      assertEquals(0.0, point2D_Double4.y, 0.01);
      assertEquals(0.0, point2D_Double4.x, 0.01);
      assertNotNull(point2D_Double4);
      assertNotSame(point2D_Double1, point2D_Double4);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertNotSame(point2D_Double1, point2D_Double2);
      assertNotSame(point2D_Double1, point2D_Double3);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure2);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double0, point2D_Double4);
      assertNotSame(point2D_Double0, point2D_Double2);
      assertNotSame(point2D_Double0, point2D_Double3);
      assertNotSame(triangleFigure2, triangleFigure0);
      assertNotSame(triangleFigure2, triangleFigure1);
      assertNotSame(point2D_Double3, point2D_Double4);
      assertNotSame(point2D_Double3, point2D_Double1);
      assertNotSame(point2D_Double3, point2D_Double0);
      assertNotSame(point2D_Double3, point2D_Double2);
      assertNotSame(point2D_Double4, point2D_Double1);
      assertNotSame(point2D_Double4, point2D_Double2);
      assertNotSame(point2D_Double4, point2D_Double0);
      assertNotSame(point2D_Double4, point2D_Double3);
      
      Point2D.Double point2D_Double5 = triangleFigure1.chop(point2D_Double3);
      assertTrue(point2D_Double1.equals((Object)point2D_Double3));
      assertTrue(point2D_Double1.equals((Object)point2D_Double2));
      assertTrue(point2D_Double1.equals((Object)point2D_Double4));
      assertTrue(point2D_Double1.equals((Object)point2D_Double0));
      assertFalse(triangleFigure0.equals((Object)triangleFigure2));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure2));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(point2D_Double0.equals((Object)point2D_Double4));
      assertTrue(point2D_Double0.equals((Object)point2D_Double1));
      assertTrue(point2D_Double0.equals((Object)point2D_Double2));
      assertTrue(point2D_Double0.equals((Object)point2D_Double3));
      assertFalse(triangleFigure2.equals((Object)triangleFigure0));
      assertFalse(triangleFigure2.equals((Object)triangleFigure1));
      assertTrue(point2D_Double3.equals((Object)point2D_Double2));
      assertTrue(point2D_Double3.equals((Object)point2D_Double1));
      assertTrue(point2D_Double3.equals((Object)point2D_Double4));
      assertTrue(point2D_Double3.equals((Object)point2D_Double0));
      assertTrue(point2D_Double5.equals((Object)point2D_Double1));
      assertTrue(point2D_Double5.equals((Object)point2D_Double2));
      assertTrue(point2D_Double5.equals((Object)point2D_Double4));
      assertTrue(point2D_Double5.equals((Object)point2D_Double3));
      assertTrue(point2D_Double5.equals((Object)point2D_Double0));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertFalse(triangleFigure2.isSelectable());
      assertTrue(triangleFigure2.isConnectable());
      assertTrue(triangleFigure2.isVisible());
      assertEquals(3.0, triangleFigure2.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure2.getLayer());
      assertTrue(triangleFigure2.isRemovable());
      assertEquals(0.0, point2D_Double1.x, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double3.x, 0.01);
      assertEquals(0.0, point2D_Double3.y, 0.01);
      assertEquals(0.0, point2D_Double5.y, 0.01);
      assertEquals(0.0, point2D_Double5.x, 0.01);
      assertNotNull(point2D_Double5);
      assertNotSame(point2D_Double1, point2D_Double4);
      assertNotSame(point2D_Double1, point2D_Double5);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertNotSame(point2D_Double1, point2D_Double2);
      assertNotSame(point2D_Double1, point2D_Double3);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure2);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double0, point2D_Double5);
      assertNotSame(point2D_Double0, point2D_Double4);
      assertNotSame(point2D_Double0, point2D_Double2);
      assertNotSame(point2D_Double0, point2D_Double3);
      assertNotSame(triangleFigure2, triangleFigure0);
      assertNotSame(triangleFigure2, triangleFigure1);
      assertNotSame(point2D_Double3, point2D_Double4);
      assertNotSame(point2D_Double3, point2D_Double1);
      assertNotSame(point2D_Double3, point2D_Double5);
      assertNotSame(point2D_Double3, point2D_Double0);
      assertNotSame(point2D_Double3, point2D_Double2);
      assertNotSame(point2D_Double5, point2D_Double2);
      assertNotSame(point2D_Double5, point2D_Double0);
      assertNotSame(point2D_Double5, point2D_Double3);
      assertNotSame(point2D_Double5, point2D_Double4);
      assertNotSame(point2D_Double5, point2D_Double1);
      
      TriangleFigure triangleFigure3 = triangleFigure2.clone();
      assertFalse(triangleFigure0.equals((Object)triangleFigure2));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure2));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertFalse(triangleFigure2.equals((Object)triangleFigure0));
      assertFalse(triangleFigure2.equals((Object)triangleFigure1));
      assertFalse(triangleFigure3.equals((Object)triangleFigure2));
      assertFalse(triangleFigure3.equals((Object)triangleFigure0));
      assertFalse(triangleFigure3.equals((Object)triangleFigure1));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertFalse(triangleFigure2.isSelectable());
      assertTrue(triangleFigure2.isConnectable());
      assertTrue(triangleFigure2.isVisible());
      assertEquals(3.0, triangleFigure2.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure2.getLayer());
      assertTrue(triangleFigure2.isRemovable());
      assertTrue(triangleFigure3.isConnectable());
      assertFalse(triangleFigure3.isSelectable());
      assertEquals(3.0, triangleFigure3.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure3.getLayer());
      assertTrue(triangleFigure3.isRemovable());
      assertTrue(triangleFigure3.isVisible());
      assertNotNull(triangleFigure3);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure3);
      assertNotSame(triangleFigure1, triangleFigure2);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(triangleFigure1, triangleFigure3);
      assertNotSame(triangleFigure2, triangleFigure3);
      assertNotSame(triangleFigure2, triangleFigure0);
      assertNotSame(triangleFigure2, triangleFigure1);
      assertNotSame(triangleFigure3, triangleFigure2);
      assertNotSame(triangleFigure3, triangleFigure0);
      assertNotSame(triangleFigure3, triangleFigure1);
      
      TriangleFigure triangleFigure4 = triangleFigure1.clone();
      assertFalse(triangleFigure0.equals((Object)triangleFigure2));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure0.equals((Object)triangleFigure3));
      assertFalse(triangleFigure1.equals((Object)triangleFigure2));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertFalse(triangleFigure1.equals((Object)triangleFigure3));
      assertFalse(triangleFigure4.equals((Object)triangleFigure3));
      assertFalse(triangleFigure4.equals((Object)triangleFigure0));
      assertFalse(triangleFigure4.equals((Object)triangleFigure2));
      assertFalse(triangleFigure4.equals((Object)triangleFigure1));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertEquals(3.0, triangleFigure4.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure4.getLayer());
      assertTrue(triangleFigure4.isConnectable());
      assertTrue(triangleFigure4.isVisible());
      assertTrue(triangleFigure4.isRemovable());
      assertTrue(triangleFigure4.isSelectable());
      assertNotNull(triangleFigure4);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure4);
      assertNotSame(triangleFigure0, triangleFigure3);
      assertNotSame(triangleFigure1, triangleFigure4);
      assertNotSame(triangleFigure1, triangleFigure2);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(triangleFigure1, triangleFigure3);
      assertNotSame(triangleFigure4, triangleFigure3);
      assertNotSame(triangleFigure4, triangleFigure0);
      assertNotSame(triangleFigure4, triangleFigure2);
      assertNotSame(triangleFigure4, triangleFigure1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH;
      TriangleFigure triangleFigure0 = new TriangleFigure(2393.8968638, 2393.8968638, 2393.8968638, (-703.80925), attributeKeys_Orientation0);
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(triangleFigure0);
      
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isConnectable());
      assertNotNull(triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      
      triangleFigure0.setConnectable(false);
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertFalse(triangleFigure0.isConnectable());
      assertNotSame(triangleFigure0, triangleFigure1);
      
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getBounds();
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertFalse(triangleFigure0.isConnectable());
      assertEquals(4787.7937276, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(2393.8968638, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(2393.8968638, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(3590.8452957, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(2041.9922388, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1690.0876138, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-703.80925), rectangle2D_Double0.height, 0.01);
      assertEquals(2393.8968638, rectangle2D_Double0.y, 0.01);
      assertEquals(2393.8968638, rectangle2D_Double0.x, 0.01);
      assertEquals(2393.8968638, rectangle2D_Double0.width, 0.01);
      assertNotNull(rectangle2D_Double0);
      assertNotSame(triangleFigure0, triangleFigure1);
      
      TriangleFigure triangleFigure2 = triangleFigure0.clone();
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure2.equals((Object)triangleFigure1));
      assertFalse(triangleFigure2.equals((Object)triangleFigure0));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertFalse(triangleFigure0.isConnectable());
      assertTrue(triangleFigure2.isRemovable());
      assertFalse(triangleFigure2.isConnectable());
      assertTrue(triangleFigure2.isSelectable());
      assertEquals(3.0, triangleFigure2.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure2.getLayer());
      assertTrue(triangleFigure2.isVisible());
      assertNotNull(triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure2, triangleFigure1);
      assertNotSame(triangleFigure2, triangleFigure0);
      
      TriangleFigure triangleFigure3 = triangleFigure2.clone();
      assertFalse(triangleFigure0.equals((Object)triangleFigure2));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure2.equals((Object)triangleFigure1));
      assertFalse(triangleFigure2.equals((Object)triangleFigure0));
      assertFalse(triangleFigure3.equals((Object)triangleFigure0));
      assertFalse(triangleFigure3.equals((Object)triangleFigure1));
      assertFalse(triangleFigure3.equals((Object)triangleFigure2));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertFalse(triangleFigure0.isConnectable());
      assertTrue(triangleFigure2.isRemovable());
      assertFalse(triangleFigure2.isConnectable());
      assertTrue(triangleFigure2.isSelectable());
      assertEquals(3.0, triangleFigure2.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure2.getLayer());
      assertTrue(triangleFigure2.isVisible());
      assertTrue(triangleFigure3.isRemovable());
      assertTrue(triangleFigure3.isVisible());
      assertEquals(3.0, triangleFigure3.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure3.getLayer());
      assertTrue(triangleFigure3.isSelectable());
      assertFalse(triangleFigure3.isConnectable());
      assertNotNull(triangleFigure3);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure3);
      assertNotSame(triangleFigure2, triangleFigure1);
      assertNotSame(triangleFigure2, triangleFigure0);
      assertNotSame(triangleFigure2, triangleFigure3);
      assertNotSame(triangleFigure3, triangleFigure0);
      assertNotSame(triangleFigure3, triangleFigure1);
      assertNotSame(triangleFigure3, triangleFigure2);
      
      BezierFigure bezierFigure0 = new BezierFigure();
      assertTrue(bezierFigure0.isVisible());
      assertTrue(bezierFigure0.isSelectable());
      assertTrue(bezierFigure0.isRemovable());
      assertFalse(bezierFigure0.isClosed());
      assertTrue(bezierFigure0.isConnectable());
      assertEquals(3.0, bezierFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, bezierFigure0.getLayer());
      assertNotNull(bezierFigure0);
      
      RelativeDecoratorLocator relativeDecoratorLocator0 = new RelativeDecoratorLocator();
      assertNotNull(relativeDecoratorLocator0);
      
      Point2D.Double point2D_Double0 = relativeDecoratorLocator0.locate((Figure) triangleFigure3);
      assertFalse(triangleFigure0.equals((Object)triangleFigure2));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure0.equals((Object)triangleFigure3));
      assertFalse(triangleFigure2.equals((Object)triangleFigure1));
      assertFalse(triangleFigure2.equals((Object)triangleFigure0));
      assertFalse(triangleFigure2.equals((Object)triangleFigure3));
      assertFalse(triangleFigure3.equals((Object)triangleFigure0));
      assertFalse(triangleFigure3.equals((Object)triangleFigure1));
      assertFalse(triangleFigure3.equals((Object)triangleFigure2));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertFalse(triangleFigure0.isConnectable());
      assertTrue(triangleFigure2.isRemovable());
      assertFalse(triangleFigure2.isConnectable());
      assertTrue(triangleFigure2.isSelectable());
      assertEquals(3.0, triangleFigure2.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure2.getLayer());
      assertTrue(triangleFigure2.isVisible());
      assertTrue(triangleFigure3.isRemovable());
      assertTrue(triangleFigure3.isVisible());
      assertEquals(3.0, triangleFigure3.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure3.getLayer());
      assertTrue(triangleFigure3.isSelectable());
      assertFalse(triangleFigure3.isConnectable());
      assertEquals(2393.8968638, point2D_Double0.y, 0.01);
      assertEquals(2393.8968638, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure3);
      assertNotSame(triangleFigure2, triangleFigure1);
      assertNotSame(triangleFigure2, triangleFigure0);
      assertNotSame(triangleFigure2, triangleFigure3);
      assertNotSame(triangleFigure3, triangleFigure0);
      assertNotSame(triangleFigure3, triangleFigure1);
      assertNotSame(triangleFigure3, triangleFigure2);
      
      GroupFigure groupFigure0 = new GroupFigure();
      assertEquals(0, groupFigure0.getLayer());
      assertEquals(0, groupFigure0.getChildCount());
      assertTrue(groupFigure0.isVisible());
      assertTrue(groupFigure0.isRemovable());
      assertFalse(groupFigure0.isConnectable());
      assertTrue(groupFigure0.isSelectable());
      assertNotNull(groupFigure0);
      
      Point2D.Double point2D_Double1 = groupFigure0.chop(point2D_Double0);
      assertFalse(triangleFigure0.equals((Object)triangleFigure2));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure0.equals((Object)triangleFigure3));
      assertFalse(triangleFigure2.equals((Object)triangleFigure1));
      assertFalse(triangleFigure2.equals((Object)triangleFigure0));
      assertFalse(triangleFigure2.equals((Object)triangleFigure3));
      assertFalse(triangleFigure3.equals((Object)triangleFigure0));
      assertFalse(triangleFigure3.equals((Object)triangleFigure1));
      assertFalse(triangleFigure3.equals((Object)triangleFigure2));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertFalse(triangleFigure0.isConnectable());
      assertTrue(triangleFigure2.isRemovable());
      assertFalse(triangleFigure2.isConnectable());
      assertTrue(triangleFigure2.isSelectable());
      assertEquals(3.0, triangleFigure2.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure2.getLayer());
      assertTrue(triangleFigure2.isVisible());
      assertTrue(triangleFigure3.isRemovable());
      assertTrue(triangleFigure3.isVisible());
      assertEquals(3.0, triangleFigure3.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure3.getLayer());
      assertTrue(triangleFigure3.isSelectable());
      assertFalse(triangleFigure3.isConnectable());
      assertEquals(0, groupFigure0.getLayer());
      assertEquals(0, groupFigure0.getChildCount());
      assertTrue(groupFigure0.isVisible());
      assertTrue(groupFigure0.isRemovable());
      assertFalse(groupFigure0.isConnectable());
      assertTrue(groupFigure0.isSelectable());
      assertEquals(2393.8968638, point2D_Double0.y, 0.01);
      assertEquals(2393.8968638, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertEquals(0.0, point2D_Double1.x, 0.01);
      assertNotNull(point2D_Double1);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure3);
      assertNotSame(triangleFigure2, triangleFigure1);
      assertNotSame(triangleFigure2, triangleFigure0);
      assertNotSame(triangleFigure2, triangleFigure3);
      assertNotSame(triangleFigure3, triangleFigure0);
      assertNotSame(triangleFigure3, triangleFigure1);
      assertNotSame(triangleFigure3, triangleFigure2);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      
      point2D_Double0.setLocation((Point2D) point2D_Double1);
      assertFalse(triangleFigure0.equals((Object)triangleFigure2));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure0.equals((Object)triangleFigure3));
      assertFalse(triangleFigure2.equals((Object)triangleFigure1));
      assertFalse(triangleFigure2.equals((Object)triangleFigure0));
      assertFalse(triangleFigure2.equals((Object)triangleFigure3));
      assertFalse(triangleFigure3.equals((Object)triangleFigure0));
      assertFalse(triangleFigure3.equals((Object)triangleFigure1));
      assertFalse(triangleFigure3.equals((Object)triangleFigure2));
      assertTrue(point2D_Double0.equals((Object)point2D_Double1));
      assertTrue(point2D_Double1.equals((Object)point2D_Double0));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertFalse(triangleFigure0.isConnectable());
      assertTrue(triangleFigure2.isRemovable());
      assertFalse(triangleFigure2.isConnectable());
      assertTrue(triangleFigure2.isSelectable());
      assertEquals(3.0, triangleFigure2.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure2.getLayer());
      assertTrue(triangleFigure2.isVisible());
      assertTrue(triangleFigure3.isRemovable());
      assertTrue(triangleFigure3.isVisible());
      assertEquals(3.0, triangleFigure3.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure3.getLayer());
      assertTrue(triangleFigure3.isSelectable());
      assertFalse(triangleFigure3.isConnectable());
      assertEquals(0, groupFigure0.getLayer());
      assertEquals(0, groupFigure0.getChildCount());
      assertTrue(groupFigure0.isVisible());
      assertTrue(groupFigure0.isRemovable());
      assertFalse(groupFigure0.isConnectable());
      assertTrue(groupFigure0.isSelectable());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertEquals(0.0, point2D_Double1.x, 0.01);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure3);
      assertNotSame(triangleFigure2, triangleFigure1);
      assertNotSame(triangleFigure2, triangleFigure0);
      assertNotSame(triangleFigure2, triangleFigure3);
      assertNotSame(triangleFigure3, triangleFigure0);
      assertNotSame(triangleFigure3, triangleFigure1);
      assertNotSame(triangleFigure3, triangleFigure2);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      
      Point2D.Double point2D_Double2 = bezierFigure0.chop(point2D_Double0);
      assertFalse(triangleFigure0.equals((Object)triangleFigure2));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure0.equals((Object)triangleFigure3));
      assertFalse(triangleFigure2.equals((Object)triangleFigure1));
      assertFalse(triangleFigure2.equals((Object)triangleFigure0));
      assertFalse(triangleFigure2.equals((Object)triangleFigure3));
      assertFalse(triangleFigure3.equals((Object)triangleFigure0));
      assertFalse(triangleFigure3.equals((Object)triangleFigure1));
      assertFalse(triangleFigure3.equals((Object)triangleFigure2));
      assertTrue(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double2.equals((Object)point2D_Double1));
      assertFalse(point2D_Double2.equals((Object)point2D_Double0));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertFalse(triangleFigure0.isConnectable());
      assertTrue(triangleFigure2.isRemovable());
      assertFalse(triangleFigure2.isConnectable());
      assertTrue(triangleFigure2.isSelectable());
      assertEquals(3.0, triangleFigure2.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure2.getLayer());
      assertTrue(triangleFigure2.isVisible());
      assertTrue(triangleFigure3.isRemovable());
      assertTrue(triangleFigure3.isVisible());
      assertEquals(3.0, triangleFigure3.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure3.getLayer());
      assertTrue(triangleFigure3.isSelectable());
      assertFalse(triangleFigure3.isConnectable());
      assertTrue(bezierFigure0.isVisible());
      assertTrue(bezierFigure0.isSelectable());
      assertTrue(bezierFigure0.isRemovable());
      assertFalse(bezierFigure0.isClosed());
      assertTrue(bezierFigure0.isConnectable());
      assertEquals(3.0, bezierFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, bezierFigure0.getLayer());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals((-1.0), point2D_Double2.y, 0.01);
      assertEquals((-1.0), point2D_Double2.x, 0.01);
      assertNotNull(point2D_Double2);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure3);
      assertNotSame(triangleFigure2, triangleFigure1);
      assertNotSame(triangleFigure2, triangleFigure0);
      assertNotSame(triangleFigure2, triangleFigure3);
      assertNotSame(triangleFigure3, triangleFigure0);
      assertNotSame(triangleFigure3, triangleFigure1);
      assertNotSame(triangleFigure3, triangleFigure2);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double0, point2D_Double2);
      assertNotSame(point2D_Double2, point2D_Double1);
      assertNotSame(point2D_Double2, point2D_Double0);
      
      Point2D.Double point2D_Double3 = (Point2D.Double)point2D_Double2.clone();
      assertFalse(triangleFigure0.equals((Object)triangleFigure2));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure0.equals((Object)triangleFigure3));
      assertFalse(triangleFigure2.equals((Object)triangleFigure1));
      assertFalse(triangleFigure2.equals((Object)triangleFigure0));
      assertFalse(triangleFigure2.equals((Object)triangleFigure3));
      assertFalse(triangleFigure3.equals((Object)triangleFigure0));
      assertFalse(triangleFigure3.equals((Object)triangleFigure1));
      assertFalse(triangleFigure3.equals((Object)triangleFigure2));
      assertFalse(point2D_Double0.equals((Object)point2D_Double2));
      assertTrue(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double2.equals((Object)point2D_Double1));
      assertFalse(point2D_Double2.equals((Object)point2D_Double0));
      assertFalse(point2D_Double3.equals((Object)point2D_Double0));
      assertTrue(point2D_Double3.equals((Object)point2D_Double2));
      assertFalse(point2D_Double3.equals((Object)point2D_Double1));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertFalse(triangleFigure0.isConnectable());
      assertTrue(triangleFigure2.isRemovable());
      assertFalse(triangleFigure2.isConnectable());
      assertTrue(triangleFigure2.isSelectable());
      assertEquals(3.0, triangleFigure2.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure2.getLayer());
      assertTrue(triangleFigure2.isVisible());
      assertTrue(triangleFigure3.isRemovable());
      assertTrue(triangleFigure3.isVisible());
      assertEquals(3.0, triangleFigure3.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure3.getLayer());
      assertTrue(triangleFigure3.isSelectable());
      assertFalse(triangleFigure3.isConnectable());
      assertTrue(bezierFigure0.isVisible());
      assertTrue(bezierFigure0.isSelectable());
      assertTrue(bezierFigure0.isRemovable());
      assertFalse(bezierFigure0.isClosed());
      assertTrue(bezierFigure0.isConnectable());
      assertEquals(3.0, bezierFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, bezierFigure0.getLayer());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals((-1.0), point2D_Double2.y, 0.01);
      assertEquals((-1.0), point2D_Double2.x, 0.01);
      assertEquals((-1.0), point2D_Double3.x, 0.01);
      assertEquals((-1.0), point2D_Double3.y, 0.01);
      assertNotNull(point2D_Double3);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure3);
      assertNotSame(triangleFigure2, triangleFigure1);
      assertNotSame(triangleFigure2, triangleFigure0);
      assertNotSame(triangleFigure2, triangleFigure3);
      assertNotSame(triangleFigure3, triangleFigure0);
      assertNotSame(triangleFigure3, triangleFigure1);
      assertNotSame(triangleFigure3, triangleFigure2);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double0, point2D_Double3);
      assertNotSame(point2D_Double0, point2D_Double2);
      assertNotSame(point2D_Double2, point2D_Double1);
      assertNotSame(point2D_Double2, point2D_Double0);
      assertNotSame(point2D_Double2, point2D_Double3);
      assertNotSame(point2D_Double3, point2D_Double2);
      assertNotSame(point2D_Double3, point2D_Double0);
      assertNotSame(point2D_Double3, point2D_Double1);
      
      Point2D.Double point2D_Double4 = triangleFigure0.chop(point2D_Double2);
      assertFalse(triangleFigure0.equals((Object)triangleFigure2));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure0.equals((Object)triangleFigure3));
      assertFalse(triangleFigure2.equals((Object)triangleFigure1));
      assertFalse(triangleFigure2.equals((Object)triangleFigure0));
      assertFalse(triangleFigure2.equals((Object)triangleFigure3));
      assertFalse(triangleFigure3.equals((Object)triangleFigure0));
      assertFalse(triangleFigure3.equals((Object)triangleFigure1));
      assertFalse(triangleFigure3.equals((Object)triangleFigure2));
      assertFalse(point2D_Double0.equals((Object)point2D_Double3));
      assertFalse(point2D_Double0.equals((Object)point2D_Double2));
      assertTrue(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double2.equals((Object)point2D_Double1));
      assertTrue(point2D_Double2.equals((Object)point2D_Double3));
      assertFalse(point2D_Double2.equals((Object)point2D_Double0));
      assertFalse(point2D_Double4.equals((Object)point2D_Double3));
      assertFalse(point2D_Double4.equals((Object)point2D_Double1));
      assertFalse(point2D_Double4.equals((Object)point2D_Double0));
      assertFalse(point2D_Double4.equals((Object)point2D_Double2));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertFalse(triangleFigure0.isConnectable());
      assertTrue(triangleFigure2.isRemovable());
      assertFalse(triangleFigure2.isConnectable());
      assertTrue(triangleFigure2.isSelectable());
      assertEquals(3.0, triangleFigure2.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure2.getLayer());
      assertTrue(triangleFigure2.isVisible());
      assertTrue(triangleFigure3.isRemovable());
      assertTrue(triangleFigure3.isVisible());
      assertEquals(3.0, triangleFigure3.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure3.getLayer());
      assertTrue(triangleFigure3.isSelectable());
      assertFalse(triangleFigure3.isConnectable());
      assertTrue(bezierFigure0.isVisible());
      assertTrue(bezierFigure0.isSelectable());
      assertTrue(bezierFigure0.isRemovable());
      assertFalse(bezierFigure0.isClosed());
      assertTrue(bezierFigure0.isConnectable());
      assertEquals(3.0, bezierFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, bezierFigure0.getLayer());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals((-1.0), point2D_Double2.y, 0.01);
      assertEquals((-1.0), point2D_Double2.x, 0.01);
      assertEquals(4.388121797407621, point2D_Double4.x, 0.01);
      assertEquals(2.064629564188863, point2D_Double4.y, 0.01);
      assertNotNull(point2D_Double4);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure3);
      assertNotSame(triangleFigure2, triangleFigure1);
      assertNotSame(triangleFigure2, triangleFigure0);
      assertNotSame(triangleFigure2, triangleFigure3);
      assertNotSame(triangleFigure3, triangleFigure0);
      assertNotSame(triangleFigure3, triangleFigure1);
      assertNotSame(triangleFigure3, triangleFigure2);
      assertNotSame(point2D_Double0, point2D_Double4);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double0, point2D_Double3);
      assertNotSame(point2D_Double0, point2D_Double2);
      assertNotSame(point2D_Double2, point2D_Double1);
      assertNotSame(point2D_Double2, point2D_Double4);
      assertNotSame(point2D_Double2, point2D_Double0);
      assertNotSame(point2D_Double2, point2D_Double3);
      assertNotSame(point2D_Double4, point2D_Double3);
      assertNotSame(point2D_Double4, point2D_Double1);
      assertNotSame(point2D_Double4, point2D_Double0);
      assertNotSame(point2D_Double4, point2D_Double2);
      
      Collection<Handle> collection0 = triangleFigure0.createHandles(1001);
      assertFalse(triangleFigure0.equals((Object)triangleFigure2));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure0.equals((Object)triangleFigure3));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertFalse(triangleFigure0.isConnectable());
      assertNotNull(collection0);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure3);
      
      Collection<Handle> collection1 = triangleFigure0.createHandles(1001);
      assertTrue(collection1.equals((Object)collection0));
      assertFalse(triangleFigure0.equals((Object)triangleFigure2));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure0.equals((Object)triangleFigure3));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertFalse(triangleFigure0.isConnectable());
      assertNotNull(collection1);
      assertNotSame(collection1, collection0);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure3);
      
      Rectangle2D.Double rectangle2D_Double1 = triangleFigure3.getBounds();
      assertFalse(triangleFigure0.equals((Object)triangleFigure2));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure0.equals((Object)triangleFigure3));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertFalse(triangleFigure2.equals((Object)triangleFigure1));
      assertFalse(triangleFigure2.equals((Object)triangleFigure0));
      assertFalse(triangleFigure2.equals((Object)triangleFigure3));
      assertFalse(triangleFigure3.equals((Object)triangleFigure0));
      assertFalse(triangleFigure3.equals((Object)triangleFigure1));
      assertFalse(triangleFigure3.equals((Object)triangleFigure2));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertFalse(triangleFigure0.isConnectable());
      assertEquals(1690.0876138, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(3590.8452957, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(2393.8968638, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(4787.7937276, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(2041.9922388, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(2393.8968638, rectangle2D_Double1.getMinX(), 0.01);
      assertTrue(triangleFigure2.isRemovable());
      assertFalse(triangleFigure2.isConnectable());
      assertTrue(triangleFigure2.isSelectable());
      assertEquals(3.0, triangleFigure2.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure2.getLayer());
      assertTrue(triangleFigure2.isVisible());
      assertTrue(triangleFigure3.isRemovable());
      assertTrue(triangleFigure3.isVisible());
      assertEquals(3.0, triangleFigure3.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure3.getLayer());
      assertTrue(triangleFigure3.isSelectable());
      assertFalse(triangleFigure3.isConnectable());
      assertEquals((-703.80925), rectangle2D_Double1.height, 0.01);
      assertEquals(2393.8968638, rectangle2D_Double1.width, 0.01);
      assertEquals(2393.8968638, rectangle2D_Double1.x, 0.01);
      assertEquals(2393.8968638, rectangle2D_Double1.y, 0.01);
      assertNotNull(rectangle2D_Double1);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure3);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(triangleFigure2, triangleFigure1);
      assertNotSame(triangleFigure2, triangleFigure0);
      assertNotSame(triangleFigure2, triangleFigure3);
      assertNotSame(triangleFigure3, triangleFigure0);
      assertNotSame(triangleFigure3, triangleFigure1);
      assertNotSame(triangleFigure3, triangleFigure2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertNotNull(triangleFigure0);
      
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isVisible());
      assertNotNull(defaultDrawing0);
      
      AbstractDrawing abstractDrawing0 = defaultDrawing0.clone();
      assertFalse(abstractDrawing0.equals((Object)defaultDrawing0));
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isVisible());
      assertEquals(3.0, abstractDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(abstractDrawing0.isSelectable());
      assertFalse(abstractDrawing0.isDebugMode());
      assertEquals(0, abstractDrawing0.getLayer());
      assertEquals(0, abstractDrawing0.getChildCount());
      assertTrue(abstractDrawing0.isVisible());
      assertTrue(abstractDrawing0.isRemovable());
      assertTrue(abstractDrawing0.isConnectable());
      assertNotNull(abstractDrawing0);
      assertNotSame(defaultDrawing0, abstractDrawing0);
      assertNotSame(abstractDrawing0, defaultDrawing0);
      
      triangleFigure0.addNotify(abstractDrawing0);
      assertFalse(defaultDrawing0.equals((Object)abstractDrawing0));
      assertFalse(abstractDrawing0.equals((Object)defaultDrawing0));
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isVisible());
      assertEquals(3.0, abstractDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(abstractDrawing0.isSelectable());
      assertFalse(abstractDrawing0.isDebugMode());
      assertEquals(0, abstractDrawing0.getLayer());
      assertEquals(0, abstractDrawing0.getChildCount());
      assertTrue(abstractDrawing0.isVisible());
      assertTrue(abstractDrawing0.isRemovable());
      assertTrue(abstractDrawing0.isConnectable());
      assertNotSame(defaultDrawing0, abstractDrawing0);
      assertNotSame(abstractDrawing0, defaultDrawing0);
      
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isVisible());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isSelectable());
      assertNotNull(triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      
      triangleFigure1.setRemovable(false);
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isVisible());
      assertFalse(triangleFigure1.isRemovable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isSelectable());
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      
      FigureAdapter figureAdapter0 = new FigureAdapter();
      assertNotNull(figureAdapter0);
      
      Class<NullHandle> class0 = NullHandle.class;
      AttributeKey<NullHandle> attributeKey0 = new AttributeKey<NullHandle>("' ", class0);
      assertEquals("' ", attributeKey0.toString());
      assertEquals("' ", attributeKey0.getKey());
      assertTrue(attributeKey0.isNullValueAllowed());
      assertNotNull(attributeKey0);
      
      FigureEvent figureEvent0 = new FigureEvent(defaultDrawing0, attributeKey0, figureAdapter0, triangleFigure1);
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(defaultDrawing0.equals((Object)abstractDrawing0));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isVisible());
      assertFalse(triangleFigure1.isRemovable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isSelectable());
      assertEquals("' ", attributeKey0.toString());
      assertEquals("' ", attributeKey0.getKey());
      assertTrue(attributeKey0.isNullValueAllowed());
      assertNotNull(figureEvent0);
      
      figureAdapter0.attributeChanged(figureEvent0);
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(defaultDrawing0.equals((Object)abstractDrawing0));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isVisible());
      assertFalse(triangleFigure1.isRemovable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isSelectable());
      assertEquals("' ", attributeKey0.toString());
      assertEquals("' ", attributeKey0.getKey());
      assertTrue(attributeKey0.isNullValueAllowed());
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(defaultDrawing0, abstractDrawing0);
      assertNotSame(triangleFigure1, triangleFigure0);
      
      triangleFigure0.removeFigureListener(figureAdapter0);
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertNotSame(triangleFigure0, triangleFigure1);
      
      triangleFigure1.removeFigureListener(figureAdapter0);
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isVisible());
      assertFalse(triangleFigure1.isRemovable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isSelectable());
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      
      TriangleFigure triangleFigure2 = triangleFigure1.clone();
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertFalse(triangleFigure2.equals((Object)triangleFigure1));
      assertFalse(triangleFigure2.equals((Object)triangleFigure0));
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isVisible());
      assertFalse(triangleFigure1.isRemovable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isSelectable());
      assertTrue(triangleFigure2.isConnectable());
      assertTrue(triangleFigure2.isVisible());
      assertTrue(triangleFigure2.isSelectable());
      assertFalse(triangleFigure2.isRemovable());
      assertEquals(3.0, triangleFigure2.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure2.getLayer());
      assertNotNull(triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure1, triangleFigure2);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(triangleFigure2, triangleFigure1);
      assertNotSame(triangleFigure2, triangleFigure0);
      
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertNotNull(labeledLineConnectionFigure0);
      
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      assertFalse(labeledLineConnectionFigure1.equals((Object)labeledLineConnectionFigure0));
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(0, labeledLineConnectionFigure1.getChildCount());
      assertFalse(labeledLineConnectionFigure1.isConnectable());
      assertTrue(labeledLineConnectionFigure1.isSelectable());
      assertFalse(labeledLineConnectionFigure1.isClosed());
      assertEquals(0, labeledLineConnectionFigure1.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(labeledLineConnectionFigure1.isRemovable());
      assertTrue(labeledLineConnectionFigure1.isVisible());
      assertNotNull(labeledLineConnectionFigure1);
      assertNotSame(labeledLineConnectionFigure0, labeledLineConnectionFigure1);
      assertNotSame(labeledLineConnectionFigure1, labeledLineConnectionFigure0);
      
      LabeledLineConnectionFigure labeledLineConnectionFigure2 = (LabeledLineConnectionFigure)labeledLineConnectionFigure1.clone();
      assertFalse(labeledLineConnectionFigure2.equals((Object)labeledLineConnectionFigure0));
      assertFalse(labeledLineConnectionFigure2.equals((Object)labeledLineConnectionFigure1));
      assertFalse(labeledLineConnectionFigure0.equals((Object)labeledLineConnectionFigure1));
      assertFalse(labeledLineConnectionFigure1.equals((Object)labeledLineConnectionFigure0));
      assertEquals(0, labeledLineConnectionFigure2.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure2.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labeledLineConnectionFigure2.isConnectable());
      assertTrue(labeledLineConnectionFigure2.isSelectable());
      assertTrue(labeledLineConnectionFigure2.isRemovable());
      assertFalse(labeledLineConnectionFigure2.isClosed());
      assertEquals(0, labeledLineConnectionFigure2.getChildCount());
      assertTrue(labeledLineConnectionFigure2.isVisible());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(0, labeledLineConnectionFigure1.getChildCount());
      assertFalse(labeledLineConnectionFigure1.isConnectable());
      assertTrue(labeledLineConnectionFigure1.isSelectable());
      assertFalse(labeledLineConnectionFigure1.isClosed());
      assertEquals(0, labeledLineConnectionFigure1.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(labeledLineConnectionFigure1.isRemovable());
      assertTrue(labeledLineConnectionFigure1.isVisible());
      assertNotNull(labeledLineConnectionFigure2);
      assertNotSame(labeledLineConnectionFigure2, labeledLineConnectionFigure0);
      assertNotSame(labeledLineConnectionFigure2, labeledLineConnectionFigure1);
      assertNotSame(labeledLineConnectionFigure0, labeledLineConnectionFigure1);
      assertNotSame(labeledLineConnectionFigure0, labeledLineConnectionFigure2);
      assertNotSame(labeledLineConnectionFigure1, labeledLineConnectionFigure2);
      assertNotSame(labeledLineConnectionFigure1, labeledLineConnectionFigure0);
      
      Point2D.Double point2D_Double0 = labeledLineConnectionFigure2.getCenter();
      assertFalse(labeledLineConnectionFigure2.equals((Object)labeledLineConnectionFigure0));
      assertFalse(labeledLineConnectionFigure2.equals((Object)labeledLineConnectionFigure1));
      assertFalse(labeledLineConnectionFigure0.equals((Object)labeledLineConnectionFigure1));
      assertFalse(labeledLineConnectionFigure0.equals((Object)labeledLineConnectionFigure2));
      assertFalse(labeledLineConnectionFigure1.equals((Object)labeledLineConnectionFigure2));
      assertFalse(labeledLineConnectionFigure1.equals((Object)labeledLineConnectionFigure0));
      assertEquals(0, labeledLineConnectionFigure2.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure2.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labeledLineConnectionFigure2.isConnectable());
      assertTrue(labeledLineConnectionFigure2.isSelectable());
      assertTrue(labeledLineConnectionFigure2.isRemovable());
      assertFalse(labeledLineConnectionFigure2.isClosed());
      assertEquals(0, labeledLineConnectionFigure2.getChildCount());
      assertTrue(labeledLineConnectionFigure2.isVisible());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(0, labeledLineConnectionFigure1.getChildCount());
      assertFalse(labeledLineConnectionFigure1.isConnectable());
      assertTrue(labeledLineConnectionFigure1.isSelectable());
      assertFalse(labeledLineConnectionFigure1.isClosed());
      assertEquals(0, labeledLineConnectionFigure1.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(labeledLineConnectionFigure1.isRemovable());
      assertTrue(labeledLineConnectionFigure1.isVisible());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      assertNotSame(labeledLineConnectionFigure2, labeledLineConnectionFigure0);
      assertNotSame(labeledLineConnectionFigure2, labeledLineConnectionFigure1);
      assertNotSame(labeledLineConnectionFigure0, labeledLineConnectionFigure1);
      assertNotSame(labeledLineConnectionFigure0, labeledLineConnectionFigure2);
      assertNotSame(labeledLineConnectionFigure1, labeledLineConnectionFigure2);
      assertNotSame(labeledLineConnectionFigure1, labeledLineConnectionFigure0);
      
      Point2D.Double point2D_Double1 = triangleFigure2.chop(point2D_Double0);
      assertFalse(labeledLineConnectionFigure2.equals((Object)labeledLineConnectionFigure0));
      assertFalse(labeledLineConnectionFigure2.equals((Object)labeledLineConnectionFigure1));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure0.equals((Object)triangleFigure2));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertFalse(triangleFigure1.equals((Object)triangleFigure2));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertFalse(triangleFigure2.equals((Object)triangleFigure1));
      assertFalse(triangleFigure2.equals((Object)triangleFigure0));
      assertFalse(labeledLineConnectionFigure0.equals((Object)labeledLineConnectionFigure1));
      assertFalse(labeledLineConnectionFigure0.equals((Object)labeledLineConnectionFigure2));
      assertFalse(labeledLineConnectionFigure1.equals((Object)labeledLineConnectionFigure2));
      assertFalse(labeledLineConnectionFigure1.equals((Object)labeledLineConnectionFigure0));
      assertEquals(0, labeledLineConnectionFigure2.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure2.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labeledLineConnectionFigure2.isConnectable());
      assertTrue(labeledLineConnectionFigure2.isSelectable());
      assertTrue(labeledLineConnectionFigure2.isRemovable());
      assertFalse(labeledLineConnectionFigure2.isClosed());
      assertEquals(0, labeledLineConnectionFigure2.getChildCount());
      assertTrue(labeledLineConnectionFigure2.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isVisible());
      assertFalse(triangleFigure1.isRemovable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isSelectable());
      assertTrue(triangleFigure2.isConnectable());
      assertTrue(triangleFigure2.isVisible());
      assertTrue(triangleFigure2.isSelectable());
      assertFalse(triangleFigure2.isRemovable());
      assertEquals(3.0, triangleFigure2.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure2.getLayer());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(0, labeledLineConnectionFigure1.getChildCount());
      assertFalse(labeledLineConnectionFigure1.isConnectable());
      assertTrue(labeledLineConnectionFigure1.isSelectable());
      assertFalse(labeledLineConnectionFigure1.isClosed());
      assertEquals(0, labeledLineConnectionFigure1.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(labeledLineConnectionFigure1.isRemovable());
      assertTrue(labeledLineConnectionFigure1.isVisible());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-1.0), point2D_Double1.y, 0.01);
      assertEquals((-1.0), point2D_Double1.x, 0.01);
      assertNotNull(point2D_Double1);
      assertNotSame(labeledLineConnectionFigure2, labeledLineConnectionFigure0);
      assertNotSame(labeledLineConnectionFigure2, labeledLineConnectionFigure1);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertNotSame(triangleFigure1, triangleFigure2);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(triangleFigure2, triangleFigure1);
      assertNotSame(triangleFigure2, triangleFigure0);
      assertNotSame(labeledLineConnectionFigure0, labeledLineConnectionFigure1);
      assertNotSame(labeledLineConnectionFigure0, labeledLineConnectionFigure2);
      assertNotSame(labeledLineConnectionFigure1, labeledLineConnectionFigure2);
      assertNotSame(labeledLineConnectionFigure1, labeledLineConnectionFigure0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TriangleFigure triangleFigure0 = null;
      try {
        triangleFigure0 = new TriangleFigure((AttributeKeys.Orientation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null value not allowed for AttributeKey orientation
         //
         verifyException("org.jhotdraw.draw.AttributeKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertNotNull(triangleFigure0);
      
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure1.isVisible());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isSelectable());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertNotNull(triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      
      BezierFigure bezierFigure0 = new BezierFigure(true);
      assertTrue(bezierFigure0.isSelectable());
      assertTrue(bezierFigure0.isVisible());
      assertTrue(bezierFigure0.isClosed());
      assertEquals(3.0, bezierFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, bezierFigure0.getLayer());
      assertTrue(bezierFigure0.isRemovable());
      assertTrue(bezierFigure0.isConnectable());
      assertNotNull(bezierFigure0);
      
      Point2D.Double point2D_Double0 = bezierFigure0.getPointOnPath((-720.3993F), (-720.3993F));
      assertTrue(bezierFigure0.isSelectable());
      assertTrue(bezierFigure0.isVisible());
      assertTrue(bezierFigure0.isClosed());
      assertEquals(3.0, bezierFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, bezierFigure0.getLayer());
      assertTrue(bezierFigure0.isRemovable());
      assertTrue(bezierFigure0.isConnectable());
      assertNull(point2D_Double0);
      
      JMenu jMenu0 = new JMenu();
      assertTrue(jMenu0.getFocusTraversalKeysEnabled());
      assertFalse(jMenu0.isFocusTraversalPolicySet());
      assertFalse(jMenu0.isFocusCycleRoot());
      assertFalse(jMenu0.getIgnoreRepaint());
      assertFalse(jMenu0.isFocusTraversalPolicyProvider());
      assertNotNull(jMenu0);
      
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      assertTrue(jMenu0.getFocusTraversalKeysEnabled());
      assertFalse(jMenu0.isFocusTraversalPolicySet());
      assertFalse(jMenu0.isFocusCycleRoot());
      assertFalse(jMenu0.getIgnoreRepaint());
      assertFalse(jMenu0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenu0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenu0.isFocusCycleRoot());
      assertFalse(jPopupMenu0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenu0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenu0.getIgnoreRepaint());
      assertNotNull(jPopupMenu0);
      
      JPopupMenu jPopupMenu1 = (JPopupMenu)jPopupMenu0.getComponent();
      assertTrue(jMenu0.getFocusTraversalKeysEnabled());
      assertFalse(jMenu0.isFocusTraversalPolicySet());
      assertFalse(jMenu0.isFocusCycleRoot());
      assertFalse(jMenu0.getIgnoreRepaint());
      assertFalse(jMenu0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenu0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenu0.isFocusCycleRoot());
      assertFalse(jPopupMenu0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenu0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenu0.getIgnoreRepaint());
      assertFalse(jPopupMenu1.isFocusCycleRoot());
      assertFalse(jPopupMenu1.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenu1.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenu1.getIgnoreRepaint());
      assertFalse(jPopupMenu1.isFocusTraversalPolicySet());
      assertNotNull(jPopupMenu1);
      assertSame(jPopupMenu0, jPopupMenu1);
      assertSame(jPopupMenu1, jPopupMenu0);
      
      int int0 = 0;
      int int1 = 1765;
      int int2 = 0;
      MouseEvent mouseEvent0 = new MouseEvent(jPopupMenu1, 0, 0, (-3797), 1765, 0, 1765, (-3543), 8, true, 0);
      assertTrue(jMenu0.getFocusTraversalKeysEnabled());
      assertFalse(jMenu0.isFocusTraversalPolicySet());
      assertFalse(jMenu0.isFocusCycleRoot());
      assertFalse(jMenu0.getIgnoreRepaint());
      assertFalse(jMenu0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenu0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenu0.isFocusCycleRoot());
      assertFalse(jPopupMenu0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenu0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenu0.getIgnoreRepaint());
      assertFalse(jPopupMenu1.isFocusCycleRoot());
      assertFalse(jPopupMenu1.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenu1.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenu1.getIgnoreRepaint());
      assertFalse(jPopupMenu1.isFocusTraversalPolicySet());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertEquals((-3543), mouseEvent0.getYOnScreen());
      assertTrue(mouseEvent0.isShiftDown());
      assertTrue(mouseEvent0.isControlDown());
      assertTrue(mouseEvent0.isAltGraphDown());
      assertTrue(mouseEvent0.isAltDown());
      assertEquals(8, mouseEvent0.getClickCount());
      assertEquals(1765, mouseEvent0.getXOnScreen());
      assertEquals((-2147483605), mouseEvent0.getModifiers());
      assertFalse(mouseEvent0.isMetaDown());
      assertEquals(0, mouseEvent0.getY());
      assertEquals(0, mouseEvent0.getButton());
      assertEquals(0L, mouseEvent0.getWhen());
      assertEquals(1765, mouseEvent0.getX());
      assertEquals(0, mouseEvent0.getID());
      assertFalse(mouseEvent0.isConsumed());
      assertNotNull(mouseEvent0);
      
      DrawingEditorProxy drawingEditorProxy0 = new DrawingEditorProxy();
      assertNotNull(drawingEditorProxy0);
      
      DrawingView drawingView0 = drawingEditorProxy0.getFocusedView();
      assertNull(drawingView0);
      
      boolean boolean0 = triangleFigure1.handleMouseClick((Point2D.Double) null, mouseEvent0, (DrawingView) null);
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertFalse(boolean0);
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure1.isVisible());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isSelectable());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(jMenu0.getFocusTraversalKeysEnabled());
      assertFalse(jMenu0.isFocusTraversalPolicySet());
      assertFalse(jMenu0.isFocusCycleRoot());
      assertFalse(jMenu0.getIgnoreRepaint());
      assertFalse(jMenu0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenu0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenu0.isFocusCycleRoot());
      assertFalse(jPopupMenu0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenu0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenu0.getIgnoreRepaint());
      assertFalse(jPopupMenu1.isFocusCycleRoot());
      assertFalse(jPopupMenu1.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenu1.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenu1.getIgnoreRepaint());
      assertFalse(jPopupMenu1.isFocusTraversalPolicySet());
      assertTrue(mouseEvent0.isPopupTrigger());
      assertEquals((-3543), mouseEvent0.getYOnScreen());
      assertTrue(mouseEvent0.isShiftDown());
      assertTrue(mouseEvent0.isControlDown());
      assertTrue(mouseEvent0.isAltGraphDown());
      assertTrue(mouseEvent0.isAltDown());
      assertEquals(8, mouseEvent0.getClickCount());
      assertEquals(1765, mouseEvent0.getXOnScreen());
      assertEquals((-2147483605), mouseEvent0.getModifiers());
      assertFalse(mouseEvent0.isMetaDown());
      assertEquals(0, mouseEvent0.getY());
      assertEquals(0, mouseEvent0.getButton());
      assertEquals(0L, mouseEvent0.getWhen());
      assertEquals(1765, mouseEvent0.getX());
      assertEquals(0, mouseEvent0.getID());
      assertFalse(mouseEvent0.isConsumed());
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertSame(jPopupMenu0, jPopupMenu1);
      assertSame(jPopupMenu1, jPopupMenu0);
      
      // Undeclared exception!
      try { 
        triangleFigure1.restoreTransformTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TriangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(triangleFigure0);
      
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isConnectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isSelectable());
      assertNotNull(triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)triangleFigure1.getTransformRestoreData();
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isConnectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isSelectable());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(rectangle2D_Double0);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      
      triangleFigure0.restoreTransformTo(rectangle2D_Double0);
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isConnectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isSelectable());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, 0.0, 0.0, attributeKeys_Orientation0);
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(triangleFigure0);
      
      AffineTransform affineTransform0 = new AffineTransform();
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertNotNull(affineTransform0);
      
      AffineTransform affineTransform1 = new AffineTransform(affineTransform0);
      assertTrue(affineTransform1.equals((Object)affineTransform0));
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform1.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform1.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform1.getShearX(), 0.01);
      assertEquals(0.0, affineTransform1.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform1.getShearY(), 0.01);
      assertEquals(0.0, affineTransform1.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform1.getDeterminant(), 0.01);
      assertNotNull(affineTransform1);
      
      triangleFigure0.transform(affineTransform1);
      assertTrue(affineTransform0.equals((Object)affineTransform1));
      assertTrue(affineTransform1.equals((Object)affineTransform0));
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform1.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform1.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform1.getShearX(), 0.01);
      assertEquals(0.0, affineTransform1.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform1.getShearY(), 0.01);
      assertEquals(0.0, affineTransform1.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform1.getDeterminant(), 0.01);
      assertNotSame(affineTransform0, affineTransform1);
      assertNotSame(affineTransform1, affineTransform0);
      
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getBounds();
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(0.05, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.05, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.1, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.1, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.1, rectangle2D_Double0.width, 0.01);
      assertEquals(0.1, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3, bezierPath0.size());
      assertTrue(bezierPath0.isClosed());
      assertFalse(bezierPath0.isEmpty());
      assertEquals(0, bezierPath0.getWindingRule());
      assertEquals(1, BezierPath.C1_MASK);
      assertEquals(2, BezierPath.C2_MASK);
      assertEquals(0, BezierPath.C0_MASK);
      assertEquals(3, BezierPath.C1C2_MASK);
      assertNotNull(bezierPath0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      assertEquals(0, triangleFigure0.getLayer());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(triangleFigure0);
      
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertEquals(0, triangleFigure0.getLayer());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertTrue(triangleFigure1.isVisible());
      assertNotNull(triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      assertEquals(0, lineConnectionFigure0.getLayer());
      assertEquals(3.0, lineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(lineConnectionFigure0.isConnectable());
      assertFalse(lineConnectionFigure0.isClosed());
      assertTrue(lineConnectionFigure0.isSelectable());
      assertTrue(lineConnectionFigure0.isRemovable());
      assertTrue(lineConnectionFigure0.isVisible());
      assertNotNull(lineConnectionFigure0);
      
      Point2D.Double point2D_Double0 = lineConnectionFigure0.getEndPoint();
      assertEquals(0, lineConnectionFigure0.getLayer());
      assertEquals(3.0, lineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(lineConnectionFigure0.isConnectable());
      assertFalse(lineConnectionFigure0.isClosed());
      assertTrue(lineConnectionFigure0.isSelectable());
      assertTrue(lineConnectionFigure0.isRemovable());
      assertTrue(lineConnectionFigure0.isVisible());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      Collection<Action> collection0 = lineConnectionFigure0.getActions(point2D_Double0);
      assertEquals(0, lineConnectionFigure0.getLayer());
      assertEquals(3.0, lineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(lineConnectionFigure0.isConnectable());
      assertFalse(lineConnectionFigure0.isClosed());
      assertTrue(lineConnectionFigure0.isSelectable());
      assertTrue(lineConnectionFigure0.isRemovable());
      assertTrue(lineConnectionFigure0.isVisible());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(collection0);
      
      Point2D.Double point2D_Double1 = triangleFigure1.chop(point2D_Double0);
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertEquals(0, triangleFigure0.getLayer());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertTrue(triangleFigure1.isVisible());
      assertEquals(0, lineConnectionFigure0.getLayer());
      assertEquals(3.0, lineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(lineConnectionFigure0.isConnectable());
      assertFalse(lineConnectionFigure0.isClosed());
      assertTrue(lineConnectionFigure0.isSelectable());
      assertTrue(lineConnectionFigure0.isRemovable());
      assertTrue(lineConnectionFigure0.isVisible());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-1.0), point2D_Double1.x, 0.01);
      assertEquals((-1.0), point2D_Double1.y, 0.01);
      assertNotNull(point2D_Double1);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      
      Point2D.Double point2D_Double2 = (Point2D.Double)point2D_Double0.clone();
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double2.equals((Object)point2D_Double1));
      assertTrue(point2D_Double2.equals((Object)point2D_Double0));
      assertEquals(0, lineConnectionFigure0.getLayer());
      assertEquals(3.0, lineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(lineConnectionFigure0.isConnectable());
      assertFalse(lineConnectionFigure0.isClosed());
      assertTrue(lineConnectionFigure0.isSelectable());
      assertTrue(lineConnectionFigure0.isRemovable());
      assertTrue(lineConnectionFigure0.isVisible());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double2.y, 0.01);
      assertEquals(0.0, point2D_Double2.x, 0.01);
      assertNotNull(point2D_Double2);
      assertNotSame(point2D_Double0, point2D_Double2);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double2, point2D_Double0);
      assertNotSame(point2D_Double2, point2D_Double1);
      
      BezierPath bezierPath0 = triangleFigure1.getBezierPath();
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertEquals(0, triangleFigure0.getLayer());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertTrue(triangleFigure1.isVisible());
      assertEquals(3, bezierPath0.size());
      assertTrue(bezierPath0.isClosed());
      assertFalse(bezierPath0.isEmpty());
      assertEquals(0, bezierPath0.getWindingRule());
      assertEquals(1, BezierPath.C1_MASK);
      assertEquals(0, BezierPath.C0_MASK);
      assertEquals(2, BezierPath.C2_MASK);
      assertEquals(3, BezierPath.C1C2_MASK);
      assertNotNull(bezierPath0);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      
      Point2D.Double point2D_Double3 = triangleFigure1.chop(point2D_Double0);
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(point2D_Double0.equals((Object)point2D_Double2));
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double3.equals((Object)point2D_Double0));
      assertFalse(point2D_Double3.equals((Object)point2D_Double2));
      assertTrue(point2D_Double3.equals((Object)point2D_Double1));
      assertEquals(0, triangleFigure0.getLayer());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertTrue(triangleFigure1.isVisible());
      assertEquals(0, lineConnectionFigure0.getLayer());
      assertEquals(3.0, lineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(lineConnectionFigure0.isConnectable());
      assertFalse(lineConnectionFigure0.isClosed());
      assertTrue(lineConnectionFigure0.isSelectable());
      assertTrue(lineConnectionFigure0.isRemovable());
      assertTrue(lineConnectionFigure0.isVisible());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-1.0), point2D_Double3.y, 0.01);
      assertEquals((-1.0), point2D_Double3.x, 0.01);
      assertNotNull(point2D_Double3);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(point2D_Double0, point2D_Double2);
      assertNotSame(point2D_Double0, point2D_Double3);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double3, point2D_Double0);
      assertNotSame(point2D_Double3, point2D_Double1);
      assertNotSame(point2D_Double3, point2D_Double2);
      
      Point2D.Double point2D_Double4 = triangleFigure1.chop(point2D_Double3);
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(point2D_Double0.equals((Object)point2D_Double2));
      assertFalse(point2D_Double0.equals((Object)point2D_Double3));
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double3.equals((Object)point2D_Double0));
      assertFalse(point2D_Double3.equals((Object)point2D_Double2));
      assertTrue(point2D_Double3.equals((Object)point2D_Double1));
      assertTrue(point2D_Double4.equals((Object)point2D_Double3));
      assertFalse(point2D_Double4.equals((Object)point2D_Double0));
      assertFalse(point2D_Double4.equals((Object)point2D_Double2));
      assertTrue(point2D_Double4.equals((Object)point2D_Double1));
      assertEquals(0, triangleFigure0.getLayer());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertTrue(triangleFigure1.isVisible());
      assertEquals(0, lineConnectionFigure0.getLayer());
      assertEquals(3.0, lineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(lineConnectionFigure0.isConnectable());
      assertFalse(lineConnectionFigure0.isClosed());
      assertTrue(lineConnectionFigure0.isSelectable());
      assertTrue(lineConnectionFigure0.isRemovable());
      assertTrue(lineConnectionFigure0.isVisible());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-1.0), point2D_Double3.y, 0.01);
      assertEquals((-1.0), point2D_Double3.x, 0.01);
      assertEquals((-1.0), point2D_Double4.y, 0.01);
      assertEquals((-1.0), point2D_Double4.x, 0.01);
      assertNotNull(point2D_Double4);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(point2D_Double0, point2D_Double2);
      assertNotSame(point2D_Double0, point2D_Double4);
      assertNotSame(point2D_Double0, point2D_Double3);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double3, point2D_Double0);
      assertNotSame(point2D_Double3, point2D_Double1);
      assertNotSame(point2D_Double3, point2D_Double4);
      assertNotSame(point2D_Double3, point2D_Double2);
      assertNotSame(point2D_Double4, point2D_Double1);
      assertNotSame(point2D_Double4, point2D_Double3);
      assertNotSame(point2D_Double4, point2D_Double0);
      assertNotSame(point2D_Double4, point2D_Double2);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 3;
      floatArray0[4] = (-1314.3119F);
      floatArray0[5] = (float) 3;
      floatArray0[6] = (float) 0;
      floatArray0[7] = 0.0F;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_DITHERING;
      assertNotNull(sunHints_Key0);
      
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isEditable());
      assertNotNull(textAreaFigure0);
      
      Rectangle2D.Double rectangle2D_Double0 = textAreaFigure0.bounds;
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, rectangle2D_Double0);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(renderingHints0);
      
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, 3.0F, (-1314.3119F), 3.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(8, rescaleOp0.getNumFactors());
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(rescaleOp0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(0, 1, byteArray0, 1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH;
      TriangleFigure triangleFigure0 = new TriangleFigure(2732.39258946, (-47.9), 2732.39258946, 8.0, attributeKeys_Orientation0);
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(triangleFigure0);
      
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure1.isVisible());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertNotNull(triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure1.getBounds();
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure1.isVisible());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertEquals(5464.78517892, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-39.9), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(2732.39258946, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-47.9), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(4098.5888841900005, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-43.9), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(8.0, rectangle2D_Double0.height, 0.01);
      assertEquals(2732.39258946, rectangle2D_Double0.x, 0.01);
      assertEquals(2732.39258946, rectangle2D_Double0.width, 0.01);
      assertEquals((-47.9), rectangle2D_Double0.y, 0.01);
      assertNotNull(rectangle2D_Double0);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertNotNull(triangleFigure0);
      
      triangleFigure0.fireFigureHandlesChanged();
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      
      Point2D.Double point2D_Double0 = new Point2D.Double(1699.9, (-2432.65394));
      assertEquals((-2432.65394), point2D_Double0.y, 0.01);
      assertEquals(1699.9, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      point2D_Double0.y = 1699.9;
      Point2D.Double point2D_Double1 = triangleFigure0.chop(point2D_Double0);
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertEquals(1699.9, point2D_Double0.y, 0.01);
      assertEquals(1699.9, point2D_Double0.x, 0.01);
      assertEquals((-1.0), point2D_Double1.x, 0.01);
      assertEquals((-1.0), point2D_Double1.y, 0.01);
      assertNotNull(point2D_Double1);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      
      ImageFigure imageFigure0 = new ImageFigure(5.0, 5.0, (-2432.65394), 0.0);
      assertTrue(imageFigure0.isVisible());
      assertTrue(imageFigure0.isConnectable());
      assertTrue(imageFigure0.isRemovable());
      assertEquals(0, imageFigure0.getLayer());
      assertEquals(3.0, imageFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(imageFigure0.isSelectable());
      assertNotNull(imageFigure0);
      
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertNotNull(labeledLineConnectionFigure0);
      
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      assertFalse(labeledLineConnectionFigure1.equals((Object)labeledLineConnectionFigure0));
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertFalse(labeledLineConnectionFigure1.isConnectable());
      assertTrue(labeledLineConnectionFigure1.isSelectable());
      assertTrue(labeledLineConnectionFigure1.isVisible());
      assertTrue(labeledLineConnectionFigure1.isRemovable());
      assertEquals(0, labeledLineConnectionFigure1.getChildCount());
      assertEquals(0, labeledLineConnectionFigure1.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labeledLineConnectionFigure1.isClosed());
      assertNotNull(labeledLineConnectionFigure1);
      assertNotSame(labeledLineConnectionFigure0, labeledLineConnectionFigure1);
      assertNotSame(labeledLineConnectionFigure1, labeledLineConnectionFigure0);
      
      ChopRectangleConnector chopRectangleConnector0 = (ChopRectangleConnector)imageFigure0.findConnector(point2D_Double1, labeledLineConnectionFigure1);
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertFalse(labeledLineConnectionFigure0.equals((Object)labeledLineConnectionFigure1));
      assertFalse(labeledLineConnectionFigure1.equals((Object)labeledLineConnectionFigure0));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(imageFigure0.isVisible());
      assertTrue(imageFigure0.isConnectable());
      assertTrue(imageFigure0.isRemovable());
      assertEquals(0, imageFigure0.getLayer());
      assertEquals(3.0, imageFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(imageFigure0.isSelectable());
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertFalse(labeledLineConnectionFigure1.isConnectable());
      assertTrue(labeledLineConnectionFigure1.isSelectable());
      assertTrue(labeledLineConnectionFigure1.isVisible());
      assertTrue(labeledLineConnectionFigure1.isRemovable());
      assertEquals(0, labeledLineConnectionFigure1.getChildCount());
      assertEquals(0, labeledLineConnectionFigure1.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labeledLineConnectionFigure1.isClosed());
      assertFalse(chopRectangleConnector0.isConnectToDecorator());
      assertEquals(1699.9, point2D_Double0.y, 0.01);
      assertEquals(1699.9, point2D_Double0.x, 0.01);
      assertEquals((-1.0), point2D_Double1.x, 0.01);
      assertEquals((-1.0), point2D_Double1.y, 0.01);
      assertNotNull(chopRectangleConnector0);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertNotSame(labeledLineConnectionFigure0, labeledLineConnectionFigure1);
      assertNotSame(labeledLineConnectionFigure1, labeledLineConnectionFigure0);
      
      triangleFigure0.fireFigureChanged();
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      
      point2D_Double1.y = 1699.9;
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      
      ChopTriangleConnector chopTriangleConnector0 = (ChopTriangleConnector)triangleFigure0.findCompatibleConnector(chopRectangleConnector0, false);
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertFalse(labeledLineConnectionFigure0.equals((Object)labeledLineConnectionFigure1));
      assertFalse(labeledLineConnectionFigure1.equals((Object)labeledLineConnectionFigure0));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(imageFigure0.isVisible());
      assertTrue(imageFigure0.isConnectable());
      assertTrue(imageFigure0.isRemovable());
      assertEquals(0, imageFigure0.getLayer());
      assertEquals(3.0, imageFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(imageFigure0.isSelectable());
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertFalse(labeledLineConnectionFigure1.isConnectable());
      assertTrue(labeledLineConnectionFigure1.isSelectable());
      assertTrue(labeledLineConnectionFigure1.isVisible());
      assertTrue(labeledLineConnectionFigure1.isRemovable());
      assertEquals(0, labeledLineConnectionFigure1.getChildCount());
      assertEquals(0, labeledLineConnectionFigure1.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labeledLineConnectionFigure1.isClosed());
      assertFalse(chopRectangleConnector0.isConnectToDecorator());
      assertFalse(chopTriangleConnector0.isConnectToDecorator());
      assertEquals(1699.9, point2D_Double0.y, 0.01);
      assertEquals(1699.9, point2D_Double0.x, 0.01);
      assertEquals((-1.0), point2D_Double1.x, 0.01);
      assertEquals(1699.9, point2D_Double1.y, 0.01);
      assertNotNull(chopTriangleConnector0);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertNotSame(labeledLineConnectionFigure0, labeledLineConnectionFigure1);
      assertNotSame(labeledLineConnectionFigure1, labeledLineConnectionFigure0);
      
      triangleFigure0.setBounds(point2D_Double0, point2D_Double1);
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertEquals(1699.9, point2D_Double0.y, 0.01);
      assertEquals(1699.9, point2D_Double0.x, 0.01);
      assertEquals((-1.0), point2D_Double1.x, 0.01);
      assertEquals(1699.9, point2D_Double1.y, 0.01);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isVisible());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isSelectable());
      assertNotNull(triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      
      Point2D.Double point2D_Double2 = triangleFigure1.chop(point2D_Double0);
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertFalse(point2D_Double2.equals((Object)point2D_Double0));
      assertFalse(point2D_Double2.equals((Object)point2D_Double1));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isVisible());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isSelectable());
      assertEquals(1699.9, point2D_Double0.y, 0.01);
      assertEquals(1699.9, point2D_Double0.x, 0.01);
      assertEquals(1699.3002713635415, point2D_Double2.x, 0.01);
      assertEquals(1699.900035268096, point2D_Double2.y, 0.01);
      assertNotNull(point2D_Double2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double0, point2D_Double2);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(point2D_Double2, point2D_Double0);
      assertNotSame(point2D_Double2, point2D_Double1);
      
      boolean boolean0 = true;
      ChopTriangleConnector chopTriangleConnector1 = (ChopTriangleConnector)triangleFigure1.findCompatibleConnector(chopTriangleConnector0, true);
      assertFalse(chopTriangleConnector1.equals((Object)chopTriangleConnector0));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double0.equals((Object)point2D_Double2));
      assertFalse(point2D_Double1.equals((Object)point2D_Double2));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertFalse(labeledLineConnectionFigure0.equals((Object)labeledLineConnectionFigure1));
      assertFalse(labeledLineConnectionFigure1.equals((Object)labeledLineConnectionFigure0));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertFalse(chopTriangleConnector1.isConnectToDecorator());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(imageFigure0.isVisible());
      assertTrue(imageFigure0.isConnectable());
      assertTrue(imageFigure0.isRemovable());
      assertEquals(0, imageFigure0.getLayer());
      assertEquals(3.0, imageFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(imageFigure0.isSelectable());
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertFalse(labeledLineConnectionFigure1.isConnectable());
      assertTrue(labeledLineConnectionFigure1.isSelectable());
      assertTrue(labeledLineConnectionFigure1.isVisible());
      assertTrue(labeledLineConnectionFigure1.isRemovable());
      assertEquals(0, labeledLineConnectionFigure1.getChildCount());
      assertEquals(0, labeledLineConnectionFigure1.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labeledLineConnectionFigure1.isClosed());
      assertFalse(chopRectangleConnector0.isConnectToDecorator());
      assertFalse(chopTriangleConnector0.isConnectToDecorator());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isVisible());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isSelectable());
      assertEquals(1699.9, point2D_Double0.y, 0.01);
      assertEquals(1699.9, point2D_Double0.x, 0.01);
      assertEquals((-1.0), point2D_Double1.x, 0.01);
      assertEquals(1699.9, point2D_Double1.y, 0.01);
      assertNotNull(chopTriangleConnector1);
      assertNotSame(chopTriangleConnector1, chopTriangleConnector0);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double0, point2D_Double2);
      assertNotSame(point2D_Double1, point2D_Double2);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertNotSame(labeledLineConnectionFigure0, labeledLineConnectionFigure1);
      assertNotSame(labeledLineConnectionFigure1, labeledLineConnectionFigure0);
      assertNotSame(chopTriangleConnector0, chopTriangleConnector1);
      assertNotSame(triangleFigure1, triangleFigure0);
      
      // Undeclared exception!
      try { 
        triangleFigure0.drawStroke((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(635.2017847319471, (-1.0), 1.0, (-4284.67510313), attributeKeys_Orientation0);
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertNotNull(triangleFigure0);
      
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isSelectable());
      assertNotNull(triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      
      // Undeclared exception!
      try { 
        triangleFigure1.chop((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.geom.Geom", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(triangleFigure0);
      
      triangleFigure0.setTransformable(false);
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      
      HashMap hashMap0 = (HashMap)triangleFigure0.getAttributesRestoreData();
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure1.isSelectable());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isRemovable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertNotNull(triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      
      Collection<Handle> collection0 = triangleFigure0.createHandles((-1499));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(collection0);
      assertNotSame(triangleFigure0, triangleFigure1);
      
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertFalse(bezierPath0.isEmpty());
      assertTrue(bezierPath0.isClosed());
      assertEquals(0, bezierPath0.getWindingRule());
      assertEquals(3, bezierPath0.size());
      assertEquals(3, BezierPath.C1C2_MASK);
      assertEquals(0, BezierPath.C0_MASK);
      assertEquals(1, BezierPath.C1_MASK);
      assertEquals(2, BezierPath.C2_MASK);
      assertNotNull(bezierPath0);
      assertNotSame(triangleFigure0, triangleFigure1);
      
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure1.getBounds();
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure1.isSelectable());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isRemovable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertNotNull(rectangle2D_Double0);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      
      Point2D.Double point2D_Double0 = triangleFigure1.getEndPoint();
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure1.isSelectable());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isRemovable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      
      Point2D.Double point2D_Double1 = triangleFigure1.chop(point2D_Double0);
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure1.isSelectable());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isRemovable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-1.0), point2D_Double1.y, 0.01);
      assertEquals((-1.0), point2D_Double1.x, 0.01);
      assertNotNull(point2D_Double1);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      
      TriangleFigure triangleFigure2 = triangleFigure0.clone();
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure2.equals((Object)triangleFigure0));
      assertFalse(triangleFigure2.equals((Object)triangleFigure1));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure2.isVisible());
      assertEquals(3.0, triangleFigure2.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure2.getLayer());
      assertTrue(triangleFigure2.isSelectable());
      assertTrue(triangleFigure2.isConnectable());
      assertTrue(triangleFigure2.isRemovable());
      assertNotNull(triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure2, triangleFigure0);
      assertNotSame(triangleFigure2, triangleFigure1);
      
      TriangleFigure triangleFigure3 = triangleFigure0.clone();
      assertFalse(triangleFigure0.equals((Object)triangleFigure2));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure3.equals((Object)triangleFigure2));
      assertFalse(triangleFigure3.equals((Object)triangleFigure0));
      assertFalse(triangleFigure3.equals((Object)triangleFigure1));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure3.isSelectable());
      assertEquals(3.0, triangleFigure3.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure3.getLayer());
      assertTrue(triangleFigure3.isVisible());
      assertTrue(triangleFigure3.isConnectable());
      assertTrue(triangleFigure3.isRemovable());
      assertNotNull(triangleFigure3);
      assertNotSame(triangleFigure0, triangleFigure3);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure3, triangleFigure2);
      assertNotSame(triangleFigure3, triangleFigure0);
      assertNotSame(triangleFigure3, triangleFigure1);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)triangleFigure1.getTransformRestoreData();
      assertFalse(triangleFigure0.equals((Object)triangleFigure3));
      assertFalse(triangleFigure0.equals((Object)triangleFigure2));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertFalse(triangleFigure1.equals((Object)triangleFigure2));
      assertFalse(triangleFigure1.equals((Object)triangleFigure3));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure1.isSelectable());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isRemovable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertNotNull(rectangle2D_Double1);
      assertNotSame(triangleFigure0, triangleFigure3);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(triangleFigure1, triangleFigure2);
      assertNotSame(triangleFigure1, triangleFigure3);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      
      Point2D.Double point2D_Double2 = triangleFigure2.chop(point2D_Double0);
      assertFalse(triangleFigure0.equals((Object)triangleFigure3));
      assertFalse(triangleFigure0.equals((Object)triangleFigure2));
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertFalse(triangleFigure1.equals((Object)triangleFigure2));
      assertFalse(triangleFigure1.equals((Object)triangleFigure3));
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(triangleFigure2.equals((Object)triangleFigure3));
      assertFalse(triangleFigure2.equals((Object)triangleFigure0));
      assertFalse(triangleFigure2.equals((Object)triangleFigure1));
      assertTrue(point2D_Double2.equals((Object)point2D_Double1));
      assertFalse(point2D_Double2.equals((Object)point2D_Double0));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure1.isSelectable());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isRemovable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure2.isVisible());
      assertEquals(3.0, triangleFigure2.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure2.getLayer());
      assertTrue(triangleFigure2.isSelectable());
      assertTrue(triangleFigure2.isConnectable());
      assertTrue(triangleFigure2.isRemovable());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals((-1.0), point2D_Double2.y, 0.01);
      assertEquals((-1.0), point2D_Double2.x, 0.01);
      assertNotNull(point2D_Double2);
      assertNotSame(triangleFigure0, triangleFigure3);
      assertNotSame(triangleFigure0, triangleFigure2);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(triangleFigure1, triangleFigure2);
      assertNotSame(triangleFigure1, triangleFigure3);
      assertNotSame(point2D_Double0, point2D_Double2);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(triangleFigure2, triangleFigure3);
      assertNotSame(triangleFigure2, triangleFigure0);
      assertNotSame(triangleFigure2, triangleFigure1);
      assertNotSame(point2D_Double2, point2D_Double1);
      assertNotSame(point2D_Double2, point2D_Double0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        triangleFigure3.restoreTransformTo(double0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.awt.geom.Rectangle2D$Double
         //
         verifyException("org.jhotdraw.draw.figure.TriangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure((-1324.6496051330823), (-1324.6496051330823), (-1324.6496051330823), (-1324.6496051330823));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertNotNull(triangleFigure0);
      
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getBounds();
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertEquals((-1324.6496051330823), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-1324.6496051330823), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-2649.2992102661647), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-2649.2992102661647), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1986.9744076996235), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1986.9744076996235), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-1324.6496051330823), rectangle2D_Double0.x, 0.01);
      assertEquals((-1324.6496051330823), rectangle2D_Double0.y, 0.01);
      assertEquals((-1324.6496051330823), rectangle2D_Double0.height, 0.01);
      assertEquals((-1324.6496051330823), rectangle2D_Double0.width, 0.01);
      assertNotNull(rectangle2D_Double0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(triangleFigure0);
      
      Point2D.Double point2D_Double0 = triangleFigure0.getStartPoint();
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertNotNull(labeledLineConnectionFigure0);
      
      point2D_Double0.setLocation((-1879.23172024), (-1879.23172024));
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals((-1879.23172024), point2D_Double0.y, 0.01);
      assertEquals((-1879.23172024), point2D_Double0.x, 0.01);
      
      point2D_Double0.x = (-1879.23172024);
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      
      ChopTriangleConnector chopTriangleConnector0 = (ChopTriangleConnector)triangleFigure0.findConnector(point2D_Double0, labeledLineConnectionFigure0);
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertFalse(chopTriangleConnector0.isConnectToDecorator());
      assertEquals((-1879.23172024), point2D_Double0.y, 0.01);
      assertEquals((-1879.23172024), point2D_Double0.x, 0.01);
      assertNotNull(chopTriangleConnector0);
      
      triangleFigure0.setBounds(point2D_Double0, point2D_Double0);
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals((-1879.23172024), point2D_Double0.y, 0.01);
      assertEquals((-1879.23172024), point2D_Double0.x, 0.01);
      
      Collection<Handle> collection0 = triangleFigure0.createHandles(0);
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(collection0);
      
      RectangleFigure rectangleFigure0 = new RectangleFigure(245, (-1879.23172024), 2429.203860843, 2817.04423732824);
      assertTrue(rectangleFigure0.isSelectable());
      assertTrue(rectangleFigure0.isConnectable());
      assertEquals(3.0, rectangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, rectangleFigure0.getLayer());
      assertTrue(rectangleFigure0.isRemovable());
      assertTrue(rectangleFigure0.isVisible());
      assertNotNull(rectangleFigure0);
      
      Rectangle2D.Double rectangle2D_Double0 = rectangleFigure0.getBounds();
      assertTrue(rectangleFigure0.isSelectable());
      assertTrue(rectangleFigure0.isConnectable());
      assertEquals(3.0, rectangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, rectangleFigure0.getLayer());
      assertTrue(rectangleFigure0.isRemovable());
      assertTrue(rectangleFigure0.isVisible());
      assertEquals((-470.70960157588), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1879.23172024), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(2674.203860843, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(937.8125170882399, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1459.6019304215, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(245.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(2817.04423732824, rectangle2D_Double0.height, 0.01);
      assertEquals(245.0, rectangle2D_Double0.x, 0.01);
      assertEquals(2429.203860843, rectangle2D_Double0.width, 0.01);
      assertEquals((-1879.23172024), rectangle2D_Double0.y, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      labeledLineConnectionFigure0.fireAreaInvalidated(rectangle2D_Double0);
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertTrue(rectangleFigure0.isSelectable());
      assertTrue(rectangleFigure0.isConnectable());
      assertEquals(3.0, rectangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, rectangleFigure0.getLayer());
      assertTrue(rectangleFigure0.isRemovable());
      assertTrue(rectangleFigure0.isVisible());
      assertEquals((-470.70960157588), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-1879.23172024), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(2674.203860843, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(937.8125170882399, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1459.6019304215, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(245.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(2817.04423732824, rectangle2D_Double0.height, 0.01);
      assertEquals(245.0, rectangle2D_Double0.x, 0.01);
      assertEquals(2429.203860843, rectangle2D_Double0.width, 0.01);
      assertEquals((-1879.23172024), rectangle2D_Double0.y, 0.01);
      
      Collection<Handle> collection1 = triangleFigure0.createHandles(245);
      assertFalse(collection1.equals((Object)collection0));
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(collection1);
      assertNotSame(collection1, collection0);
      
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3, bezierPath0.size());
      assertEquals(0, bezierPath0.getWindingRule());
      assertTrue(bezierPath0.isClosed());
      assertFalse(bezierPath0.isEmpty());
      assertEquals(1, BezierPath.C1_MASK);
      assertEquals(3, BezierPath.C1C2_MASK);
      assertEquals(0, BezierPath.C0_MASK);
      assertEquals(2, BezierPath.C2_MASK);
      assertNotNull(bezierPath0);
      
      Graphics2D graphics2D0 = null;
      // Undeclared exception!
      try { 
        triangleFigure0.drawFill((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, 0.0, 0.0);
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(triangleFigure0);
      
      triangleFigure0.setTransformable(false);
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(0.0, 0.0);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertNotNull(affineTransform0);
      
      triangleFigure0.transform(affineTransform0);
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(0, bezierPath0.getWindingRule());
      assertEquals(3, bezierPath0.size());
      assertTrue(bezierPath0.isClosed());
      assertFalse(bezierPath0.isEmpty());
      assertEquals(0, BezierPath.C0_MASK);
      assertEquals(1, BezierPath.C1_MASK);
      assertEquals(3, BezierPath.C1C2_MASK);
      assertEquals(2, BezierPath.C2_MASK);
      assertNotNull(bezierPath0);
      
      BezierPath bezierPath1 = triangleFigure0.getBezierPath();
      assertTrue(bezierPath1.equals((Object)bezierPath0));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(0, bezierPath1.getWindingRule());
      assertTrue(bezierPath1.isClosed());
      assertEquals(3, bezierPath1.size());
      assertFalse(bezierPath1.isEmpty());
      assertEquals(2, BezierPath.C2_MASK);
      assertEquals(3, BezierPath.C1C2_MASK);
      assertEquals(1, BezierPath.C1_MASK);
      assertEquals(0, BezierPath.C0_MASK);
      assertNotNull(bezierPath1);
      assertNotSame(bezierPath1, bezierPath0);
      
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      assertEquals("png", imageOutputFormat0.getFileExtension());
      assertNotNull(imageOutputFormat0);
      
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isSelectable());
      assertNotNull(defaultDrawing0);
      
      ArrayList<Figure> arrayList0 = new ArrayList<Figure>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) defaultDrawing0, (List<Figure>) arrayList0, 0.0, false);
      assertEquals("png", imageOutputFormat0.getFileExtension());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isSelectable());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertNotNull(bufferedImage0);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertEquals("png", imageOutputFormat0.getFileExtension());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isSelectable());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.paintState);
      assertNotNull(sunGraphics2D0);
      
      triangleFigure0.drawFill(sunGraphics2D0);
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals("png", imageOutputFormat0.getFileExtension());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isSelectable());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.paintState);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH;
      TriangleFigure triangleFigure0 = new TriangleFigure((-2562.5903042669), (-2562.5903042669), (-2562.5903042669), (-2562.5903042669), attributeKeys_Orientation0);
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(triangleFigure0);
      
      // Undeclared exception!
      try { 
        triangleFigure0.drawFill((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertNotNull(triangleFigure0);
      
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getBounds();
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)5;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)108;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-1038), (-1038), byteArray0, (byte)108, true, (byte)108);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertNotNull(triangleFigure0);
      
      Locator locator0 = RelativeLocator.east();
      assertNotNull(locator0);
      
      LocatorConnector locatorConnector0 = new LocatorConnector(triangleFigure0, locator0);
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertFalse(locatorConnector0.isConnectToDecorator());
      assertEquals(2, LocatorConnector.SIZE);
      assertNotNull(locatorConnector0);
      
      boolean boolean0 = false;
      ChopTriangleConnector chopTriangleConnector0 = (ChopTriangleConnector)triangleFigure0.findCompatibleConnector(locatorConnector0, false);
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertFalse(locatorConnector0.isConnectToDecorator());
      assertFalse(chopTriangleConnector0.isConnectToDecorator());
      assertEquals(2, LocatorConnector.SIZE);
      assertNotNull(chopTriangleConnector0);
      
      Point2D.Double point2D_Double0 = null;
      RelativeDecoratorLocator relativeDecoratorLocator0 = new RelativeDecoratorLocator(3704.1, (-1450.392732));
      assertNotNull(relativeDecoratorLocator0);
      
      Point2D.Double point2D_Double1 = relativeDecoratorLocator0.locate((Figure) triangleFigure0, (Figure) triangleFigure0);
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertEquals(0.0, point2D_Double1.x, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertNotNull(point2D_Double1);
      
      Point2D.Double point2D_Double2 = relativeDecoratorLocator0.locate((Figure) triangleFigure0);
      assertTrue(point2D_Double2.equals((Object)point2D_Double1));
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertEquals(0.0, point2D_Double2.x, 0.01);
      assertEquals(0.0, point2D_Double2.y, 0.01);
      assertNotNull(point2D_Double2);
      assertNotSame(point2D_Double2, point2D_Double1);
      
      // Undeclared exception!
      try { 
        triangleFigure0.setBounds((Point2D.Double) null, point2D_Double2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TriangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH;
      TriangleFigure triangleFigure0 = new TriangleFigure((-1608.38913114), (-3065.678226116), 0.0, (-3065.678226116), attributeKeys_Orientation0);
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertNotNull(triangleFigure0);
      
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isConnectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isSelectable());
      assertNotNull(triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure1.getDrawingArea();
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isConnectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isSelectable());
      assertEquals((-1608.38913114), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-1610.88913114), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-1605.88913114), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-6128.856452232), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-4598.517339174), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-3068.178226116), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-1610.88913114), rectangle2D_Double0.x, 0.01);
      assertEquals(5.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-3068.178226116), rectangle2D_Double0.y, 0.01);
      assertEquals((-3060.678226116), rectangle2D_Double0.height, 0.01);
      assertNotNull(rectangle2D_Double0);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH;
      TriangleFigure triangleFigure0 = new TriangleFigure((-3456.3132), 0.0, (-3456.3132), 0.0, attributeKeys_Orientation0);
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertNotNull(triangleFigure0);
      
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getDrawingArea();
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertEquals((-3458.8132), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(2.5, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-2.5), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-6910.1264), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-5184.4698), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(5.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-3451.3132), rectangle2D_Double0.width, 0.01);
      assertEquals((-2.5), rectangle2D_Double0.y, 0.01);
      assertEquals((-3458.8132), rectangle2D_Double0.x, 0.01);
      assertNotNull(rectangle2D_Double0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(1928.534004, 1928.534004, 0.0, 1.0, attributeKeys_Orientation0);
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertNotNull(triangleFigure0);
      
      FigureEvent figureEvent0 = new FigureEvent(triangleFigure0, (Rectangle2D.Double) null);
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertNotNull(figureEvent0);
      
      triangleFigure0.fireFigureChanged(figureEvent0);
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getDrawingArea();
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertEquals(1926.034004, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1929.034004, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1926.034004, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1928.534004, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1932.034004, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1931.034004, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1926.034004, rectangle2D_Double0.x, 0.01);
      assertEquals(1926.034004, rectangle2D_Double0.y, 0.01);
      assertEquals(5.0, rectangle2D_Double0.width, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(2.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      triangleFigure0.fireAttributeChanged((AttributeKey<Double>) null, double0, double1);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertFalse(bezierPath0.isEmpty());
      assertTrue(bezierPath0.isClosed());
      assertEquals(0, bezierPath0.getWindingRule());
      assertEquals(3, bezierPath0.size());
      assertEquals(3, BezierPath.C1C2_MASK);
      assertEquals(0, BezierPath.C0_MASK);
      assertEquals(2, BezierPath.C2_MASK);
      assertEquals(1, BezierPath.C1_MASK);
      assertNotNull(bezierPath0);
      
      AffineTransform affineTransform0 = new AffineTransform();
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertNotNull(affineTransform0);
      
      triangleFigure0.transform(affineTransform0);
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      
      Point2D.Double point2D_Double0 = triangleFigure0.getEndPoint();
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertEquals(1928.634004, point2D_Double0.x, 0.01);
      assertEquals(1929.534004, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      boolean boolean0 = triangleFigure0.contains(point2D_Double0);
      assertTrue(boolean0);
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertEquals(1928.634004, point2D_Double0.x, 0.01);
      assertEquals(1929.534004, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(2220.8612, (-1354.95), (-1354.95), 2220.8612, attributeKeys_Orientation0);
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(triangleFigure0);
      
      RelativeDecoratorLocator relativeDecoratorLocator0 = new RelativeDecoratorLocator(2220.8612, 1070.2449);
      assertNotNull(relativeDecoratorLocator0);
      
      Point2D.Double point2D_Double0 = relativeDecoratorLocator0.locate((Figure) triangleFigure0);
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals((-3006935.0217399998), point2D_Double0.x, 0.01);
      assertEquals(2375510.4229078796, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      triangleFigure0.setBounds(point2D_Double0, point2D_Double0);
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals((-3006935.0217399998), point2D_Double0.x, 0.01);
      assertEquals(2375510.4229078796, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = (-1863.61543556);
      double double1 = (-1365.3076126353842);
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure((-1863.61543556), (-1863.61543556), (-1.0), (-1365.3076126353842), attributeKeys_Orientation0);
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertNotNull(triangleFigure0);
      
      FontSizeLocator fontSizeLocator0 = new FontSizeLocator();
      assertNotNull(fontSizeLocator0);
      
      Point2D.Double point2D_Double0 = fontSizeLocator0.locate((Figure) triangleFigure0, (Figure) triangleFigure0);
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertEquals((-1863.61543556), point2D_Double0.x, 0.01);
      assertEquals((-1851.61543556), point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      Point2D.Double point2D_Double1 = triangleFigure0.chop(point2D_Double0);
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertEquals((-1863.61543556), point2D_Double0.x, 0.01);
      assertEquals((-1851.61543556), point2D_Double0.y, 0.01);
      assertEquals((-1863.6230002356622), point2D_Double1.x, 0.01);
      assertEquals((-1862.124200546016), point2D_Double1.y, 0.01);
      assertNotNull(point2D_Double1);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      assertFalse(lineConnectionFigure0.isClosed());
      assertFalse(lineConnectionFigure0.isConnectable());
      assertTrue(lineConnectionFigure0.isSelectable());
      assertEquals(0, lineConnectionFigure0.getLayer());
      assertEquals(3.0, lineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(lineConnectionFigure0.isRemovable());
      assertTrue(lineConnectionFigure0.isVisible());
      assertNotNull(lineConnectionFigure0);
      
      boolean boolean0 = false;
      Point2D.Double point2D_Double2 = fontSizeLocator0.locate((Figure) triangleFigure0);
      assertTrue(point2D_Double2.equals((Object)point2D_Double0));
      assertFalse(point2D_Double2.equals((Object)point2D_Double1));
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertEquals((-1863.61543556), point2D_Double2.x, 0.01);
      assertEquals((-1851.61543556), point2D_Double2.y, 0.01);
      assertNotNull(point2D_Double2);
      assertNotSame(point2D_Double2, point2D_Double1);
      assertNotSame(point2D_Double2, point2D_Double0);
      
      triangleFigure0.setTransformable(false);
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      
      Point2D.Double point2D_Double3 = triangleFigure0.getEndPoint();
      assertFalse(point2D_Double3.equals((Object)point2D_Double0));
      assertFalse(point2D_Double3.equals((Object)point2D_Double2));
      assertFalse(point2D_Double3.equals((Object)point2D_Double1));
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertEquals((-3228.923048195384), point2D_Double3.y, 0.01);
      assertEquals((-1864.61543556), point2D_Double3.x, 0.01);
      assertNotNull(point2D_Double3);
      assertNotSame(point2D_Double3, point2D_Double0);
      assertNotSame(point2D_Double3, point2D_Double2);
      assertNotSame(point2D_Double3, point2D_Double1);
      
      lineConnectionFigure0.setStartPoint(point2D_Double3);
      assertFalse(point2D_Double3.equals((Object)point2D_Double0));
      assertFalse(point2D_Double3.equals((Object)point2D_Double2));
      assertFalse(point2D_Double3.equals((Object)point2D_Double1));
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertFalse(lineConnectionFigure0.isClosed());
      assertFalse(lineConnectionFigure0.isConnectable());
      assertTrue(lineConnectionFigure0.isSelectable());
      assertEquals(0, lineConnectionFigure0.getLayer());
      assertEquals(3.0, lineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(lineConnectionFigure0.isRemovable());
      assertTrue(lineConnectionFigure0.isVisible());
      assertEquals((-3228.923048195384), point2D_Double3.y, 0.01);
      assertEquals((-1864.61543556), point2D_Double3.x, 0.01);
      assertNotSame(point2D_Double3, point2D_Double0);
      assertNotSame(point2D_Double3, point2D_Double2);
      assertNotSame(point2D_Double3, point2D_Double1);
      
      ChopTriangleConnector chopTriangleConnector0 = (ChopTriangleConnector)triangleFigure0.findConnector(point2D_Double1, lineConnectionFigure0);
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertTrue(point2D_Double0.equals((Object)point2D_Double2));
      assertFalse(point2D_Double0.equals((Object)point2D_Double3));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertFalse(point2D_Double1.equals((Object)point2D_Double3));
      assertFalse(point2D_Double1.equals((Object)point2D_Double2));
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertFalse(lineConnectionFigure0.isClosed());
      assertFalse(lineConnectionFigure0.isConnectable());
      assertTrue(lineConnectionFigure0.isSelectable());
      assertEquals(0, lineConnectionFigure0.getLayer());
      assertEquals(3.0, lineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(lineConnectionFigure0.isRemovable());
      assertTrue(lineConnectionFigure0.isVisible());
      assertFalse(chopTriangleConnector0.isConnectToDecorator());
      assertEquals((-1863.61543556), point2D_Double0.x, 0.01);
      assertEquals((-1851.61543556), point2D_Double0.y, 0.01);
      assertEquals((-1863.6230002356622), point2D_Double1.x, 0.01);
      assertEquals((-1862.124200546016), point2D_Double1.y, 0.01);
      assertNotNull(chopTriangleConnector0);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double0, point2D_Double2);
      assertNotSame(point2D_Double0, point2D_Double3);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertNotSame(point2D_Double1, point2D_Double3);
      assertNotSame(point2D_Double1, point2D_Double2);
      
      // Undeclared exception!
      try { 
        triangleFigure0.restoreTransformTo(point2D_Double1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.geom.Point2D$Double cannot be cast to java.awt.geom.Rectangle2D$Double
         //
         verifyException("org.jhotdraw.draw.figure.TriangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertNotNull(triangleFigure0);
      
      // Undeclared exception!
      try { 
        triangleFigure0.transform((AffineTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TriangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertNotNull(triangleFigure0);
      
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure1.isSelectable());
      assertTrue(triangleFigure1.isConnectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isVisible());
      assertNotNull(triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      
      ChopBezierConnector chopBezierConnector0 = new ChopBezierConnector();
      assertFalse(chopBezierConnector0.isConnectToDecorator());
      assertNotNull(chopBezierConnector0);
      
      ChopTriangleConnector chopTriangleConnector0 = (ChopTriangleConnector)triangleFigure0.findCompatibleConnector(chopBezierConnector0, false);
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertFalse(chopBezierConnector0.isConnectToDecorator());
      assertFalse(chopTriangleConnector0.isConnectToDecorator());
      assertNotNull(chopTriangleConnector0);
      assertNotSame(triangleFigure0, triangleFigure1);
      
      Hashtable<RenderingHints.Key, MoveHandle> hashtable0 = new Hashtable<RenderingHints.Key, MoveHandle>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, renderingHints0.size());
      assertTrue(renderingHints0.isEmpty());
      assertNotNull(renderingHints0);
      
      RescaleOp rescaleOp0 = new RescaleOp((-645.0F), (-645.0F), renderingHints0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, renderingHints0.size());
      assertTrue(renderingHints0.isEmpty());
      assertEquals(1, rescaleOp0.getNumFactors());
      assertNotNull(rescaleOp0);
      
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      assertEquals("png", imageOutputFormat0.getFileExtension());
      assertNotNull(imageOutputFormat0);
      
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      assertTrue(quadTreeDrawing0.isSelectable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertNotNull(quadTreeDrawing0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(510.0775502457, 0.0, 510.0775502457, (-1004.8));
      assertEquals(765.1163253685501, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-1004.8), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(510.0775502457, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-502.4), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1020.1551004914, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(510.0775502457, rectangle2D_Double0.x, 0.01);
      assertEquals((-1004.8), rectangle2D_Double0.height, 0.01);
      assertEquals(510.0775502457, rectangle2D_Double0.width, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      List<Figure> list0 = quadTreeDrawing0.findFigures(rectangle2D_Double0);
      assertTrue(quadTreeDrawing0.isSelectable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(765.1163253685501, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-1004.8), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(510.0775502457, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-502.4), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1020.1551004914, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(510.0775502457, rectangle2D_Double0.x, 0.01);
      assertEquals((-1004.8), rectangle2D_Double0.height, 0.01);
      assertEquals(510.0775502457, rectangle2D_Double0.width, 0.01);
      assertNotNull(list0);
      
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) quadTreeDrawing0, list0, 0.0, false);
      assertEquals("png", imageOutputFormat0.getFileExtension());
      assertTrue(quadTreeDrawing0.isSelectable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(765.1163253685501, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-1004.8), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(510.0775502457, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-502.4), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1020.1551004914, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(510.0775502457, rectangle2D_Double0.x, 0.01);
      assertEquals((-1004.8), rectangle2D_Double0.height, 0.01);
      assertEquals(510.0775502457, rectangle2D_Double0.width, 0.01);
      assertNotNull(bufferedImage0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 724;
      PixelGrabber pixelGrabber0 = new PixelGrabber(bufferedImage0, (-2), 724, (-2), (-2), intArray0, 2577, 44);
      assertArrayEquals(new int[] {724}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("png", imageOutputFormat0.getFileExtension());
      assertTrue(quadTreeDrawing0.isSelectable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(765.1163253685501, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-1004.8), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(510.0775502457, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-502.4), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1020.1551004914, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, pixelGrabber0.getStatus());
      assertEquals((-1), pixelGrabber0.getHeight());
      assertEquals((-1), pixelGrabber0.getWidth());
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(510.0775502457, rectangle2D_Double0.x, 0.01);
      assertEquals((-1004.8), rectangle2D_Double0.height, 0.01);
      assertEquals(510.0775502457, rectangle2D_Double0.width, 0.01);
      assertNotNull(pixelGrabber0);
      
      DirectColorModel directColorModel0 = (DirectColorModel)pixelGrabber0.getColorModel();
      assertArrayEquals(new int[] {724}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(16711680, directColorModel0.getRedMask());
      assertEquals(65280, directColorModel0.getGreenMask());
      assertEquals(3, directColorModel0.getNumColorComponents());
      assertEquals((-16777216), directColorModel0.getAlphaMask());
      assertEquals(32, directColorModel0.getPixelSize());
      assertEquals(3, directColorModel0.getTransferType());
      assertEquals(3, directColorModel0.getTransparency());
      assertTrue(directColorModel0.hasAlpha());
      assertFalse(directColorModel0.isAlphaPremultiplied());
      assertEquals(255, directColorModel0.getBlueMask());
      assertEquals(4, directColorModel0.getNumComponents());
      assertEquals("png", imageOutputFormat0.getFileExtension());
      assertTrue(quadTreeDrawing0.isSelectable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(765.1163253685501, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-1004.8), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(510.0775502457, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-502.4), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1020.1551004914, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, pixelGrabber0.getStatus());
      assertEquals((-1), pixelGrabber0.getHeight());
      assertEquals((-1), pixelGrabber0.getWidth());
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(510.0775502457, rectangle2D_Double0.x, 0.01);
      assertEquals((-1004.8), rectangle2D_Double0.height, 0.01);
      assertEquals(510.0775502457, rectangle2D_Double0.width, 0.01);
      assertNotNull(directColorModel0);
      
      BufferedImage bufferedImage1 = rescaleOp0.createCompatibleDestImage(bufferedImage0, directColorModel0);
      assertFalse(bufferedImage1.equals((Object)bufferedImage0));
      assertArrayEquals(new int[] {724}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(16711680, directColorModel0.getRedMask());
      assertEquals(65280, directColorModel0.getGreenMask());
      assertEquals(3, directColorModel0.getNumColorComponents());
      assertEquals((-16777216), directColorModel0.getAlphaMask());
      assertEquals(32, directColorModel0.getPixelSize());
      assertEquals(3, directColorModel0.getTransferType());
      assertEquals(3, directColorModel0.getTransparency());
      assertTrue(directColorModel0.hasAlpha());
      assertFalse(directColorModel0.isAlphaPremultiplied());
      assertEquals(255, directColorModel0.getBlueMask());
      assertEquals(4, directColorModel0.getNumComponents());
      assertEquals(2, bufferedImage1.getType());
      assertEquals(1, bufferedImage1.getHeight());
      assertEquals(1, bufferedImage1.getTileWidth());
      assertEquals(0, bufferedImage1.getTileGridYOffset());
      assertEquals(3, bufferedImage1.getTransparency());
      assertEquals(1, bufferedImage1.getNumYTiles());
      assertEquals(0, bufferedImage1.getTileGridXOffset());
      assertEquals(1, bufferedImage1.getWidth());
      assertEquals(0, bufferedImage1.getMinTileX());
      assertEquals(1, bufferedImage1.getTileHeight());
      assertEquals(0, bufferedImage1.getMinTileY());
      assertFalse(bufferedImage1.isAlphaPremultiplied());
      assertEquals(0, bufferedImage1.getMinY());
      assertEquals(1, bufferedImage1.getNumXTiles());
      assertEquals(0, bufferedImage1.getMinX());
      assertEquals(0.5F, bufferedImage1.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage1.hasTileWriters());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, renderingHints0.size());
      assertTrue(renderingHints0.isEmpty());
      assertEquals(1, rescaleOp0.getNumFactors());
      assertEquals("png", imageOutputFormat0.getFileExtension());
      assertTrue(quadTreeDrawing0.isSelectable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(765.1163253685501, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-1004.8), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(510.0775502457, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-502.4), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1020.1551004914, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, pixelGrabber0.getStatus());
      assertEquals((-1), pixelGrabber0.getHeight());
      assertEquals((-1), pixelGrabber0.getWidth());
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(510.0775502457, rectangle2D_Double0.x, 0.01);
      assertEquals((-1004.8), rectangle2D_Double0.height, 0.01);
      assertEquals(510.0775502457, rectangle2D_Double0.width, 0.01);
      assertNotNull(bufferedImage1);
      assertNotSame(bufferedImage1, bufferedImage0);
      assertNotSame(bufferedImage0, bufferedImage1);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage1.createGraphics();
      assertFalse(bufferedImage0.equals((Object)bufferedImage1));
      assertFalse(bufferedImage1.equals((Object)bufferedImage0));
      assertArrayEquals(new int[] {724}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, renderingHints0.size());
      assertTrue(renderingHints0.isEmpty());
      assertEquals(1, rescaleOp0.getNumFactors());
      assertEquals("png", imageOutputFormat0.getFileExtension());
      assertTrue(quadTreeDrawing0.isSelectable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(765.1163253685501, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-1004.8), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(510.0775502457, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-502.4), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1020.1551004914, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, pixelGrabber0.getStatus());
      assertEquals((-1), pixelGrabber0.getHeight());
      assertEquals((-1), pixelGrabber0.getWidth());
      assertEquals(16711680, directColorModel0.getRedMask());
      assertEquals(65280, directColorModel0.getGreenMask());
      assertEquals(3, directColorModel0.getNumColorComponents());
      assertEquals((-16777216), directColorModel0.getAlphaMask());
      assertEquals(32, directColorModel0.getPixelSize());
      assertEquals(3, directColorModel0.getTransferType());
      assertEquals(3, directColorModel0.getTransparency());
      assertTrue(directColorModel0.hasAlpha());
      assertFalse(directColorModel0.isAlphaPremultiplied());
      assertEquals(255, directColorModel0.getBlueMask());
      assertEquals(4, directColorModel0.getNumComponents());
      assertEquals(2, bufferedImage1.getType());
      assertEquals(1, bufferedImage1.getHeight());
      assertEquals(1, bufferedImage1.getTileWidth());
      assertEquals(0, bufferedImage1.getTileGridYOffset());
      assertEquals(3, bufferedImage1.getTransparency());
      assertEquals(1, bufferedImage1.getNumYTiles());
      assertEquals(0, bufferedImage1.getTileGridXOffset());
      assertEquals(1, bufferedImage1.getWidth());
      assertEquals(0, bufferedImage1.getMinTileX());
      assertEquals(1, bufferedImage1.getTileHeight());
      assertEquals(0, bufferedImage1.getMinTileY());
      assertFalse(bufferedImage1.isAlphaPremultiplied());
      assertEquals(0, bufferedImage1.getMinY());
      assertEquals(1, bufferedImage1.getNumXTiles());
      assertEquals(0, bufferedImage1.getMinX());
      assertEquals(0.5F, bufferedImage1.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage1.hasTileWriters());
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(510.0775502457, rectangle2D_Double0.x, 0.01);
      assertEquals((-1004.8), rectangle2D_Double0.height, 0.01);
      assertEquals(510.0775502457, rectangle2D_Double0.width, 0.01);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertNotNull(sunGraphics2D0);
      assertNotSame(bufferedImage0, bufferedImage1);
      assertNotSame(bufferedImage1, bufferedImage0);
      
      triangleFigure1.drawStroke(sunGraphics2D0);
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertFalse(bufferedImage0.equals((Object)bufferedImage1));
      assertFalse(bufferedImage1.equals((Object)bufferedImage0));
      assertArrayEquals(new int[] {724}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure1.isSelectable());
      assertTrue(triangleFigure1.isConnectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, renderingHints0.size());
      assertTrue(renderingHints0.isEmpty());
      assertEquals(1, rescaleOp0.getNumFactors());
      assertEquals("png", imageOutputFormat0.getFileExtension());
      assertTrue(quadTreeDrawing0.isSelectable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(765.1163253685501, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-1004.8), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(510.0775502457, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-502.4), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1020.1551004914, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, pixelGrabber0.getStatus());
      assertEquals((-1), pixelGrabber0.getHeight());
      assertEquals((-1), pixelGrabber0.getWidth());
      assertEquals(16711680, directColorModel0.getRedMask());
      assertEquals(65280, directColorModel0.getGreenMask());
      assertEquals(3, directColorModel0.getNumColorComponents());
      assertEquals((-16777216), directColorModel0.getAlphaMask());
      assertEquals(32, directColorModel0.getPixelSize());
      assertEquals(3, directColorModel0.getTransferType());
      assertEquals(3, directColorModel0.getTransparency());
      assertTrue(directColorModel0.hasAlpha());
      assertFalse(directColorModel0.isAlphaPremultiplied());
      assertEquals(255, directColorModel0.getBlueMask());
      assertEquals(4, directColorModel0.getNumComponents());
      assertEquals(2, bufferedImage1.getType());
      assertEquals(1, bufferedImage1.getHeight());
      assertEquals(1, bufferedImage1.getTileWidth());
      assertEquals(0, bufferedImage1.getTileGridYOffset());
      assertEquals(3, bufferedImage1.getTransparency());
      assertEquals(1, bufferedImage1.getNumYTiles());
      assertEquals(0, bufferedImage1.getTileGridXOffset());
      assertEquals(1, bufferedImage1.getWidth());
      assertEquals(0, bufferedImage1.getMinTileX());
      assertEquals(1, bufferedImage1.getTileHeight());
      assertEquals(0, bufferedImage1.getMinTileY());
      assertFalse(bufferedImage1.isAlphaPremultiplied());
      assertEquals(0, bufferedImage1.getMinY());
      assertEquals(1, bufferedImage1.getNumXTiles());
      assertEquals(0, bufferedImage1.getMinX());
      assertEquals(0.5F, bufferedImage1.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage1.hasTileWriters());
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(510.0775502457, rectangle2D_Double0.x, 0.01);
      assertEquals((-1004.8), rectangle2D_Double0.height, 0.01);
      assertEquals(510.0775502457, rectangle2D_Double0.width, 0.01);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(bufferedImage0, bufferedImage1);
      assertNotSame(bufferedImage1, bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = 1274.2903407564277;
      TriangleFigure triangleFigure0 = new TriangleFigure(1274.2903407564277, 1274.2903407564277, 1.0, 1.0);
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertNotNull(triangleFigure0);
      
      Drawing drawing0 = triangleFigure0.getDrawing();
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertNull(drawing0);
      
      triangleFigure0.removeNotify((Drawing) null);
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      
      triangleFigure0.validate();
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getDrawingArea();
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(1274.7903407564277, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1277.7903407564277, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1274.7903407564277, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1271.7903407564277, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1277.7903407564277, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1271.7903407564277, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals(1271.7903407564277, rectangle2D_Double0.y, 0.01);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1271.7903407564277, rectangle2D_Double0.x, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Graphics2D graphics2D0 = null;
      // Undeclared exception!
      try { 
        triangleFigure0.drawStroke((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, 0.0, 0.0, attributeKeys_Orientation0);
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(triangleFigure0);
      
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(bezierPath0.isClosed());
      assertEquals(0, bezierPath0.getWindingRule());
      assertFalse(bezierPath0.isEmpty());
      assertEquals(3, bezierPath0.size());
      assertEquals(0, BezierPath.C0_MASK);
      assertEquals(2, BezierPath.C2_MASK);
      assertEquals(1, BezierPath.C1_MASK);
      assertEquals(3, BezierPath.C1C2_MASK);
      assertNotNull(bezierPath0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1127.64F;
      floatArray0[1] = (float) 2;
      Hashtable<RenderingHints.Key, BezierControlPointHandle> hashtable0 = new Hashtable<RenderingHints.Key, BezierControlPointHandle>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, renderingHints0.size());
      assertTrue(renderingHints0.isEmpty());
      assertNotNull(renderingHints0);
      
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      assertArrayEquals(new float[] {1127.64F, 2.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, renderingHints0.size());
      assertTrue(renderingHints0.isEmpty());
      assertEquals(2, rescaleOp0.getNumFactors());
      assertNotNull(rescaleOp0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 1.0, 0.0, 1.0, attributeKeys_Orientation0);
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertNotNull(triangleFigure0);
      
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertNotNull(triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure1.getBounds();
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertNotNull(rectangle2D_Double0);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      
      Collection<Handle> collection0 = triangleFigure1.createHandles(0);
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isConnectable());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isSelectable());
      assertNotNull(collection0);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure((-1622.284168), (-1622.284168), (-1622.284168), (-1622.284168));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(triangleFigure0);
      
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isSelectable());
      assertTrue(triangleFigure1.isConnectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertNotNull(triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      
      BezierPath bezierPath0 = triangleFigure1.getBezierPath();
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure1.isRemovable());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isSelectable());
      assertTrue(triangleFigure1.isConnectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertFalse(bezierPath0.isEmpty());
      assertTrue(bezierPath0.isClosed());
      assertEquals(0, bezierPath0.getWindingRule());
      assertEquals(3, bezierPath0.size());
      assertEquals(3, BezierPath.C1C2_MASK);
      assertEquals(2, BezierPath.C2_MASK);
      assertEquals(1, BezierPath.C1_MASK);
      assertEquals(0, BezierPath.C0_MASK);
      assertNotNull(bezierPath0);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure((-2964.0907197481), 0.0, 2867.58136, (-2964.0907197481), attributeKeys_Orientation0);
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(triangleFigure0);
      
      LabelFigure labelFigure0 = new LabelFigure();
      assertTrue(labelFigure0.isSelectable());
      assertEquals(4, labelFigure0.getTextColumns());
      assertFalse(labelFigure0.isEditable());
      assertEquals(12.0F, labelFigure0.getFontSize(), 0.01F);
      assertEquals(8, labelFigure0.getTabSize());
      assertEquals("Label", labelFigure0.getText());
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isConnectable());
      assertEquals(0, labelFigure0.getLayer());
      assertEquals(3.0, labelFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labelFigure0.isTextOverflow());
      assertTrue(labelFigure0.isVisible());
      assertNotNull(labelFigure0);
      
      Collection<Handle> collection0 = triangleFigure0.createHandles(7);
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(collection0);
      
      triangleFigure0.validate();
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      
      labelFigure0.fireFigureRequestRemove();
      assertTrue(labelFigure0.isSelectable());
      assertEquals(4, labelFigure0.getTextColumns());
      assertFalse(labelFigure0.isEditable());
      assertEquals(12.0F, labelFigure0.getFontSize(), 0.01F);
      assertEquals(8, labelFigure0.getTabSize());
      assertEquals("Label", labelFigure0.getText());
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isConnectable());
      assertEquals(0, labelFigure0.getLayer());
      assertEquals(3.0, labelFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labelFigure0.isTextOverflow());
      assertTrue(labelFigure0.isVisible());
      
      Point2D.Double point2D_Double0 = labelFigure0.origin;
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      
      Cursor cursor0 = labelFigure0.getCursor(point2D_Double0);
      assertTrue(labelFigure0.isSelectable());
      assertEquals(4, labelFigure0.getTextColumns());
      assertFalse(labelFigure0.isEditable());
      assertEquals(12.0F, labelFigure0.getFontSize(), 0.01F);
      assertEquals(8, labelFigure0.getTabSize());
      assertEquals("Label", labelFigure0.getText());
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isConnectable());
      assertEquals(0, labelFigure0.getLayer());
      assertEquals(3.0, labelFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labelFigure0.isTextOverflow());
      assertTrue(labelFigure0.isVisible());
      assertEquals("Hand Cursor", cursor0.getName());
      assertEquals(12, cursor0.getType());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(cursor0);
      
      point2D_Double0.y = 0.0;
      assertTrue(labelFigure0.isSelectable());
      assertEquals(4, labelFigure0.getTextColumns());
      assertFalse(labelFigure0.isEditable());
      assertEquals(12.0F, labelFigure0.getFontSize(), 0.01F);
      assertEquals(8, labelFigure0.getTabSize());
      assertEquals("Label", labelFigure0.getText());
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isConnectable());
      assertEquals(0, labelFigure0.getLayer());
      assertEquals(3.0, labelFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labelFigure0.isTextOverflow());
      assertTrue(labelFigure0.isVisible());
      
      point2D_Double0.y = 2867.58136;
      assertTrue(labelFigure0.isSelectable());
      assertEquals(4, labelFigure0.getTextColumns());
      assertFalse(labelFigure0.isEditable());
      assertEquals(12.0F, labelFigure0.getFontSize(), 0.01F);
      assertEquals(8, labelFigure0.getTabSize());
      assertEquals("Label", labelFigure0.getText());
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isConnectable());
      assertEquals(0, labelFigure0.getLayer());
      assertEquals(3.0, labelFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labelFigure0.isTextOverflow());
      assertTrue(labelFigure0.isVisible());
      
      point2D_Double0.x = 0.0;
      assertTrue(labelFigure0.isSelectable());
      assertEquals(4, labelFigure0.getTextColumns());
      assertFalse(labelFigure0.isEditable());
      assertEquals(12.0F, labelFigure0.getFontSize(), 0.01F);
      assertEquals(8, labelFigure0.getTabSize());
      assertEquals("Label", labelFigure0.getText());
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isConnectable());
      assertEquals(0, labelFigure0.getLayer());
      assertEquals(3.0, labelFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labelFigure0.isTextOverflow());
      assertTrue(labelFigure0.isVisible());
      
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertNotNull(labeledLineConnectionFigure0);
      
      ChopTriangleConnector chopTriangleConnector0 = (ChopTriangleConnector)triangleFigure0.findConnector(point2D_Double0, labeledLineConnectionFigure0);
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(labelFigure0.isSelectable());
      assertEquals(4, labelFigure0.getTextColumns());
      assertFalse(labelFigure0.isEditable());
      assertEquals(12.0F, labelFigure0.getFontSize(), 0.01F);
      assertEquals(8, labelFigure0.getTabSize());
      assertEquals("Label", labelFigure0.getText());
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isConnectable());
      assertEquals(0, labelFigure0.getLayer());
      assertEquals(3.0, labelFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labelFigure0.isTextOverflow());
      assertTrue(labelFigure0.isVisible());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertFalse(chopTriangleConnector0.isConnectToDecorator());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(2867.58136, point2D_Double0.y, 0.01);
      assertNotNull(chopTriangleConnector0);
      
      boolean boolean0 = triangleFigure0.contains(point2D_Double0);
      assertFalse(boolean0);
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(labelFigure0.isSelectable());
      assertEquals(4, labelFigure0.getTextColumns());
      assertFalse(labelFigure0.isEditable());
      assertEquals(12.0F, labelFigure0.getFontSize(), 0.01F);
      assertEquals(8, labelFigure0.getTabSize());
      assertEquals("Label", labelFigure0.getText());
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isConnectable());
      assertEquals(0, labelFigure0.getLayer());
      assertEquals(3.0, labelFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labelFigure0.isTextOverflow());
      assertTrue(labelFigure0.isVisible());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(2867.58136, point2D_Double0.y, 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getBounds();
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals((-1530.3000397481), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-2964.0907197481), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-96.5093597481), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1482.04535987405), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-2964.0907197481), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(2867.58136, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals((-2964.0907197481), rectangle2D_Double0.height, 0.01);
      assertEquals((-2964.0907197481), rectangle2D_Double0.x, 0.01);
      assertNotNull(rectangle2D_Double0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(0.1, 20.0, 20.0, (-5719.16));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(triangleFigure0);
      
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure1.isSelectable());
      assertTrue(triangleFigure1.isConnectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isRemovable());
      assertNotNull(triangleFigure1);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      
      BezierLabelLocator bezierLabelLocator0 = new BezierLabelLocator(0.0, 0.0, 0.0);
      assertNotNull(bezierLabelLocator0);
      
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertNotNull(labeledLineConnectionFigure0);
      
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      assertFalse(labeledLineConnectionFigure1.equals((Object)labeledLineConnectionFigure0));
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertTrue(labeledLineConnectionFigure1.isSelectable());
      assertFalse(labeledLineConnectionFigure1.isConnectable());
      assertFalse(labeledLineConnectionFigure1.isClosed());
      assertTrue(labeledLineConnectionFigure1.isRemovable());
      assertTrue(labeledLineConnectionFigure1.isVisible());
      assertEquals(0, labeledLineConnectionFigure1.getChildCount());
      assertEquals(0, labeledLineConnectionFigure1.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertNotNull(labeledLineConnectionFigure1);
      assertNotSame(labeledLineConnectionFigure0, labeledLineConnectionFigure1);
      assertNotSame(labeledLineConnectionFigure1, labeledLineConnectionFigure0);
      
      Point2D.Double point2D_Double0 = bezierLabelLocator0.getRelativeLabelPoint(labeledLineConnectionFigure1, triangleFigure0);
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(labeledLineConnectionFigure0.equals((Object)labeledLineConnectionFigure1));
      assertFalse(labeledLineConnectionFigure1.equals((Object)labeledLineConnectionFigure0));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertTrue(labeledLineConnectionFigure1.isSelectable());
      assertFalse(labeledLineConnectionFigure1.isConnectable());
      assertFalse(labeledLineConnectionFigure1.isClosed());
      assertTrue(labeledLineConnectionFigure1.isRemovable());
      assertTrue(labeledLineConnectionFigure1.isVisible());
      assertEquals(0, labeledLineConnectionFigure1.getChildCount());
      assertEquals(0, labeledLineConnectionFigure1.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(labeledLineConnectionFigure0, labeledLineConnectionFigure1);
      assertNotSame(labeledLineConnectionFigure1, labeledLineConnectionFigure0);
      
      ChopTriangleConnector chopTriangleConnector0 = (ChopTriangleConnector)triangleFigure1.findConnector(point2D_Double0, labeledLineConnectionFigure1);
      assertFalse(triangleFigure0.equals((Object)triangleFigure1));
      assertFalse(triangleFigure1.equals((Object)triangleFigure0));
      assertFalse(labeledLineConnectionFigure0.equals((Object)labeledLineConnectionFigure1));
      assertFalse(labeledLineConnectionFigure1.equals((Object)labeledLineConnectionFigure0));
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure1.isSelectable());
      assertTrue(triangleFigure1.isConnectable());
      assertEquals(3.0, triangleFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure1.getLayer());
      assertTrue(triangleFigure1.isVisible());
      assertTrue(triangleFigure1.isRemovable());
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertTrue(labeledLineConnectionFigure1.isSelectable());
      assertFalse(labeledLineConnectionFigure1.isConnectable());
      assertFalse(labeledLineConnectionFigure1.isClosed());
      assertTrue(labeledLineConnectionFigure1.isRemovable());
      assertTrue(labeledLineConnectionFigure1.isVisible());
      assertEquals(0, labeledLineConnectionFigure1.getChildCount());
      assertEquals(0, labeledLineConnectionFigure1.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(chopTriangleConnector0.isConnectToDecorator());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(chopTriangleConnector0);
      assertNotSame(triangleFigure0, triangleFigure1);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertNotSame(labeledLineConnectionFigure0, labeledLineConnectionFigure1);
      assertNotSame(labeledLineConnectionFigure1, labeledLineConnectionFigure0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, 0.0, (-2131.470315760761), attributeKeys_Orientation0);
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(triangleFigure0);
      
      CloseHandle closeHandle0 = new CloseHandle(triangleFigure0);
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(closeHandle0);
      
      triangleFigure0.removeFigureListener(closeHandle0);
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isSelectable());
      
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isSelectable());
      assertEquals(3, bezierPath0.size());
      assertFalse(bezierPath0.isEmpty());
      assertTrue(bezierPath0.isClosed());
      assertEquals(0, bezierPath0.getWindingRule());
      assertEquals(1, BezierPath.C1_MASK);
      assertEquals(0, BezierPath.C0_MASK);
      assertEquals(2, BezierPath.C2_MASK);
      assertEquals(3, BezierPath.C1C2_MASK);
      assertNotNull(bezierPath0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertNotNull(triangleFigure0);
      
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(bezierPath0.isClosed());
      assertFalse(bezierPath0.isEmpty());
      assertEquals(3, bezierPath0.size());
      assertEquals(0, bezierPath0.getWindingRule());
      assertEquals(2, BezierPath.C2_MASK);
      assertEquals(0, BezierPath.C0_MASK);
      assertEquals(1, BezierPath.C1_MASK);
      assertEquals(3, BezierPath.C1C2_MASK);
      assertNotNull(bezierPath0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertNotNull(triangleFigure0);
      
      Point2D.Double point2D_Double0 = triangleFigure0.getStartPoint();
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      Point2D.Double point2D_Double1 = (Point2D.Double)point2D_Double0.clone();
      assertTrue(point2D_Double1.equals((Object)point2D_Double0));
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double1.y, 0.01);
      assertEquals(0.0, point2D_Double1.x, 0.01);
      assertNotNull(point2D_Double1);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getBounds();
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Point2D.Double point2D_Double2 = triangleFigure0.chop(point2D_Double0);
      assertTrue(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double2.equals((Object)point2D_Double1));
      assertFalse(point2D_Double2.equals((Object)point2D_Double0));
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals((-1.0), point2D_Double2.y, 0.01);
      assertEquals((-1.0), point2D_Double2.x, 0.01);
      assertNotNull(point2D_Double2);
      assertNotSame(point2D_Double0, point2D_Double2);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double2, point2D_Double1);
      assertNotSame(point2D_Double2, point2D_Double0);
      
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertFalse(bezierPath0.isEmpty());
      assertTrue(bezierPath0.isClosed());
      assertEquals(3, bezierPath0.size());
      assertEquals(0, bezierPath0.getWindingRule());
      assertEquals(3, BezierPath.C1C2_MASK);
      assertEquals(0, BezierPath.C0_MASK);
      assertEquals(2, BezierPath.C2_MASK);
      assertEquals(1, BezierPath.C1_MASK);
      assertNotNull(bezierPath0);
      
      Point2D.Double point2D_Double3 = new Point2D.Double(0.0, 2);
      assertFalse(point2D_Double3.equals((Object)point2D_Double1));
      assertFalse(point2D_Double3.equals((Object)point2D_Double0));
      assertFalse(point2D_Double3.equals((Object)point2D_Double2));
      assertEquals(0.0, point2D_Double3.x, 0.01);
      assertEquals(2.0, point2D_Double3.y, 0.01);
      assertNotNull(point2D_Double3);
      
      Point2D.Double point2D_Double4 = triangleFigure0.chop(point2D_Double3);
      assertFalse(point2D_Double3.equals((Object)point2D_Double1));
      assertFalse(point2D_Double3.equals((Object)point2D_Double0));
      assertFalse(point2D_Double3.equals((Object)point2D_Double2));
      assertTrue(point2D_Double4.equals((Object)point2D_Double2));
      assertFalse(point2D_Double4.equals((Object)point2D_Double3));
      assertFalse(point2D_Double4.equals((Object)point2D_Double0));
      assertFalse(point2D_Double4.equals((Object)point2D_Double1));
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(0.0, point2D_Double3.x, 0.01);
      assertEquals(2.0, point2D_Double3.y, 0.01);
      assertEquals((-1.0), point2D_Double4.y, 0.01);
      assertEquals((-1.0), point2D_Double4.x, 0.01);
      assertNotNull(point2D_Double4);
      assertNotSame(point2D_Double3, point2D_Double1);
      assertNotSame(point2D_Double3, point2D_Double4);
      assertNotSame(point2D_Double3, point2D_Double0);
      assertNotSame(point2D_Double3, point2D_Double2);
      assertNotSame(point2D_Double4, point2D_Double3);
      assertNotSame(point2D_Double4, point2D_Double2);
      assertNotSame(point2D_Double4, point2D_Double0);
      assertNotSame(point2D_Double4, point2D_Double1);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)triangleFigure0.getTransformRestoreData();
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertNotNull(rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      
      Rectangle2D.Double rectangle2D_Double2 = triangleFigure0.getDrawingArea();
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertFalse(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertEquals(0.0, rectangle2D_Double2.getCenterX(), 0.01);
      assertEquals((-2.5), rectangle2D_Double2.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double2.getCenterY(), 0.01);
      assertEquals(2.5, rectangle2D_Double2.getMaxX(), 0.01);
      assertEquals((-2.5), rectangle2D_Double2.getMinX(), 0.01);
      assertEquals(2.5, rectangle2D_Double2.getMaxY(), 0.01);
      assertEquals(5.0, rectangle2D_Double2.width, 0.01);
      assertEquals(5.0, rectangle2D_Double2.height, 0.01);
      assertEquals((-2.5), rectangle2D_Double2.y, 0.01);
      assertEquals((-2.5), rectangle2D_Double2.x, 0.01);
      assertNotNull(rectangle2D_Double2);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isSelectable());
      assertTrue(defaultDrawing0.isConnectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertNotNull(defaultDrawing0);
      
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertNotNull(labeledLineConnectionFigure0);
      
      // Undeclared exception!
      try { 
        defaultDrawing0.removeChild(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Point2D.Double point2D_Double0 = defaultDrawing0.getStartPoint();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      Point2D.Double point2D_Double1 = labeledLineConnectionFigure1.getPointOnPath(1.0F, 0.0);
      point2D_Double0.setLocation((Point2D) point2D_Double1);
      LineFigure lineFigure0 = new LineFigure();
      BezierPath bezierPath0 = lineFigure0.getCappedPath();
      Point2D.Double point2D_Double2 = bezierPath0.getCenter();
      point2D_Double0.setLocation((Point2D) point2D_Double2);
      point2D_Double0.setLocation(0.5, 0.5);
      Point2D.Double point2D_Double3 = triangleFigure0.chop(point2D_Double0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getDrawingArea();
      assertEquals((-2.5), rectangle2D_Double0.y, 0.01);
      assertEquals(5.0, rectangle2D_Double0.width, 0.01);
      
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      LineConnectionFigure lineConnectionFigure1 = lineConnectionFigure0.clone();
      Connector connector0 = triangleFigure1.findConnector(point2D_Double2, lineConnectionFigure1);
      triangleFigure1.findCompatibleConnector(connector0, false);
      assertFalse(point2D_Double2.equals((Object)point2D_Double3));
      assertNotSame(triangleFigure1, triangleFigure0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      triangleFigure0.setTransformable(false);
      triangleFigure0.getAttributesRestoreData();
      TriangleFigure triangleFigure1 = new TriangleFigure(attributeKeys_Orientation0);
      triangleFigure0.getBezierPath();
      triangleFigure1.getBounds();
      Point2D.Double point2D_Double0 = triangleFigure1.getEndPoint();
      triangleFigure1.chop(point2D_Double0);
      TriangleFigure triangleFigure2 = triangleFigure0.clone();
      triangleFigure1.getTransformRestoreData();
      triangleFigure2.chop(point2D_Double0);
      AffineTransform.getRotateInstance((-1.0));
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      DefaultDrawingView defaultDrawingView0 = new DefaultDrawingView();
      Point point0 = new Point(1073676288, 1073676288);
      Point point1 = new Point(point0);
      Point2D.Double point2D_Double0 = defaultDrawingView0.viewToDrawing(point1);
      point2D_Double0.setLocation((double) 1073676288, (double) 1073676288);
      point2D_Double0.x = 1481.417245;
      point1.x = 5;
      triangleFigure0.contains(point2D_Double0);
      triangleFigure0.chop(point2D_Double0);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(0.0, 2519.69832);
      triangleFigure0.transform(affineTransform0);
      triangleFigure0.createHandles((-3744));
      StickyRectangleConnector stickyRectangleConnector0 = new StickyRectangleConnector(triangleFigure0);
      DefaultDOMFactory defaultDOMFactory0 = new DefaultDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(defaultDOMFactory0);
      // Undeclared exception!
      try { 
        stickyRectangleConnector0.write(javaxDOMOutput0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Storable name not known to factory: org.jhotdraw.draw.figure.TriangleFigure
         //
         verifyException("org.jhotdraw.xml.DefaultDOMFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, 0.0, 18.0);
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      BezierFigure bezierFigure0 = lineConnectionFigure0.clone();
      Rectangle2D.Double rectangle2D_Double0 = bezierFigure0.getBounds();
      FigureEvent figureEvent0 = new FigureEvent(triangleFigure0, rectangle2D_Double0);
      triangleFigure0.fireFigureChanged(figureEvent0);
      LineConnectionFigure lineConnectionFigure1 = new LineConnectionFigure();
      LineConnectionFigure lineConnectionFigure2 = lineConnectionFigure1.clone();
      Point2D.Double point2D_Double0 = lineConnectionFigure2.getEndPoint();
      point2D_Double0.y = 0.0;
      point2D_Double0.y = 0.0;
      point2D_Double0.clone();
      point2D_Double0.y = 1189.0685736313;
      triangleFigure0.contains(point2D_Double0);
      Point2D.Double point2D_Double1 = triangleFigure0.chop(point2D_Double0);
      triangleFigure0.getDrawingArea();
      Point2D.Double point2D_Double2 = triangleFigure0.chop(point2D_Double1);
      point2D_Double2.clone();
      triangleFigure0.contains(point2D_Double2);
      triangleFigure0.getBounds();
      triangleFigure0.getBounds();
      Connector connector0 = triangleFigure0.findCompatibleConnector((Connector) null, false);
      point2D_Double2.x = 811.4072;
      triangleFigure0.createHandles(2353);
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      ConnectorHandle connectorHandle0 = new ConnectorHandle(connector0, lineConnectionFigure1);
      Point2D.Double point2D_Double3 = connectorHandle0.getLocationOnDrawing();
      point2D_Double3.setLocation((Point2D) point2D_Double0);
      triangleFigure1.setBounds(point2D_Double3, point2D_Double1);
      triangleFigure1.findCompatibleConnector(connector0, false);
      ChopTriangleConnector chopTriangleConnector0 = (ChopTriangleConnector)triangleFigure0.findCompatibleConnector((Connector) null, false);
      assertFalse(chopTriangleConnector0.isConnectToDecorator());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      Point2D.Double point2D_Double0 = triangleFigure0.getStartPoint();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      point2D_Double0.setLocation((-1879.23172024), (-1879.23172024));
      point2D_Double0.x = (-1879.23172024);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      triangleFigure0.findConnector(point2D_Double0, labeledLineConnectionFigure0);
      triangleFigure0.setBounds(point2D_Double0, point2D_Double0);
      triangleFigure0.createHandles(0);
      RectangleFigure rectangleFigure0 = new RectangleFigure(245, (-1879.23172024), 2429.203860843, 2817.04423732824);
      rectangleFigure0.fireFigureRemoved();
      Rectangle2D.Double rectangle2D_Double0 = rectangleFigure0.getBounds();
      labeledLineConnectionFigure0.fireAreaInvalidated(rectangle2D_Double0);
      triangleFigure0.createHandles(245);
      triangleFigure0.getBezierPath();
      Graphics2D graphics2D0 = null;
      // Undeclared exception!
      try { 
        triangleFigure0.drawFill((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      Point2D.Double point2D_Double0 = triangleFigure0.getEndPoint();
      triangleFigure0.chop(point2D_Double0);
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat("xqu$<*4.\"T`2HX(9g", "xqu$<*4.\"T`2HX(9g", "==)Wl>k`oxW<^{", 61);
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      DefaultDrawing defaultDrawing1 = new DefaultDrawing();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      List<Figure> list0 = quadTreeDrawing0.findFiguresWithin(rectangle2D_Double0);
      defaultDrawing0.getChildrenFrontToBack();
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) defaultDrawing1, list0, 0.0, false);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      triangleFigure0.drawFill(graphics2D0);
      triangleFigure0.drawStroke(graphics2D0);
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      TriangleFigure triangleFigure2 = triangleFigure0.clone();
      triangleFigure2.contains(point2D_Double0);
      ChopEllipseConnector chopEllipseConnector0 = new ChopEllipseConnector();
      triangleFigure2.findCompatibleConnector(chopEllipseConnector0, false);
      LabelFigure labelFigure0 = new LabelFigure("");
      TextHolderFigure textHolderFigure0 = labelFigure0.getLabelFor();
      Locator locator0 = RelativeLocator.east(false);
      FontSizeHandle fontSizeHandle0 = new FontSizeHandle(textHolderFigure0, locator0);
      // Undeclared exception!
      try { 
        triangleFigure1.restoreTransformTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TriangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure1.getDrawingArea();
      assertEquals((-2.5), rectangle2D_Double0.x, 0.01);
      assertEquals(5.0, rectangle2D_Double0.height, 0.01);
      assertNotSame(triangleFigure1, triangleFigure0);
      assertEquals(5.0, rectangle2D_Double0.width, 0.01);
      
      triangleFigure1.getBezierPath();
      assertNotSame(triangleFigure1, triangleFigure0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(275.36716792, 275.36716792, 3.14, 1.0E-4, attributeKeys_Orientation0);
      StateEditable stateEditable0 = mock(StateEditable.class, new ViolatedAssumptionAnswer());
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Point2D.Double point2D_Double0 = defaultDrawing0.getEndPoint();
      triangleFigure0.getActions(point2D_Double0);
      StateEdit stateEdit0 = new StateEdit(stateEditable0, "");
      triangleFigure0.fireUndoableEditHappened(stateEdit0);
      triangleFigure0.getBezierPath();
      triangleFigure0.getTransformRestoreData();
      // Undeclared exception!
      try { 
        triangleFigure0.restoreTransformTo(stateEdit0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.undo.StateEdit cannot be cast to java.awt.geom.Rectangle2D$Double
         //
         verifyException("org.jhotdraw.draw.figure.TriangleFigure", e);
      }
  }
}
