/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 12 15:13:27 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Collection;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.draw.AttributeKeys;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.Drawing;
import org.jhotdraw.draw.QuadTreeDrawing;
import org.jhotdraw.draw.connector.ChopTriangleConnector;
import org.jhotdraw.draw.connector.Connector;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.figure.LineFigure;
import org.jhotdraw.draw.figure.TriangleFigure;
import org.jhotdraw.draw.handle.Handle;
import org.jhotdraw.draw.io.ImageOutputFormat;
import org.jhotdraw.geom.BezierPath;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TriangleFigure_ESTest extends TriangleFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, (-0.017453292519943295), 2.0, 1199.969666, attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertEquals(3, bezierPath0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 3.0, 3.0, 3.0);
      Collection<Handle> collection0 = triangleFigure0.createHandles((-2442));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(12.0, 1.0E-4, 1055.0176431539, 0.5, attributeKeys_Orientation0);
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat("-)^UP2:yB?^BU8xrq6", "liner", "liner", 19);
      Vector<Figure> vector0 = new Vector<Figure>();
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) defaultDrawing0, (List<Figure>) vector0, 0.0, false);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      triangleFigure0.drawStroke(sunGraphics2D0);
      assertEquals(1, sunGraphics2D0.antialiasHint);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(3.0, 3.0, 3.0, 3.0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getDrawingArea();
      assertEquals(8.5, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(8.5, rectangle2D_Double0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure((-672.84262357), (-672.84262357), (-672.84262357), 1.5, attributeKeys_Orientation0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getDrawingArea();
      assertEquals((-1343.18524714), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-668.84262357), rectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(0.0, 0.0);
      triangleFigure0.transform(affineTransform0);
      affineTransform0.setToRotation(1329.3973);
      triangleFigure0.transform(affineTransform0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getBounds();
      assertEquals((-0.06792178155774414), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-0.03932589935511145), rectangle2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH;
      TriangleFigure triangleFigure0 = new TriangleFigure((-2329.9), 0.39269908169872414, (-2329.9), (-2329.9), attributeKeys_Orientation0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getBounds();
      assertEquals((-4659.8), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-1164.5573009183013), rectangle2D_Double0.getCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH;
      TriangleFigure triangleFigure0 = new TriangleFigure(1877.817006100826, 1877.817006100826, 1877.817006100826, 1877.817006100826, attributeKeys_Orientation0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getBounds();
      assertEquals(2816.725509151239, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(2816.725509151239, rectangle2D_Double0.getCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, 0.0, 0.0);
      Point2D.Double point2D_Double0 = new Point2D.Double(20.0, 3);
      triangleFigure0.setBounds(point2D_Double0, point2D_Double0);
      boolean boolean0 = triangleFigure0.contains(point2D_Double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, 252.08494330223, 252.08494330223);
      triangleFigure0.setVisible(false);
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertNotSame(triangleFigure1, triangleFigure0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      triangleFigure0.setSelectable(false);
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertNotSame(triangleFigure1, triangleFigure0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure((-52.9947978091), (-2190.5884783429156), 13.58, (-52.9947978091));
      triangleFigure0.setRemovable(false);
      TriangleFigure triangleFigure1 = triangleFigure0.clone();
      assertNotSame(triangleFigure1, triangleFigure0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      // Undeclared exception!
      try { 
        triangleFigure0.transform((AffineTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TriangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure((-2226.1766002021777), (-3184.0040307822), (-3184.0040307822), (-157.26089046246906), attributeKeys_Orientation0);
      // Undeclared exception!
      try { 
        triangleFigure0.restoreTransformTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TriangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure((-2892.212309), 2.0, 647.440476332, 2.0, attributeKeys_Orientation0);
      // Undeclared exception!
      try { 
        triangleFigure0.restoreTransformTo(attributeKeys_Orientation0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jhotdraw.draw.AttributeKeys$Orientation cannot be cast to java.awt.geom.Rectangle2D$Double
         //
         verifyException("org.jhotdraw.draw.figure.TriangleFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      // Undeclared exception!
      try { 
        triangleFigure0.drawFill((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure((-615.36410721018), (-615.36410721018), (-615.36410721018), 1506.0, attributeKeys_Orientation0);
      // Undeclared exception!
      try { 
        triangleFigure0.contains((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Path2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.WEST;
      TriangleFigure triangleFigure1 = new TriangleFigure(0.0, 69.8737258003281, 69.8737258003281, 2.0, attributeKeys_Orientation0);
      Object object0 = triangleFigure1.getTransformRestoreData();
      triangleFigure0.restoreTransformTo(object0);
      // Undeclared exception!
      try { 
        triangleFigure0.chop((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.geom.Geom", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TriangleFigure triangleFigure0 = null;
      try {
        triangleFigure0 = new TriangleFigure((AttributeKeys.Orientation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null value not allowed for AttributeKey orientation
         //
         verifyException("org.jhotdraw.draw.AttributeKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertEquals(0, BezierPath.C0_MASK);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertFalse(bezierPath0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure((-1.0), 0.0, 1629.50814, (-1.0), attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertEquals(0, BezierPath.C0_MASK);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertEquals(3, BezierPath.C1C2_MASK);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 180.0, 0.0, 0.0, attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertTrue(bezierPath0.isClosed());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getBounds();
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, 0.0, 0.0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getDrawingArea();
      assertEquals((-2.5), rectangle2D_Double0.y, 0.01);
      assertEquals(5.0, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      Point2D.Double point2D_Double0 = new Point2D.Double((-3197.43153), 0.0);
      boolean boolean0 = triangleFigure0.contains(point2D_Double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertTrue(bezierPath0.isClosed());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(12.0, 1.0E-4, 1055.0176431539, 12.0, attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      assertEquals(2, BezierPath.C2_MASK);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      LineFigure lineFigure0 = new LineFigure();
      Point2D.Double point2D_Double0 = lineFigure0.getEndPoint();
      Point2D.Double point2D_Double1 = triangleFigure0.chop(point2D_Double0);
      assertEquals((-1.0), point2D_Double1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, 0.0, 0.0);
      Collection<Handle> collection0 = triangleFigure0.createHandles(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      Collection<Handle> collection0 = triangleFigure0.createHandles(1480);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.SOUTH;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      List<Figure> list0 = quadTreeDrawing0.getFiguresFrontToBack();
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) defaultDrawing0, list0, 999.12, true);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      triangleFigure0.drawFill(sunGraphics2D0);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      // Undeclared exception!
      try { 
        triangleFigure0.drawStroke((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKeys", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Point2D.Double point2D_Double0 = labeledLineConnectionFigure0.getPoint(0);
      Connector connector0 = triangleFigure0.findConnector(point2D_Double0, labeledLineConnectionFigure0);
      ChopTriangleConnector chopTriangleConnector0 = (ChopTriangleConnector)triangleFigure0.findCompatibleConnector(connector0, true);
      assertFalse(chopTriangleConnector0.isConnectToDecorator());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      Point2D.Double point2D_Double0 = triangleFigure0.chop((Point2D.Double) null);
      // Undeclared exception!
      try { 
        triangleFigure0.setBounds(point2D_Double0, (Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TriangleFigure", e);
      }
  }
}
