/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 12 16:32:40 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.font.TextLayout;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.Drawing;
import org.jhotdraw.draw.QuadTreeDrawing;
import org.jhotdraw.draw.figure.BezierFigure;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.LabelFigure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.figure.LineConnectionFigure;
import org.jhotdraw.draw.figure.TextFigure;
import org.jhotdraw.draw.figure.TextHolderFigure;
import org.jhotdraw.draw.handle.CloseHandle;
import org.jhotdraw.draw.handle.NullHandle;
import org.jhotdraw.draw.io.ImageOutputFormat;
import org.jhotdraw.draw.locator.BezierLabelLocator;
import org.jhotdraw.draw.locator.FontSizeLocator;
import org.jhotdraw.draw.locator.Locator;
import org.jhotdraw.draw.locator.RelativeDecoratorLocator;
import org.jhotdraw.draw.locator.RelativeLocator;
import org.jhotdraw.draw.tool.TextEditingTool;
import org.jhotdraw.draw.tool.Tool;
import org.jhotdraw.geom.Dimension2DDouble;
import org.jhotdraw.xml.DOMInput;
import org.jhotdraw.xml.DefaultDOMFactory;
import org.jhotdraw.xml.JavaxDOMOutput;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextFigure_ESTest extends TextFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("Ne6M`C&_+!rqr=39QD");
      Point2D.Double point2D_Double0 = textFigure0.getEndPoint();
      assertEquals(14.583984375, point2D_Double0.y, 0.01);
      assertEquals(142.25390625, point2D_Double0.x, 0.01);
      
      textFigure0.origin = point2D_Double0;
      double double0 = textFigure0.getBaseline();
      assertEquals(12.064453125, double0, 0.01);
      assertTrue(textFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Point2D.Double point2D_Double0 = labeledLineConnectionFigure0.getStartPoint();
      textFigure0.setBounds(point2D_Double0, point2D_Double0);
      assertEquals("Text", textFigure0.getText());
      assertTrue(textFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat("=oF6MIm}0:", "uAT:3", "uAT:3", 5488);
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Stack<Figure> stack0 = new Stack<Figure>();
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) quadTreeDrawing0, (List<Figure>) stack0, (-1.0), false);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      textFigure0.drawText(graphics2D0);
      assertEquals("Text", textFigure0.getText());
      assertTrue(textFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("");
      labelFigure0.drawStroke((Graphics2D) null);
      assertEquals("", labelFigure0.getText());
      assertFalse(labelFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      textFigure0.drawFill((Graphics2D) null);
      assertTrue(textFigure0.isEditable());
      assertEquals("Text", textFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("");
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Rectangle2D.Double rectangle2D_Double0 = defaultDrawing0.getFigureDrawBounds();
      textFigure0.setBounds(rectangle2D_Double0);
      assertEquals("", textFigure0.getText());
      assertTrue(textFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure((String) null);
      boolean boolean0 = textFigure0.isEditable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("|$?08Q*6(h7AM*");
      TextLayout textLayout0 = labelFigure0.getTextLayout();
      assertFalse(labelFigure0.isEditable());
      assertEquals(14, textLayout0.getCharacterCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure((String) null);
      String string0 = labelFigure0.getText();
      assertFalse(labelFigure0.isEditable());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      String string0 = labelFigure0.getText();
      assertEquals("Label", string0);
      assertFalse(labelFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure(" ");
      textFigure0.setFontSize((-795.89F));
      textFigure0.getPreferredSize();
      assertEquals((-795.89F), textFigure0.getFontSize(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure(" ");
      labelFigure0.setFontSize(0.0F);
      labelFigure0.getPreferredSize();
      assertEquals(0.0F, labelFigure0.getFontSize(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      labelFigure0.setVisible(false);
      TextHolderFigure textHolderFigure0 = labelFigure0.getLabelFor();
      assertEquals("Label", textHolderFigure0.getText());
      assertFalse(textHolderFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure(" ");
      labelFigure0.setFontSize(0.0F);
      labelFigure0.getLabelFor();
      assertEquals(0.0F, labelFigure0.getFontSize(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("x$");
      Rectangle2D.Double rectangle2D_Double0 = textFigure0.getFigureDrawingArea();
      assertEquals(18.173828125, rectangle2D_Double0.height, 0.01);
      assertTrue(textFigure0.isEditable());
      assertEquals(18.73046875, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure((String) null);
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance((-1));
      AffineTransform affineTransform1 = AffineTransform.getQuadrantRotateInstance((-1), (double) (-1), 0.0);
      affineTransform0.concatenate(affineTransform1);
      labelFigure0.transform(affineTransform0);
      Rectangle2D.Double rectangle2D_Double0 = labelFigure0.getFigureDrawingArea();
      assertFalse(labelFigure0.isEditable());
      assertEquals(15.583984375, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1.109375, rectangle2D_Double0.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("");
      TextFigure textFigure1 = textFigure0.clone();
      assertNotSame(textFigure1, textFigure0);
      assertTrue(textFigure1.isEditable());
      assertEquals("", textFigure1.getText());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      labelFigure0.setConnectable(false);
      TextFigure textFigure0 = labelFigure0.clone();
      assertNotSame(textFigure0, labelFigure0);
      assertEquals("Label", textFigure0.getText());
      assertFalse(textFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      DefaultDOMFactory defaultDOMFactory0 = new DefaultDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(defaultDOMFactory0);
      javaxDOMOutput0.closeElement();
      // Undeclared exception!
      try { 
        textFigure0.write(javaxDOMOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.xml.JavaxDOMOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      // Undeclared exception!
      try { 
        textFigure0.transform((AffineTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("Ne6M`C&_+!rqr=39QD");
      // Undeclared exception!
      try { 
        textFigure0.restoreTransformTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure((String) null);
      // Undeclared exception!
      try { 
        textFigure0.getTool((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      // Undeclared exception!
      try { 
        textFigure0.figureContains((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      // Undeclared exception!
      try { 
        labelFigure0.drawText((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("");
      Point2D.Double point2D_Double0 = (Point2D.Double)textFigure0.getTransformRestoreData();
      boolean boolean0 = textFigure0.figureContains(point2D_Double0);
      assertTrue(boolean0);
      assertTrue(textFigure0.isEditable());
      assertEquals("", textFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("/6`|z&3~EdztD45");
      labelFigure0.setText("/6`|z&3~EdztD45");
      assertFalse(labelFigure0.isEditable());
      assertEquals("/6`|z&3~EdztD45", labelFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("");
      String string0 = labelFigure0.getText();
      assertEquals("", string0);
      assertFalse(labelFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure((String) null);
      assertTrue(textFigure0.isEditable());
      
      textFigure0.setEditable(false);
      assertFalse(textFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure((String) null);
      labelFigure0.getFont();
      assertFalse(labelFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      labelFigure0.getFontSize();
      assertEquals("Label", labelFigure0.getText());
      assertFalse(labelFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure((String) null);
      Rectangle2D.Double rectangle2D_Double0 = labelFigure0.getBounds();
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertFalse(labelFigure0.isEditable());
      assertEquals(4.21875, rectangle2D_Double0.width, 0.01);
      assertEquals(14.583984375, rectangle2D_Double0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("");
      textFigure0.invalidate();
      assertTrue(textFigure0.isEditable());
      assertEquals("", textFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      Locator locator0 = RelativeLocator.northEast();
      CloseHandle closeHandle0 = new CloseHandle(textFigure0, locator0);
      Point2D.Double point2D_Double0 = closeHandle0.getLocationOnDrawing();
      Tool tool0 = textFigure0.getTool(point2D_Double0);
      assertTrue(textFigure0.isEditable());
      assertNull(tool0);
      assertEquals(26.373046875, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      labelFigure0.createHandles(0);
      assertFalse(labelFigure0.isEditable());
      assertEquals("Label", labelFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("");
      textFigure0.createHandles(8);
      assertEquals("", textFigure0.getText());
      assertTrue(textFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("");
      labelFigure0.fireFigureHandlesChanged();
      assertEquals("", labelFigure0.getText());
      assertFalse(labelFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure((String) null);
      Rectangle2D.Double rectangle2D_Double0 = labelFigure0.getFigureDrawingArea();
      assertEquals(14.583984375, rectangle2D_Double0.height, 0.01);
      assertEquals(4.21875, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertFalse(labelFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      FontSizeLocator fontSizeLocator0 = new FontSizeLocator();
      Point2D.Double point2D_Double0 = fontSizeLocator0.locate((Figure) textFigure0, (Figure) textFigure0);
      TextFigure textFigure1 = (TextFigure)textFigure0.findFigureInside(point2D_Double0);
      assertEquals("Text", textFigure1.getText());
      assertTrue(textFigure1.isEditable());
      assertNotNull(textFigure1);
      assertEquals(0.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure((String) null);
      BezierLabelLocator bezierLabelLocator0 = new BezierLabelLocator(989.2272263146843, 989.2272263146843, 989.2272263146843);
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      Point2D.Double point2D_Double0 = bezierLabelLocator0.getRelativePoint(lineConnectionFigure0);
      boolean boolean0 = textFigure0.figureContains(point2D_Double0);
      assertFalse(boolean0);
      assertTrue(textFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("");
      int int0 = textFigure0.getTabSize();
      assertEquals(8, int0);
      assertEquals("", textFigure0.getText());
      assertTrue(textFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure((String) null);
      labelFigure0.getTextColor();
      assertFalse(labelFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("");
      TextHolderFigure textHolderFigure0 = textFigure0.getLabelFor();
      assertEquals("", textHolderFigure0.getText());
      assertTrue(textHolderFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      Dimension2DDouble dimension2DDouble0 = textFigure0.getPreferredSize();
      assertEquals(26.373046875, dimension2DDouble0.width, 0.01);
      assertEquals(14.583984375, dimension2DDouble0.height, 0.01);
      assertTrue(textFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("UR3;c+t%J6w5_FG4cz2");
      // Undeclared exception!
      try { 
        labelFigure0.setBounds((Point2D.Double) null, (Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("");
      // Undeclared exception!
      try { 
        labelFigure0.read((DOMInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      labelFigure0.setVisible(false);
      TextFigure textFigure0 = labelFigure0.clone();
      assertNotSame(textFigure0, labelFigure0);
      assertEquals("Label", textFigure0.getText());
      assertFalse(textFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("x$");
      Point2D.Double point2D_Double0 = (Point2D.Double)textFigure0.getTransformRestoreData();
      TextEditingTool textEditingTool0 = (TextEditingTool)textFigure0.getTool(point2D_Double0);
      assertEquals("x$", textFigure0.getText());
      assertNotNull(textEditingTool0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure();
      BezierFigure bezierFigure0 = new BezierFigure();
      RelativeDecoratorLocator relativeDecoratorLocator0 = new RelativeDecoratorLocator((-1461.57360663), (-1461.57360663));
      NullHandle nullHandle0 = new NullHandle(bezierFigure0, relativeDecoratorLocator0);
      // Undeclared exception!
      try { 
        textFigure0.restoreTransformTo(nullHandle0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jhotdraw.draw.handle.NullHandle cannot be cast to java.awt.geom.Point2D$Double
         //
         verifyException("org.jhotdraw.draw.figure.TextFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      labelFigure0.getInsets();
      assertFalse(labelFigure0.isEditable());
      assertEquals("Label", labelFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      labelFigure0.validate();
      assertFalse(labelFigure0.isEditable());
      assertEquals("Label", labelFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure(" ");
      textFigure0.setFontSize((-795.89F));
      textFigure0.getFont();
      assertEquals((-795.89F), textFigure0.getFontSize(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      labelFigure0.getFillColor();
      assertEquals("Label", labelFigure0.getText());
      assertFalse(labelFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      boolean boolean0 = labelFigure0.isEditable();
      assertEquals("Label", labelFigure0.getText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("");
      double double0 = textFigure0.getBaseline();
      assertEquals(12.064453125, double0, 0.01);
      assertEquals("", textFigure0.getText());
      assertTrue(textFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("");
      int int0 = textFigure0.getTextColumns();
      assertEquals(4, int0);
      assertEquals("", textFigure0.getText());
      assertTrue(textFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      DefaultDOMFactory defaultDOMFactory0 = new DefaultDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(defaultDOMFactory0);
      // Undeclared exception!
      try { 
        labelFigure0.write(javaxDOMOutput0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sun.org.apache.xerces.internal.dom.DocumentImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.jhotdraw.xml.JavaxDOMOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      boolean boolean0 = labelFigure0.isTextOverflow();
      assertEquals("Label", labelFigure0.getText());
      assertFalse(boolean0);
      assertFalse(labelFigure0.isEditable());
  }
}
