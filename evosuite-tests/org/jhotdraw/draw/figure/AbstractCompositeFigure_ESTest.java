/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 12 16:09:54 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import javax.swing.event.UndoableEditEvent;
import javax.swing.undo.AbstractUndoableEdit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.jhotdraw.draw.AbstractDrawing;
import org.jhotdraw.draw.AttributeKey;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.Drawing;
import org.jhotdraw.draw.GraphicalCompositeFigure;
import org.jhotdraw.draw.QuadTreeDrawing;
import org.jhotdraw.draw.connector.ChopRoundRectangleConnector;
import org.jhotdraw.draw.connector.ChopTriangleConnector;
import org.jhotdraw.draw.event.CompositeFigureListener;
import org.jhotdraw.draw.event.FigureEvent;
import org.jhotdraw.draw.figure.AbstractCompositeFigure;
import org.jhotdraw.draw.figure.BezierFigure;
import org.jhotdraw.draw.figure.ConnectionFigure;
import org.jhotdraw.draw.figure.DiamondFigure;
import org.jhotdraw.draw.figure.EllipseFigure;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.GroupFigure;
import org.jhotdraw.draw.figure.ImageFigure;
import org.jhotdraw.draw.figure.LabelFigure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.figure.LineConnectionFigure;
import org.jhotdraw.draw.figure.ListFigure;
import org.jhotdraw.draw.figure.RectangleFigure;
import org.jhotdraw.draw.figure.RoundRectangleFigure;
import org.jhotdraw.draw.figure.TextAreaFigure;
import org.jhotdraw.draw.figure.TextFigure;
import org.jhotdraw.draw.figure.TriangleFigure;
import org.jhotdraw.draw.handle.BezierNodeHandle;
import org.jhotdraw.draw.handle.BezierScaleHandle;
import org.jhotdraw.draw.handle.ConnectionStartHandle;
import org.jhotdraw.draw.handle.ConnectorHandle;
import org.jhotdraw.draw.handle.FontSizeHandle;
import org.jhotdraw.draw.handle.Handle;
import org.jhotdraw.draw.handle.MoveHandle;
import org.jhotdraw.draw.handle.NullHandle;
import org.jhotdraw.draw.handle.RoundRectangleRadiusHandle;
import org.jhotdraw.draw.layouter.Layouter;
import org.jhotdraw.draw.locator.BezierLabelLocator;
import org.jhotdraw.draw.locator.FontSizeLocator;
import org.jhotdraw.draw.locator.Locator;
import org.jhotdraw.draw.locator.RelativeDecoratorLocator;
import org.jhotdraw.draw.locator.RelativeLocator;
import org.jhotdraw.geom.BezierPath;
import org.jhotdraw.geom.Dimension2DDouble;
import org.jhotdraw.util.ResourceBundleUtil;
import org.jhotdraw.xml.DOMInput;
import org.jhotdraw.xml.DOMOutput;
import org.jhotdraw.xml.JavaPrimitivesDOMFactory;
import org.jhotdraw.xml.JavaxDOMOutput;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractCompositeFigure_ESTest extends AbstractCompositeFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      assertTrue(groupFigure0.isRemovable());
      assertTrue(groupFigure0.isVisible());
      assertEquals(0, groupFigure0.getLayer());
      assertTrue(groupFigure0.isSelectable());
      assertFalse(groupFigure0.isConnectable());
      assertEquals(0, groupFigure0.getChildCount());
      assertNotNull(groupFigure0);
      
      TriangleFigure triangleFigure0 = new TriangleFigure((-1402.8829348625422), 652.95359, 0.0, 652.95359);
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertNotNull(triangleFigure0);
      
      Point2D.Double point2D_Double0 = new Point2D.Double(375.37118, 2752.286806004);
      assertNotNull(point2D_Double0);
      assertEquals(375.37118, point2D_Double0.x, 0.01);
      assertEquals(2752.286806004, point2D_Double0.y, 0.01);
      
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertNotNull(labeledLineConnectionFigure0);
      
      ChopTriangleConnector chopTriangleConnector0 = (ChopTriangleConnector)triangleFigure0.findConnector(point2D_Double0, labeledLineConnectionFigure0);
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertFalse(chopTriangleConnector0.isConnectToDecorator());
      assertNotNull(chopTriangleConnector0);
      assertEquals(375.37118, point2D_Double0.x, 0.01);
      assertEquals(2752.286806004, point2D_Double0.y, 0.01);
      
      ConnectorHandle connectorHandle0 = new ConnectorHandle(chopTriangleConnector0, (ConnectionFigure) null);
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertFalse(chopTriangleConnector0.isConnectToDecorator());
      assertNotNull(connectorHandle0);
      assertEquals(375.37118, point2D_Double0.x, 0.01);
      assertEquals(2752.286806004, point2D_Double0.y, 0.01);
      
      groupFigure0.addFigureListener(connectorHandle0);
      assertTrue(groupFigure0.isRemovable());
      assertTrue(groupFigure0.isVisible());
      assertEquals(0, groupFigure0.getLayer());
      assertTrue(groupFigure0.isSelectable());
      assertFalse(groupFigure0.isConnectable());
      assertEquals(0, groupFigure0.getChildCount());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertFalse(chopTriangleConnector0.isConnectToDecorator());
      assertEquals(375.37118, point2D_Double0.x, 0.01);
      assertEquals(2752.286806004, point2D_Double0.y, 0.01);
      
      groupFigure0.fireFigureAdded(labeledLineConnectionFigure0, 2268);
      assertTrue(groupFigure0.isRemovable());
      assertTrue(groupFigure0.isVisible());
      assertEquals(0, groupFigure0.getLayer());
      assertTrue(groupFigure0.isSelectable());
      assertFalse(groupFigure0.isConnectable());
      assertEquals(0, groupFigure0.getChildCount());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertFalse(labeledLineConnectionFigure0.isClosed());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      assertEquals(0, groupFigure0.getChildCount());
      assertEquals(0, groupFigure0.getLayer());
      assertFalse(groupFigure0.isConnectable());
      assertTrue(groupFigure0.isSelectable());
      assertTrue(groupFigure0.isRemovable());
      assertTrue(groupFigure0.isVisible());
      assertNotNull(groupFigure0);
      
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(1.0E-4, 1.0E-4, 1.0E-4, 1.0E-4);
      assertTrue(roundRectangleFigure0.isSelectable());
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertTrue(roundRectangleFigure0.isVisible());
      assertTrue(roundRectangleFigure0.isConnectable());
      assertTrue(roundRectangleFigure0.isRemovable());
      assertEquals(3.0, roundRectangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, roundRectangleFigure0.getLayer());
      assertNotNull(roundRectangleFigure0);
      
      groupFigure0.basicAdd((Figure) roundRectangleFigure0);
      assertEquals(1, groupFigure0.getChildCount());
      assertEquals(0, groupFigure0.getLayer());
      assertFalse(groupFigure0.isConnectable());
      assertTrue(groupFigure0.isSelectable());
      assertTrue(groupFigure0.isRemovable());
      assertTrue(groupFigure0.isVisible());
      assertTrue(roundRectangleFigure0.isSelectable());
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertTrue(roundRectangleFigure0.isVisible());
      assertTrue(roundRectangleFigure0.isConnectable());
      assertTrue(roundRectangleFigure0.isRemovable());
      assertEquals(3.0, roundRectangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, roundRectangleFigure0.getLayer());
      
      groupFigure0.fireAreaInvalidated();
      assertEquals(1, groupFigure0.getChildCount());
      assertEquals(0, groupFigure0.getLayer());
      assertFalse(groupFigure0.isConnectable());
      assertTrue(groupFigure0.isSelectable());
      assertTrue(groupFigure0.isRemovable());
      assertTrue(groupFigure0.isVisible());
      
      // Undeclared exception!
      try { 
        groupFigure0.chop((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.geom.Geom", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      assertTrue(quadTreeDrawing0.isSelectable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertNotNull(quadTreeDrawing0);
      
      BezierPath bezierPath0 = new BezierPath();
      assertTrue(bezierPath0.isEmpty());
      assertFalse(bezierPath0.isClosed());
      assertEquals(0, bezierPath0.getWindingRule());
      assertEquals(0, bezierPath0.size());
      assertNotNull(bezierPath0);
      assertEquals(3, BezierPath.C1C2_MASK);
      assertEquals(0, BezierPath.C0_MASK);
      assertEquals(1, BezierPath.C1_MASK);
      assertEquals(2, BezierPath.C2_MASK);
      
      Point2D.Double point2D_Double0 = bezierPath0.getCenter();
      assertTrue(bezierPath0.isEmpty());
      assertFalse(bezierPath0.isClosed());
      assertEquals(0, bezierPath0.getWindingRule());
      assertEquals(0, bezierPath0.size());
      assertNotNull(point2D_Double0);
      assertEquals(3, BezierPath.C1C2_MASK);
      assertEquals(0, BezierPath.C0_MASK);
      assertEquals(1, BezierPath.C1_MASK);
      assertEquals(2, BezierPath.C2_MASK);
      assertEquals(Double.NaN, point2D_Double0.y, 0.01);
      assertEquals(Double.NaN, point2D_Double0.x, 0.01);
      
      quadTreeDrawing0.setBounds(point2D_Double0, point2D_Double0);
      assertTrue(quadTreeDrawing0.isSelectable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertTrue(bezierPath0.isEmpty());
      assertFalse(bezierPath0.isClosed());
      assertEquals(0, bezierPath0.getWindingRule());
      assertEquals(0, bezierPath0.size());
      assertEquals(3, BezierPath.C1C2_MASK);
      assertEquals(0, BezierPath.C0_MASK);
      assertEquals(1, BezierPath.C1_MASK);
      assertEquals(2, BezierPath.C2_MASK);
      assertEquals(Double.NaN, point2D_Double0.y, 0.01);
      assertEquals(Double.NaN, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertTrue(defaultDrawing0.isRemovable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertNotNull(defaultDrawing0);
      
      TriangleFigure triangleFigure0 = new TriangleFigure();
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(triangleFigure0);
      
      defaultDrawing0.basicAdd(0, (Figure) triangleFigure0);
      assertTrue(defaultDrawing0.isRemovable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(1, defaultDrawing0.getChildCount());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isSelectable());
      
      boolean boolean0 = defaultDrawing0.add((Figure) triangleFigure0);
      assertTrue(boolean0);
      assertTrue(defaultDrawing0.isRemovable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(2, defaultDrawing0.getChildCount());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      assertTrue(groupFigure0.isVisible());
      assertEquals(0, groupFigure0.getLayer());
      assertEquals(0, groupFigure0.getChildCount());
      assertTrue(groupFigure0.isRemovable());
      assertTrue(groupFigure0.isSelectable());
      assertFalse(groupFigure0.isConnectable());
      assertNotNull(groupFigure0);
      
      Collection<Handle> collection0 = groupFigure0.createHandles((-780));
      assertTrue(groupFigure0.isVisible());
      assertEquals(0, groupFigure0.getLayer());
      assertEquals(0, groupFigure0.getChildCount());
      assertTrue(groupFigure0.isRemovable());
      assertTrue(groupFigure0.isSelectable());
      assertFalse(groupFigure0.isConnectable());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      assertTrue(listFigure0.isConnectable());
      assertEquals(0, listFigure0.getChildCount());
      assertEquals(0, listFigure0.getLayer());
      assertTrue(listFigure0.isSelectable());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isVisible());
      assertNotNull(listFigure0);
      
      AbstractCompositeFigure.EventHandler abstractCompositeFigure_EventHandler0 = listFigure0.createEventHandler();
      assertTrue(listFigure0.isConnectable());
      assertEquals(0, listFigure0.getChildCount());
      assertEquals(0, listFigure0.getLayer());
      assertTrue(listFigure0.isSelectable());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isVisible());
      assertNotNull(abstractCompositeFigure_EventHandler0);
      
      GroupFigure groupFigure0 = new GroupFigure();
      assertTrue(groupFigure0.isVisible());
      assertTrue(groupFigure0.isRemovable());
      assertEquals(0, groupFigure0.getChildCount());
      assertTrue(groupFigure0.isSelectable());
      assertFalse(groupFigure0.isConnectable());
      assertEquals(0, groupFigure0.getLayer());
      assertNotNull(groupFigure0);
      
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertNotNull(labeledLineConnectionFigure0);
      
      Rectangle2D.Double rectangle2D_Double0 = labeledLineConnectionFigure0.getDrawingArea();
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals((-2.5), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(2.5, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-2.5), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(2.5, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals((-2.5), rectangle2D_Double0.x, 0.01);
      assertEquals(5.0, rectangle2D_Double0.height, 0.01);
      assertEquals(5.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-2.5), rectangle2D_Double0.y, 0.01);
      
      FigureEvent figureEvent0 = new FigureEvent(groupFigure0, rectangle2D_Double0);
      assertTrue(groupFigure0.isVisible());
      assertTrue(groupFigure0.isRemovable());
      assertEquals(0, groupFigure0.getChildCount());
      assertTrue(groupFigure0.isSelectable());
      assertFalse(groupFigure0.isConnectable());
      assertEquals(0, groupFigure0.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals((-2.5), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(2.5, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-2.5), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(2.5, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertNotNull(figureEvent0);
      assertEquals((-2.5), rectangle2D_Double0.x, 0.01);
      assertEquals(5.0, rectangle2D_Double0.height, 0.01);
      assertEquals(5.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-2.5), rectangle2D_Double0.y, 0.01);
      
      abstractCompositeFigure_EventHandler0.figureChanged(figureEvent0);
      assertTrue(listFigure0.isConnectable());
      assertEquals(0, listFigure0.getChildCount());
      assertEquals(0, listFigure0.getLayer());
      assertTrue(listFigure0.isSelectable());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isVisible());
      assertTrue(groupFigure0.isVisible());
      assertTrue(groupFigure0.isRemovable());
      assertEquals(0, groupFigure0.getChildCount());
      assertTrue(groupFigure0.isSelectable());
      assertFalse(groupFigure0.isConnectable());
      assertEquals(0, groupFigure0.getLayer());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals((-2.5), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(2.5, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-2.5), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(2.5, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-2.5), rectangle2D_Double0.x, 0.01);
      assertEquals(5.0, rectangle2D_Double0.height, 0.01);
      assertEquals(5.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-2.5), rectangle2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertTrue(defaultDrawing0.isSelectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isRemovable());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isVisible());
      assertNotNull(defaultDrawing0);
      
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure(defaultDrawing0);
      assertTrue(defaultDrawing0.isSelectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isRemovable());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
      assertNotNull(graphicalCompositeFigure0);
      
      AbstractCompositeFigure.EventHandler abstractCompositeFigure_EventHandler0 = graphicalCompositeFigure0.new EventHandler();
      assertTrue(defaultDrawing0.isSelectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isRemovable());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
      assertNotNull(abstractCompositeFigure_EventHandler0);
      
      Class<Rectangle2D.Double> class0 = Rectangle2D.Double.class;
      AttributeKey<Rectangle2D.Double> attributeKey0 = new AttributeKey<Rectangle2D.Double>("", class0);
      assertEquals("", attributeKey0.toString());
      assertTrue(attributeKey0.isNullValueAllowed());
      assertEquals("", attributeKey0.getKey());
      assertNotNull(attributeKey0);
      
      Locator locator0 = RelativeDecoratorLocator.southEast();
      assertNotNull(locator0);
      
      NullHandle nullHandle0 = new NullHandle(defaultDrawing0, locator0);
      assertTrue(defaultDrawing0.isSelectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isRemovable());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isVisible());
      assertNotNull(nullHandle0);
      
      FigureEvent figureEvent0 = new FigureEvent(defaultDrawing0, attributeKey0, (Object) null, nullHandle0);
      assertTrue(defaultDrawing0.isSelectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isRemovable());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isVisible());
      assertEquals("", attributeKey0.toString());
      assertTrue(attributeKey0.isNullValueAllowed());
      assertEquals("", attributeKey0.getKey());
      assertNotNull(figureEvent0);
      
      abstractCompositeFigure_EventHandler0.figureAdded(figureEvent0);
      assertTrue(defaultDrawing0.isSelectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isRemovable());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
      assertEquals("", attributeKey0.toString());
      assertTrue(attributeKey0.isNullValueAllowed());
      assertEquals("", attributeKey0.getKey());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      assertTrue(listFigure0.isSelectable());
      assertEquals(0, listFigure0.getChildCount());
      assertTrue(listFigure0.isConnectable());
      assertEquals(0, listFigure0.getLayer());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isVisible());
      assertNotNull(listFigure0);
      
      AbstractCompositeFigure.EventHandler abstractCompositeFigure_EventHandler0 = listFigure0.new EventHandler();
      assertTrue(listFigure0.isSelectable());
      assertEquals(0, listFigure0.getChildCount());
      assertTrue(listFigure0.isConnectable());
      assertEquals(0, listFigure0.getLayer());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isVisible());
      assertNotNull(abstractCompositeFigure_EventHandler0);
      
      abstractCompositeFigure_EventHandler0.areaInvalidated((FigureEvent) null);
      assertTrue(listFigure0.isSelectable());
      assertEquals(0, listFigure0.getChildCount());
      assertTrue(listFigure0.isConnectable());
      assertEquals(0, listFigure0.getLayer());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(600.0, 600.0, 600.0, 600.0);
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(triangleFigure0);
      
      ListFigure listFigure0 = new ListFigure(triangleFigure0);
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(listFigure0.isConnectable());
      assertTrue(listFigure0.isVisible());
      assertTrue(listFigure0.isRemovable());
      assertEquals(0, listFigure0.getLayer());
      assertTrue(listFigure0.isSelectable());
      assertEquals(0, listFigure0.getChildCount());
      assertNotNull(listFigure0);
      
      listFigure0.validate();
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(listFigure0.isConnectable());
      assertTrue(listFigure0.isVisible());
      assertTrue(listFigure0.isRemovable());
      assertEquals(0, listFigure0.getLayer());
      assertTrue(listFigure0.isSelectable());
      assertEquals(0, listFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure((Figure) null);
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
      assertNotNull(graphicalCompositeFigure0);
      
      graphicalCompositeFigure0.removeCompositeFigureListener((CompositeFigureListener) null);
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      assertTrue(groupFigure0.isSelectable());
      assertFalse(groupFigure0.isConnectable());
      assertEquals(0, groupFigure0.getLayer());
      assertEquals(0, groupFigure0.getChildCount());
      assertTrue(groupFigure0.isVisible());
      assertTrue(groupFigure0.isRemovable());
      assertNotNull(groupFigure0);
      
      groupFigure0.invalidate();
      assertTrue(groupFigure0.isSelectable());
      assertFalse(groupFigure0.isConnectable());
      assertEquals(0, groupFigure0.getLayer());
      assertEquals(0, groupFigure0.getChildCount());
      assertTrue(groupFigure0.isVisible());
      assertTrue(groupFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      assertTrue(listFigure0.isConnectable());
      assertEquals(0, listFigure0.getChildCount());
      assertTrue(listFigure0.isSelectable());
      assertTrue(listFigure0.isVisible());
      assertTrue(listFigure0.isRemovable());
      assertEquals(0, listFigure0.getLayer());
      assertNotNull(listFigure0);
      
      CompositeFigureListener compositeFigureListener0 = mock(CompositeFigureListener.class, new ViolatedAssumptionAnswer());
      listFigure0.addCompositeFigureListener(compositeFigureListener0);
      assertTrue(listFigure0.isConnectable());
      assertEquals(0, listFigure0.getChildCount());
      assertTrue(listFigure0.isSelectable());
      assertTrue(listFigure0.isVisible());
      assertTrue(listFigure0.isRemovable());
      assertEquals(0, listFigure0.getLayer());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertNotNull(defaultDrawing0);
      
      AbstractDrawing abstractDrawing0 = defaultDrawing0.clone();
      assertFalse(abstractDrawing0.equals((Object)defaultDrawing0));
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertEquals(0, abstractDrawing0.getChildCount());
      assertTrue(abstractDrawing0.isConnectable());
      assertFalse(abstractDrawing0.isDebugMode());
      assertTrue(abstractDrawing0.isRemovable());
      assertTrue(abstractDrawing0.isVisible());
      assertEquals(0, abstractDrawing0.getLayer());
      assertTrue(abstractDrawing0.isSelectable());
      assertEquals(3.0, abstractDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertNotNull(abstractDrawing0);
      assertNotSame(defaultDrawing0, abstractDrawing0);
      assertNotSame(abstractDrawing0, defaultDrawing0);
      
      boolean boolean0 = abstractDrawing0.add((Figure) defaultDrawing0);
      assertTrue(boolean0);
      assertFalse(defaultDrawing0.equals((Object)abstractDrawing0));
      assertFalse(abstractDrawing0.equals((Object)defaultDrawing0));
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(abstractDrawing0.isConnectable());
      assertFalse(abstractDrawing0.isDebugMode());
      assertTrue(abstractDrawing0.isRemovable());
      assertTrue(abstractDrawing0.isVisible());
      assertEquals(0, abstractDrawing0.getLayer());
      assertTrue(abstractDrawing0.isSelectable());
      assertEquals(1, abstractDrawing0.getChildCount());
      assertEquals(3.0, abstractDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertNotSame(defaultDrawing0, abstractDrawing0);
      assertNotSame(abstractDrawing0, defaultDrawing0);
      
      int int0 = abstractDrawing0.indexOf(defaultDrawing0);
      assertEquals(0, int0);
      assertFalse(defaultDrawing0.equals((Object)abstractDrawing0));
      assertFalse(abstractDrawing0.equals((Object)defaultDrawing0));
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(abstractDrawing0.isConnectable());
      assertFalse(abstractDrawing0.isDebugMode());
      assertTrue(abstractDrawing0.isRemovable());
      assertTrue(abstractDrawing0.isVisible());
      assertEquals(0, abstractDrawing0.getLayer());
      assertTrue(abstractDrawing0.isSelectable());
      assertEquals(1, abstractDrawing0.getChildCount());
      assertEquals(3.0, abstractDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertNotSame(defaultDrawing0, abstractDrawing0);
      assertNotSame(abstractDrawing0, defaultDrawing0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertTrue(quadTreeDrawing0.isSelectable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertNotNull(quadTreeDrawing0);
      
      Layouter layouter0 = quadTreeDrawing0.getLayouter();
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertTrue(quadTreeDrawing0.isSelectable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertNull(layouter0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      assertEquals(0, listFigure0.getLayer());
      assertTrue(listFigure0.isConnectable());
      assertTrue(listFigure0.isSelectable());
      assertTrue(listFigure0.isVisible());
      assertTrue(listFigure0.isRemovable());
      assertEquals(0, listFigure0.getChildCount());
      assertNotNull(listFigure0);
      
      Layouter layouter0 = listFigure0.getLayouter();
      assertEquals(0, listFigure0.getLayer());
      assertTrue(listFigure0.isConnectable());
      assertTrue(listFigure0.isSelectable());
      assertTrue(listFigure0.isVisible());
      assertTrue(listFigure0.isRemovable());
      assertEquals(0, listFigure0.getChildCount());
      assertNotNull(layouter0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      assertEquals(4, labelFigure0.getTextColumns());
      assertTrue(labelFigure0.isSelectable());
      assertFalse(labelFigure0.isTextOverflow());
      assertFalse(labelFigure0.isEditable());
      assertTrue(labelFigure0.isConnectable());
      assertEquals("Label", labelFigure0.getText());
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isVisible());
      assertEquals(8, labelFigure0.getTabSize());
      assertEquals(12.0F, labelFigure0.getFontSize(), 0.01F);
      assertEquals(0, labelFigure0.getLayer());
      assertEquals(3.0, labelFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertNotNull(labelFigure0);
      
      ListFigure listFigure0 = new ListFigure(labelFigure0);
      assertEquals(4, labelFigure0.getTextColumns());
      assertTrue(labelFigure0.isSelectable());
      assertFalse(labelFigure0.isTextOverflow());
      assertFalse(labelFigure0.isEditable());
      assertTrue(labelFigure0.isConnectable());
      assertEquals("Label", labelFigure0.getText());
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isVisible());
      assertEquals(8, labelFigure0.getTabSize());
      assertEquals(12.0F, labelFigure0.getFontSize(), 0.01F);
      assertEquals(0, labelFigure0.getLayer());
      assertEquals(3.0, labelFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isConnectable());
      assertTrue(listFigure0.isVisible());
      assertEquals(0, listFigure0.getChildCount());
      assertTrue(listFigure0.isSelectable());
      assertEquals(0, listFigure0.getLayer());
      assertNotNull(listFigure0);
      
      Rectangle2D.Double rectangle2D_Double0 = listFigure0.getDrawingArea();
      assertEquals(4, labelFigure0.getTextColumns());
      assertTrue(labelFigure0.isSelectable());
      assertFalse(labelFigure0.isTextOverflow());
      assertFalse(labelFigure0.isEditable());
      assertTrue(labelFigure0.isConnectable());
      assertEquals("Label", labelFigure0.getText());
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isVisible());
      assertEquals(8, labelFigure0.getTabSize());
      assertEquals(12.0F, labelFigure0.getFontSize(), 0.01F);
      assertEquals(0, labelFigure0.getLayer());
      assertEquals(3.0, labelFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isConnectable());
      assertTrue(listFigure0.isVisible());
      assertEquals(0, listFigure0.getChildCount());
      assertTrue(listFigure0.isSelectable());
      assertEquals(0, listFigure0.getLayer());
      assertEquals((-2.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-2.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(14.251953125, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(6.1259765625, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(15.90234375, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(33.8046875, rectangle2D_Double0.getMaxX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(16.251953125, rectangle2D_Double0.height, 0.01);
      assertEquals((-2.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-2.0), rectangle2D_Double0.x, 0.01);
      assertEquals(35.8046875, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(quadTreeDrawing0.isSelectable());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertNotNull(quadTreeDrawing0);
      
      ImageFigure imageFigure0 = new ImageFigure(0.0, (-879.102), (-879.102), 2513.4702945067);
      assertTrue(imageFigure0.isSelectable());
      assertEquals(0, imageFigure0.getLayer());
      assertEquals(3.0, imageFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(imageFigure0.isConnectable());
      assertTrue(imageFigure0.isRemovable());
      assertTrue(imageFigure0.isVisible());
      assertNotNull(imageFigure0);
      
      quadTreeDrawing0.basicAdd((Figure) imageFigure0);
      assertEquals(1, quadTreeDrawing0.getChildCount());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(quadTreeDrawing0.isSelectable());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertTrue(imageFigure0.isSelectable());
      assertEquals(0, imageFigure0.getLayer());
      assertEquals(3.0, imageFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(imageFigure0.isConnectable());
      assertTrue(imageFigure0.isRemovable());
      assertTrue(imageFigure0.isVisible());
      
      Rectangle2D.Double rectangle2D_Double0 = quadTreeDrawing0.getDrawingArea();
      assertEquals(1, quadTreeDrawing0.getChildCount());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(quadTreeDrawing0.isSelectable());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertEquals(1636.8682945067003, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(377.6331472533501, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-881.602), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-2.5), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-876.602), rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-439.551), rectangle2D_Double0.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(2518.4702945067, rectangle2D_Double0.height, 0.01);
      assertEquals((-881.602), rectangle2D_Double0.y, 0.01);
      assertEquals((-2.5), rectangle2D_Double0.x, 0.01);
      assertEquals((-874.102), rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure();
      assertTrue(imageFigure0.isVisible());
      assertEquals(0, imageFigure0.getLayer());
      assertEquals(3.0, imageFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(imageFigure0.isConnectable());
      assertTrue(imageFigure0.isRemovable());
      assertTrue(imageFigure0.isSelectable());
      assertNotNull(imageFigure0);
      
      ListFigure listFigure0 = new ListFigure(imageFigure0);
      assertTrue(imageFigure0.isVisible());
      assertEquals(0, imageFigure0.getLayer());
      assertEquals(3.0, imageFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(imageFigure0.isConnectable());
      assertTrue(imageFigure0.isRemovable());
      assertTrue(imageFigure0.isSelectable());
      assertEquals(0, listFigure0.getChildCount());
      assertTrue(listFigure0.isVisible());
      assertEquals(0, listFigure0.getLayer());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isConnectable());
      assertTrue(listFigure0.isSelectable());
      assertNotNull(listFigure0);
      
      Map<AttributeKey<?>, Object> map0 = listFigure0.getAttributes();
      assertTrue(imageFigure0.isVisible());
      assertEquals(0, imageFigure0.getLayer());
      assertEquals(3.0, imageFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(imageFigure0.isConnectable());
      assertTrue(imageFigure0.isRemovable());
      assertTrue(imageFigure0.isSelectable());
      assertEquals(0, listFigure0.getChildCount());
      assertTrue(listFigure0.isVisible());
      assertEquals(0, listFigure0.getLayer());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isConnectable());
      assertTrue(listFigure0.isSelectable());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isConnectable());
      assertNotNull(defaultDrawing0);
      
      Class<RoundRectangleRadiusHandle> class0 = RoundRectangleRadiusHandle.class;
      RoundRectangleRadiusHandle roundRectangleRadiusHandle0 = new RoundRectangleRadiusHandle(defaultDrawing0);
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isConnectable());
      assertNotNull(roundRectangleRadiusHandle0);
      
      AttributeKey<RoundRectangleRadiusHandle> attributeKey0 = new AttributeKey<RoundRectangleRadiusHandle>("", class0, roundRectangleRadiusHandle0, false, (ResourceBundleUtil) null);
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isConnectable());
      assertFalse(attributeKey0.isNullValueAllowed());
      assertEquals("", attributeKey0.getKey());
      assertEquals("", attributeKey0.toString());
      assertNotNull(attributeKey0);
      
      RoundRectangleRadiusHandle roundRectangleRadiusHandle1 = defaultDrawing0.get(attributeKey0);
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isConnectable());
      assertFalse(attributeKey0.isNullValueAllowed());
      assertEquals("", attributeKey0.getKey());
      assertEquals("", attributeKey0.toString());
      assertNotNull(roundRectangleRadiusHandle1);
      assertSame(roundRectangleRadiusHandle0, roundRectangleRadiusHandle1);
      assertSame(roundRectangleRadiusHandle1, roundRectangleRadiusHandle0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertEquals(0, defaultDrawing0.getChildCount());
      assertTrue(defaultDrawing0.isConnectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isVisible());
      assertNotNull(defaultDrawing0);
      
      // Undeclared exception!
      try { 
        defaultDrawing0.write((DOMOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AbstractDrawing", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      assertEquals(0, listFigure0.getChildCount());
      assertEquals(0, listFigure0.getLayer());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isConnectable());
      assertTrue(listFigure0.isSelectable());
      assertTrue(listFigure0.isVisible());
      assertNotNull(listFigure0);
      
      // Undeclared exception!
      try { 
        listFigure0.restoreTransformTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isVisible());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isConnectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertTrue(defaultDrawing0.isSelectable());
      assertNotNull(defaultDrawing0);
      
      // Undeclared exception!
      try { 
        defaultDrawing0.restoreTransformTo(defaultDrawing0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jhotdraw.draw.DefaultDrawing cannot be cast to java.util.LinkedList
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      assertTrue(groupFigure0.isSelectable());
      assertFalse(groupFigure0.isConnectable());
      assertEquals(0, groupFigure0.getChildCount());
      assertTrue(groupFigure0.isVisible());
      assertTrue(groupFigure0.isRemovable());
      assertEquals(0, groupFigure0.getLayer());
      assertNotNull(groupFigure0);
      
      // Undeclared exception!
      try { 
        groupFigure0.restoreAttributesTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      assertEquals(3.0, roundRectangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, roundRectangleFigure0.getLayer());
      assertTrue(roundRectangleFigure0.isConnectable());
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertTrue(roundRectangleFigure0.isVisible());
      assertTrue(roundRectangleFigure0.isRemovable());
      assertTrue(roundRectangleFigure0.isSelectable());
      assertNotNull(roundRectangleFigure0);
      
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isConnectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isSelectable());
      assertNotNull(defaultDrawing0);
      
      // Undeclared exception!
      try { 
        defaultDrawing0.restoreAttributesTo(roundRectangleFigure0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jhotdraw.draw.figure.RoundRectangleFigure cannot be cast to java.util.LinkedList
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isSelectable());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isVisible());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertNotNull(defaultDrawing0);
      
      // Undeclared exception!
      try { 
        defaultDrawing0.removeChild(4481);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4481, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isSelectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertNotNull(defaultDrawing0);
      
      // Undeclared exception!
      try { 
        defaultDrawing0.removeChild((-2439));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertNotNull(graphicalCompositeFigure0);
      
      LabelFigure labelFigure0 = new LabelFigure();
      assertTrue(labelFigure0.isVisible());
      assertEquals(12.0F, labelFigure0.getFontSize(), 0.01F);
      assertTrue(labelFigure0.isSelectable());
      assertTrue(labelFigure0.isConnectable());
      assertTrue(labelFigure0.isRemovable());
      assertEquals("Label", labelFigure0.getText());
      assertEquals(0, labelFigure0.getLayer());
      assertEquals(3.0, labelFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labelFigure0.isTextOverflow());
      assertEquals(8, labelFigure0.getTabSize());
      assertEquals(4, labelFigure0.getTextColumns());
      assertFalse(labelFigure0.isEditable());
      assertNotNull(labelFigure0);
      
      BezierLabelLocator bezierLabelLocator0 = new BezierLabelLocator((-1485.9188), 0.0, (-1485.9188));
      assertNotNull(bezierLabelLocator0);
      
      FontSizeHandle fontSizeHandle0 = new FontSizeHandle(labelFigure0, bezierLabelLocator0);
      assertTrue(labelFigure0.isVisible());
      assertEquals(12.0F, labelFigure0.getFontSize(), 0.01F);
      assertTrue(labelFigure0.isSelectable());
      assertTrue(labelFigure0.isConnectable());
      assertTrue(labelFigure0.isRemovable());
      assertEquals("Label", labelFigure0.getText());
      assertEquals(0, labelFigure0.getLayer());
      assertEquals(3.0, labelFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labelFigure0.isTextOverflow());
      assertEquals(8, labelFigure0.getTabSize());
      assertEquals(4, labelFigure0.getTextColumns());
      assertFalse(labelFigure0.isEditable());
      assertNotNull(fontSizeHandle0);
      
      graphicalCompositeFigure0.addFigureListener(fontSizeHandle0);
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(labelFigure0.isVisible());
      assertEquals(12.0F, labelFigure0.getFontSize(), 0.01F);
      assertTrue(labelFigure0.isSelectable());
      assertTrue(labelFigure0.isConnectable());
      assertTrue(labelFigure0.isRemovable());
      assertEquals("Label", labelFigure0.getText());
      assertEquals(0, labelFigure0.getLayer());
      assertEquals(3.0, labelFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labelFigure0.isTextOverflow());
      assertEquals(8, labelFigure0.getTabSize());
      assertEquals(4, labelFigure0.getTextColumns());
      assertFalse(labelFigure0.isEditable());
      
      // Undeclared exception!
      try { 
        graphicalCompositeFigure0.removeAllChildren();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jhotdraw.draw.figure.LabelFigure cannot be cast to org.jhotdraw.draw.figure.BezierFigure
         //
         verifyException("org.jhotdraw.draw.locator.BezierLabelLocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      assertEquals(0, groupFigure0.getChildCount());
      assertEquals(0, groupFigure0.getLayer());
      assertTrue(groupFigure0.isRemovable());
      assertTrue(groupFigure0.isVisible());
      assertTrue(groupFigure0.isSelectable());
      assertFalse(groupFigure0.isConnectable());
      assertNotNull(groupFigure0);
      
      // Undeclared exception!
      try { 
        groupFigure0.read((DOMInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure((Figure) null);
      assertTrue(listFigure0.isVisible());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isConnectable());
      assertEquals(0, listFigure0.getLayer());
      assertEquals(0, listFigure0.getChildCount());
      assertTrue(listFigure0.isSelectable());
      assertNotNull(listFigure0);
      
      // Undeclared exception!
      try { 
        listFigure0.getChild(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(600.0, 600.0, 600.0, 600.0);
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertNotNull(triangleFigure0);
      
      ListFigure listFigure0 = new ListFigure(triangleFigure0);
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertEquals(3.0, triangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, triangleFigure0.getLayer());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isConnectable());
      assertTrue(listFigure0.isVisible());
      assertEquals(0, listFigure0.getChildCount());
      assertTrue(listFigure0.isSelectable());
      assertEquals(0, listFigure0.getLayer());
      assertNotNull(listFigure0);
      
      // Undeclared exception!
      try { 
        listFigure0.getChild((-2631));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertTrue(quadTreeDrawing0.isSelectable());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(quadTreeDrawing0.isVisible());
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertNotNull(quadTreeDrawing0);
      
      // Undeclared exception!
      try { 
        quadTreeDrawing0.get((AttributeKey<AffineTransform>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertNotNull(graphicalCompositeFigure0);
      
      // Undeclared exception!
      try { 
        graphicalCompositeFigure0.findFigureInside((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      assertEquals(0, groupFigure0.getChildCount());
      assertEquals(0, groupFigure0.getLayer());
      assertTrue(groupFigure0.isRemovable());
      assertFalse(groupFigure0.isConnectable());
      assertTrue(groupFigure0.isSelectable());
      assertTrue(groupFigure0.isVisible());
      assertNotNull(groupFigure0);
      
      // Undeclared exception!
      try { 
        groupFigure0.findChildIndex((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      assertEquals(0, groupFigure0.getLayer());
      assertEquals(0, groupFigure0.getChildCount());
      assertTrue(groupFigure0.isVisible());
      assertTrue(groupFigure0.isRemovable());
      assertFalse(groupFigure0.isConnectable());
      assertTrue(groupFigure0.isSelectable());
      assertNotNull(groupFigure0);
      
      // Undeclared exception!
      try { 
        groupFigure0.findChild((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertNotNull(graphicalCompositeFigure0);
      
      // Undeclared exception!
      try { 
        graphicalCompositeFigure0.draw((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertTrue(defaultDrawing0.isSelectable());
      assertTrue(defaultDrawing0.isConnectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isVisible());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(defaultDrawing0.isDebugMode());
      assertNotNull(defaultDrawing0);
      
      // Undeclared exception!
      try { 
        defaultDrawing0.draw((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.DefaultDrawing", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      assertEquals(0, groupFigure0.getChildCount());
      assertEquals(0, groupFigure0.getLayer());
      assertTrue(groupFigure0.isRemovable());
      assertTrue(groupFigure0.isVisible());
      assertTrue(groupFigure0.isSelectable());
      assertFalse(groupFigure0.isConnectable());
      assertNotNull(groupFigure0);
      
      // Undeclared exception!
      try { 
        groupFigure0.basicRemoveChild((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      assertTrue(textAreaFigure0.isRemovable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertNotNull(textAreaFigure0);
      
      ListFigure listFigure0 = new ListFigure(textAreaFigure0);
      assertTrue(textAreaFigure0.isRemovable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertEquals(0, listFigure0.getChildCount());
      assertTrue(listFigure0.isVisible());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isConnectable());
      assertTrue(listFigure0.isSelectable());
      assertEquals(0, listFigure0.getLayer());
      assertNotNull(listFigure0);
      
      // Undeclared exception!
      try { 
        listFigure0.basicAdd(0, (Figure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RectangleFigure rectangleFigure0 = new RectangleFigure();
      assertTrue(rectangleFigure0.isSelectable());
      assertTrue(rectangleFigure0.isRemovable());
      assertTrue(rectangleFigure0.isVisible());
      assertTrue(rectangleFigure0.isConnectable());
      assertEquals(0, rectangleFigure0.getLayer());
      assertEquals(3.0, rectangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertNotNull(rectangleFigure0);
      
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure(rectangleFigure0);
      assertTrue(rectangleFigure0.isSelectable());
      assertTrue(rectangleFigure0.isRemovable());
      assertTrue(rectangleFigure0.isVisible());
      assertTrue(rectangleFigure0.isConnectable());
      assertEquals(0, rectangleFigure0.getLayer());
      assertEquals(3.0, rectangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
      assertNotNull(graphicalCompositeFigure0);
      
      // Undeclared exception!
      try { 
        graphicalCompositeFigure0.addAll((Collection<? extends Figure>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isConnectable());
      assertTrue(listFigure0.isVisible());
      assertEquals(0, listFigure0.getLayer());
      assertEquals(0, listFigure0.getChildCount());
      assertTrue(listFigure0.isSelectable());
      assertNotNull(listFigure0);
      
      // Undeclared exception!
      try { 
        listFigure0.add((Figure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      assertTrue(listFigure0.isVisible());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isConnectable());
      assertEquals(0, listFigure0.getLayer());
      assertTrue(listFigure0.isSelectable());
      assertEquals(0, listFigure0.getChildCount());
      assertNotNull(listFigure0);
      
      // Undeclared exception!
      try { 
        listFigure0.add((-1255), (Figure) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1255, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertNotNull(defaultDrawing0);
      
      Rectangle2D.Double rectangle2D_Double0 = defaultDrawing0.getBounds();
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertTrue(defaultDrawing0.isVisible());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertTrue(defaultDrawing0.isRemovable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isConnectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertNotNull(defaultDrawing0);
      
      int int0 = defaultDrawing0.basicRemove(defaultDrawing0);
      assertEquals((-1), int0);
      assertTrue(defaultDrawing0.isVisible());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertTrue(defaultDrawing0.isRemovable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isConnectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertTrue(quadTreeDrawing0.isSelectable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertNotNull(quadTreeDrawing0);
      
      QuadTreeDrawing quadTreeDrawing1 = quadTreeDrawing0.clone();
      assertFalse(quadTreeDrawing1.equals((Object)quadTreeDrawing0));
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertTrue(quadTreeDrawing0.isSelectable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertTrue(quadTreeDrawing1.isSelectable());
      assertEquals(3.0, quadTreeDrawing1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, quadTreeDrawing1.getChildCount());
      assertTrue(quadTreeDrawing1.isConnectable());
      assertFalse(quadTreeDrawing1.isDebugMode());
      assertEquals(0, quadTreeDrawing1.getLayer());
      assertTrue(quadTreeDrawing1.isRemovable());
      assertTrue(quadTreeDrawing1.isVisible());
      assertNotNull(quadTreeDrawing1);
      assertNotSame(quadTreeDrawing0, quadTreeDrawing1);
      assertNotSame(quadTreeDrawing1, quadTreeDrawing0);
      
      quadTreeDrawing1.add(0, (Figure) quadTreeDrawing0);
      assertFalse(quadTreeDrawing0.equals((Object)quadTreeDrawing1));
      assertFalse(quadTreeDrawing1.equals((Object)quadTreeDrawing0));
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertTrue(quadTreeDrawing0.isSelectable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertTrue(quadTreeDrawing1.isSelectable());
      assertEquals(3.0, quadTreeDrawing1.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(quadTreeDrawing1.isConnectable());
      assertFalse(quadTreeDrawing1.isDebugMode());
      assertEquals(1, quadTreeDrawing1.getChildCount());
      assertEquals(0, quadTreeDrawing1.getLayer());
      assertTrue(quadTreeDrawing1.isRemovable());
      assertTrue(quadTreeDrawing1.isVisible());
      assertNotSame(quadTreeDrawing0, quadTreeDrawing1);
      assertNotSame(quadTreeDrawing1, quadTreeDrawing0);
      
      int int0 = quadTreeDrawing1.basicRemove(quadTreeDrawing0);
      assertEquals(0, int0);
      assertFalse(quadTreeDrawing0.equals((Object)quadTreeDrawing1));
      assertFalse(quadTreeDrawing1.equals((Object)quadTreeDrawing0));
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertTrue(quadTreeDrawing0.isSelectable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertTrue(quadTreeDrawing1.isSelectable());
      assertEquals(3.0, quadTreeDrawing1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, quadTreeDrawing1.getChildCount());
      assertTrue(quadTreeDrawing1.isConnectable());
      assertFalse(quadTreeDrawing1.isDebugMode());
      assertEquals(0, quadTreeDrawing1.getLayer());
      assertTrue(quadTreeDrawing1.isRemovable());
      assertTrue(quadTreeDrawing1.isVisible());
      assertNotSame(quadTreeDrawing0, quadTreeDrawing1);
      assertNotSame(quadTreeDrawing1, quadTreeDrawing0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertNotNull(defaultDrawing0);
      
      // Undeclared exception!
      try { 
        defaultDrawing0.changed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // changed was called without a prior call to willChange. 0
         //
         verifyException("org.jhotdraw.draw.figure.AbstractFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, defaultDrawing0.getChildCount());
      assertNotNull(defaultDrawing0);
      
      defaultDrawing0.willChange();
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, defaultDrawing0.getChildCount());
      
      RoundRectangleRadiusHandle roundRectangleRadiusHandle0 = new RoundRectangleRadiusHandle(defaultDrawing0);
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, defaultDrawing0.getChildCount());
      assertNotNull(roundRectangleRadiusHandle0);
      
      // Undeclared exception!
      try { 
        defaultDrawing0.changed();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jhotdraw.draw.DefaultDrawing cannot be cast to org.jhotdraw.draw.figure.RoundRectangleFigure
         //
         verifyException("org.jhotdraw.draw.handle.RoundRectangleRadiusHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      assertEquals(0, groupFigure0.getChildCount());
      assertEquals(0, groupFigure0.getLayer());
      assertTrue(groupFigure0.isRemovable());
      assertTrue(groupFigure0.isVisible());
      assertFalse(groupFigure0.isConnectable());
      assertTrue(groupFigure0.isSelectable());
      assertNotNull(groupFigure0);
      
      AbstractCompositeFigure abstractCompositeFigure0 = groupFigure0.clone();
      assertFalse(abstractCompositeFigure0.equals((Object)groupFigure0));
      assertEquals(0, groupFigure0.getChildCount());
      assertEquals(0, groupFigure0.getLayer());
      assertTrue(groupFigure0.isRemovable());
      assertTrue(groupFigure0.isVisible());
      assertFalse(groupFigure0.isConnectable());
      assertTrue(groupFigure0.isSelectable());
      assertTrue(abstractCompositeFigure0.isRemovable());
      assertTrue(abstractCompositeFigure0.isVisible());
      assertEquals(0, abstractCompositeFigure0.getLayer());
      assertFalse(abstractCompositeFigure0.isConnectable());
      assertTrue(abstractCompositeFigure0.isSelectable());
      assertEquals(0, abstractCompositeFigure0.getChildCount());
      assertNotNull(abstractCompositeFigure0);
      assertNotSame(groupFigure0, abstractCompositeFigure0);
      assertNotSame(abstractCompositeFigure0, groupFigure0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure();
      assertTrue(imageFigure0.isConnectable());
      assertTrue(imageFigure0.isRemovable());
      assertTrue(imageFigure0.isVisible());
      assertTrue(imageFigure0.isSelectable());
      assertEquals(0, imageFigure0.getLayer());
      assertEquals(3.0, imageFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertNotNull(imageFigure0);
      
      ListFigure listFigure0 = new ListFigure(imageFigure0);
      assertTrue(imageFigure0.isConnectable());
      assertTrue(imageFigure0.isRemovable());
      assertTrue(imageFigure0.isVisible());
      assertTrue(imageFigure0.isSelectable());
      assertEquals(0, imageFigure0.getLayer());
      assertEquals(3.0, imageFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(listFigure0.isSelectable());
      assertEquals(0, listFigure0.getChildCount());
      assertTrue(listFigure0.isVisible());
      assertEquals(0, listFigure0.getLayer());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isConnectable());
      assertNotNull(listFigure0);
      
      listFigure0.layout();
      assertTrue(imageFigure0.isConnectable());
      assertTrue(imageFigure0.isRemovable());
      assertTrue(imageFigure0.isVisible());
      assertTrue(imageFigure0.isSelectable());
      assertEquals(0, imageFigure0.getLayer());
      assertEquals(3.0, imageFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(listFigure0.isSelectable());
      assertEquals(0, listFigure0.getChildCount());
      assertTrue(listFigure0.isVisible());
      assertEquals(0, listFigure0.getLayer());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertNotNull(graphicalCompositeFigure0);
      
      RelativeLocator relativeLocator0 = new RelativeLocator((-2665.9966), 4391.9792963273, true);
      assertNotNull(relativeLocator0);
      
      Point2D.Double point2D_Double0 = relativeLocator0.locate((Figure) graphicalCompositeFigure0);
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      Figure figure0 = graphicalCompositeFigure0.findChild(point2D_Double0);
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertNull(figure0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertTrue(defaultDrawing0.isSelectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isRemovable());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isVisible());
      assertNotNull(defaultDrawing0);
      
      FontSizeLocator fontSizeLocator0 = new FontSizeLocator();
      assertNotNull(fontSizeLocator0);
      
      Point2D.Double point2D_Double0 = fontSizeLocator0.locate((Figure) defaultDrawing0, (Figure) defaultDrawing0);
      assertTrue(defaultDrawing0.isSelectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isRemovable());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isVisible());
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(12.0, point2D_Double0.y, 0.01);
      
      boolean boolean0 = defaultDrawing0.contains(point2D_Double0);
      assertFalse(boolean0);
      assertTrue(defaultDrawing0.isSelectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isRemovable());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isVisible());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(12.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertNotNull(graphicalCompositeFigure0);
      
      DiamondFigure diamondFigure0 = new DiamondFigure(0.0, (-3063.120157), (-2665.9966), 0.0);
      assertTrue(diamondFigure0.isVisible());
      assertTrue(diamondFigure0.isConnectable());
      assertTrue(diamondFigure0.isRemovable());
      assertEquals(0, diamondFigure0.getLayer());
      assertEquals(3.0, diamondFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(diamondFigure0.isSelectable());
      assertNotNull(diamondFigure0);
      
      boolean boolean0 = graphicalCompositeFigure0.remove(diamondFigure0);
      assertFalse(boolean0);
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertTrue(diamondFigure0.isVisible());
      assertTrue(diamondFigure0.isConnectable());
      assertTrue(diamondFigure0.isRemovable());
      assertEquals(0, diamondFigure0.getLayer());
      assertEquals(3.0, diamondFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(diamondFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      assertTrue(groupFigure0.isRemovable());
      assertTrue(groupFigure0.isVisible());
      assertEquals(0, groupFigure0.getChildCount());
      assertTrue(groupFigure0.isSelectable());
      assertFalse(groupFigure0.isConnectable());
      assertEquals(0, groupFigure0.getLayer());
      assertNotNull(groupFigure0);
      
      groupFigure0.removeNotify((Drawing) null);
      assertTrue(groupFigure0.isRemovable());
      assertTrue(groupFigure0.isVisible());
      assertEquals(0, groupFigure0.getChildCount());
      assertTrue(groupFigure0.isSelectable());
      assertFalse(groupFigure0.isConnectable());
      assertEquals(0, groupFigure0.getLayer());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      assertTrue(quadTreeDrawing0.isSelectable());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertNotNull(quadTreeDrawing0);
      
      ArrayList<DiamondFigure> arrayList0 = new ArrayList<DiamondFigure>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DiamondFigure diamondFigure0 = new DiamondFigure();
      assertTrue(diamondFigure0.isSelectable());
      assertEquals(0, diamondFigure0.getLayer());
      assertEquals(3.0, diamondFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(diamondFigure0.isRemovable());
      assertTrue(diamondFigure0.isVisible());
      assertTrue(diamondFigure0.isConnectable());
      assertNotNull(diamondFigure0);
      
      boolean boolean0 = arrayList0.add(diamondFigure0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(diamondFigure0.isSelectable());
      assertEquals(0, diamondFigure0.getLayer());
      assertEquals(3.0, diamondFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(diamondFigure0.isRemovable());
      assertTrue(diamondFigure0.isVisible());
      assertTrue(diamondFigure0.isConnectable());
      assertTrue(arrayList0.contains(diamondFigure0));
      
      quadTreeDrawing0.addAll(0, (Collection<? extends Figure>) arrayList0);
      assertTrue(quadTreeDrawing0.isSelectable());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertEquals(1, quadTreeDrawing0.getChildCount());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(diamondFigure0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isVisible());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, defaultDrawing0.getChildCount());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isSelectable());
      assertNotNull(defaultDrawing0);
      
      Rectangle2D.Double rectangle2D_Double0 = defaultDrawing0.getDrawingArea();
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isVisible());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, defaultDrawing0.getChildCount());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      
      Rectangle2D.Double rectangle2D_Double1 = defaultDrawing0.getDrawingArea((-422.461172));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isVisible());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, defaultDrawing0.getChildCount());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertTrue(defaultDrawing0.isConnectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isVisible());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertNotNull(defaultDrawing0);
      
      defaultDrawing0.setLayouter((Layouter) null);
      assertTrue(defaultDrawing0.isConnectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isVisible());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isConnectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertNotNull(defaultDrawing0);
      
      int int0 = defaultDrawing0.getChildCount();
      assertEquals(0, int0);
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isConnectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(0, defaultDrawing0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      assertEquals(0, listFigure0.getLayer());
      assertTrue(listFigure0.isSelectable());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isVisible());
      assertTrue(listFigure0.isConnectable());
      assertEquals(0, listFigure0.getChildCount());
      assertNotNull(listFigure0);
      
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertTrue(quadTreeDrawing0.isSelectable());
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertNotNull(quadTreeDrawing0);
      
      // Undeclared exception!
      try { 
        listFigure0.basicAdd((-882), (Figure) quadTreeDrawing0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -882, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isVisible());
      assertNotNull(defaultDrawing0);
      
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertNotNull(labeledLineConnectionFigure0);
      
      ListFigure listFigure0 = new ListFigure(defaultDrawing0);
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isVisible());
      assertEquals(0, listFigure0.getChildCount());
      assertTrue(listFigure0.isSelectable());
      assertEquals(0, listFigure0.getLayer());
      assertTrue(listFigure0.isVisible());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isConnectable());
      assertNotNull(listFigure0);
      
      listFigure0.fireFigureRemoved(labeledLineConnectionFigure0, (-516));
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertEquals(0, listFigure0.getChildCount());
      assertTrue(listFigure0.isSelectable());
      assertEquals(0, listFigure0.getLayer());
      assertTrue(listFigure0.isVisible());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DiamondFigure diamondFigure0 = new DiamondFigure();
      assertEquals(0, diamondFigure0.getLayer());
      assertEquals(3.0, diamondFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(diamondFigure0.isConnectable());
      assertTrue(diamondFigure0.isRemovable());
      assertTrue(diamondFigure0.isSelectable());
      assertTrue(diamondFigure0.isVisible());
      assertNotNull(diamondFigure0);
      
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure(diamondFigure0);
      assertEquals(0, diamondFigure0.getLayer());
      assertEquals(3.0, diamondFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(diamondFigure0.isConnectable());
      assertTrue(diamondFigure0.isRemovable());
      assertTrue(diamondFigure0.isSelectable());
      assertTrue(diamondFigure0.isVisible());
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertNotNull(graphicalCompositeFigure0);
      
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertNotNull(labeledLineConnectionFigure0);
      
      BezierScaleHandle bezierScaleHandle0 = new BezierScaleHandle(labeledLineConnectionFigure0);
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertNotNull(bezierScaleHandle0);
      
      graphicalCompositeFigure0.addFigureListener(bezierScaleHandle0);
      assertEquals(0, diamondFigure0.getLayer());
      assertEquals(3.0, diamondFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(diamondFigure0.isConnectable());
      assertTrue(diamondFigure0.isRemovable());
      assertTrue(diamondFigure0.isSelectable());
      assertTrue(diamondFigure0.isVisible());
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      
      boolean boolean0 = graphicalCompositeFigure0.add((Figure) diamondFigure0);
      assertTrue(boolean0);
      assertEquals(0, diamondFigure0.getLayer());
      assertEquals(3.0, diamondFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(diamondFigure0.isConnectable());
      assertTrue(diamondFigure0.isRemovable());
      assertTrue(diamondFigure0.isSelectable());
      assertTrue(diamondFigure0.isVisible());
      assertEquals(1, graphicalCompositeFigure0.getChildCount());
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertTrue(graphicalCompositeFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertTrue(defaultDrawing0.isSelectable());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isRemovable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isVisible());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertFalse(defaultDrawing0.isDebugMode());
      assertNotNull(defaultDrawing0);
      
      AbstractDrawing abstractDrawing0 = defaultDrawing0.clone();
      assertFalse(abstractDrawing0.equals((Object)defaultDrawing0));
      assertTrue(defaultDrawing0.isSelectable());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isRemovable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isVisible());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(abstractDrawing0.isSelectable());
      assertEquals(0, abstractDrawing0.getLayer());
      assertTrue(abstractDrawing0.isRemovable());
      assertFalse(abstractDrawing0.isDebugMode());
      assertTrue(abstractDrawing0.isConnectable());
      assertTrue(abstractDrawing0.isVisible());
      assertEquals(0, abstractDrawing0.getChildCount());
      assertEquals(3.0, abstractDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertNotNull(abstractDrawing0);
      assertNotSame(defaultDrawing0, abstractDrawing0);
      assertNotSame(abstractDrawing0, defaultDrawing0);
      
      boolean boolean0 = abstractDrawing0.add((Figure) defaultDrawing0);
      assertTrue(boolean0);
      assertFalse(defaultDrawing0.equals((Object)abstractDrawing0));
      assertFalse(abstractDrawing0.equals((Object)defaultDrawing0));
      assertTrue(defaultDrawing0.isSelectable());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isRemovable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isVisible());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(abstractDrawing0.isSelectable());
      assertEquals(0, abstractDrawing0.getLayer());
      assertTrue(abstractDrawing0.isRemovable());
      assertFalse(abstractDrawing0.isDebugMode());
      assertTrue(abstractDrawing0.isConnectable());
      assertTrue(abstractDrawing0.isVisible());
      assertEquals(3.0, abstractDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(1, abstractDrawing0.getChildCount());
      assertNotSame(defaultDrawing0, abstractDrawing0);
      assertNotSame(abstractDrawing0, defaultDrawing0);
      
      Dimension2DDouble dimension2DDouble0 = abstractDrawing0.getPreferredSize();
      assertFalse(defaultDrawing0.equals((Object)abstractDrawing0));
      assertFalse(abstractDrawing0.equals((Object)defaultDrawing0));
      assertTrue(defaultDrawing0.isSelectable());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isRemovable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isVisible());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertFalse(defaultDrawing0.isDebugMode());
      assertTrue(abstractDrawing0.isSelectable());
      assertEquals(0, abstractDrawing0.getLayer());
      assertTrue(abstractDrawing0.isRemovable());
      assertFalse(abstractDrawing0.isDebugMode());
      assertTrue(abstractDrawing0.isConnectable());
      assertTrue(abstractDrawing0.isVisible());
      assertEquals(3.0, abstractDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(1, abstractDrawing0.getChildCount());
      assertEquals(0.0, dimension2DDouble0.getWidth(), 0.01);
      assertEquals(0.0, dimension2DDouble0.getHeight(), 0.01);
      assertNotNull(dimension2DDouble0);
      assertNotSame(defaultDrawing0, abstractDrawing0);
      assertNotSame(abstractDrawing0, defaultDrawing0);
      assertEquals(0.0, dimension2DDouble0.height, 0.01);
      assertEquals(0.0, dimension2DDouble0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertTrue(quadTreeDrawing0.isSelectable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(quadTreeDrawing0.isRemovable());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertNotNull(quadTreeDrawing0);
      
      ImageFigure imageFigure0 = new ImageFigure(0.0, (-879.102), (-879.102), 2513.4702945067);
      assertTrue(imageFigure0.isSelectable());
      assertTrue(imageFigure0.isConnectable());
      assertTrue(imageFigure0.isRemovable());
      assertTrue(imageFigure0.isVisible());
      assertEquals(0, imageFigure0.getLayer());
      assertEquals(3.0, imageFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertNotNull(imageFigure0);
      
      quadTreeDrawing0.basicAdd((Figure) imageFigure0);
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertEquals(1, quadTreeDrawing0.getChildCount());
      assertTrue(quadTreeDrawing0.isSelectable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(quadTreeDrawing0.isRemovable());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(imageFigure0.isSelectable());
      assertTrue(imageFigure0.isConnectable());
      assertTrue(imageFigure0.isRemovable());
      assertTrue(imageFigure0.isVisible());
      assertEquals(0, imageFigure0.getLayer());
      assertEquals(3.0, imageFigure0.getStrokeMiterLimitFactor(), 0.01);
      
      ArrayList<LabelFigure> arrayList0 = new ArrayList<LabelFigure>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      quadTreeDrawing0.removeAll(arrayList0);
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertEquals(1, quadTreeDrawing0.getChildCount());
      assertTrue(quadTreeDrawing0.isSelectable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(quadTreeDrawing0.isRemovable());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-1.0), (-1.0), (-301.14186293), (-301.14186293));
      assertTrue(roundRectangleFigure0.isVisible());
      assertTrue(roundRectangleFigure0.isConnectable());
      assertTrue(roundRectangleFigure0.isRemovable());
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(3.0, roundRectangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, roundRectangleFigure0.getLayer());
      assertTrue(roundRectangleFigure0.isSelectable());
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertNotNull(roundRectangleFigure0);
      
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure(roundRectangleFigure0);
      assertTrue(roundRectangleFigure0.isVisible());
      assertTrue(roundRectangleFigure0.isConnectable());
      assertTrue(roundRectangleFigure0.isRemovable());
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(3.0, roundRectangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, roundRectangleFigure0.getLayer());
      assertTrue(roundRectangleFigure0.isSelectable());
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertNotNull(graphicalCompositeFigure0);
      
      boolean boolean0 = graphicalCompositeFigure0.add((Figure) roundRectangleFigure0);
      assertTrue(boolean0);
      assertTrue(roundRectangleFigure0.isVisible());
      assertTrue(roundRectangleFigure0.isConnectable());
      assertTrue(roundRectangleFigure0.isRemovable());
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(3.0, roundRectangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, roundRectangleFigure0.getLayer());
      assertTrue(roundRectangleFigure0.isSelectable());
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertEquals(1, graphicalCompositeFigure0.getChildCount());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      
      AbstractCompositeFigure abstractCompositeFigure0 = graphicalCompositeFigure0.clone();
      assertFalse(abstractCompositeFigure0.equals((Object)graphicalCompositeFigure0));
      assertTrue(roundRectangleFigure0.isVisible());
      assertTrue(roundRectangleFigure0.isConnectable());
      assertTrue(roundRectangleFigure0.isRemovable());
      assertEquals(20.0, roundRectangleFigure0.getArcWidth(), 0.01);
      assertEquals(3.0, roundRectangleFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, roundRectangleFigure0.getLayer());
      assertTrue(roundRectangleFigure0.isSelectable());
      assertEquals(20.0, roundRectangleFigure0.getArcHeight(), 0.01);
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertEquals(1, graphicalCompositeFigure0.getChildCount());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertTrue(abstractCompositeFigure0.isVisible());
      assertEquals(1, abstractCompositeFigure0.getChildCount());
      assertEquals(0, abstractCompositeFigure0.getLayer());
      assertTrue(abstractCompositeFigure0.isRemovable());
      assertTrue(abstractCompositeFigure0.isConnectable());
      assertTrue(abstractCompositeFigure0.isSelectable());
      assertNotNull(abstractCompositeFigure0);
      assertNotSame(graphicalCompositeFigure0, abstractCompositeFigure0);
      assertNotSame(abstractCompositeFigure0, graphicalCompositeFigure0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertNotNull(graphicalCompositeFigure0);
      
      LinkedList linkedList0 = (LinkedList)graphicalCompositeFigure0.getTransformRestoreData();
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      assertTrue(groupFigure0.isRemovable());
      assertEquals(0, groupFigure0.getLayer());
      assertEquals(0, groupFigure0.getChildCount());
      assertFalse(groupFigure0.isConnectable());
      assertTrue(groupFigure0.isSelectable());
      assertTrue(groupFigure0.isVisible());
      assertNotNull(groupFigure0);
      
      JavaPrimitivesDOMFactory javaPrimitivesDOMFactory0 = new JavaPrimitivesDOMFactory();
      assertNotNull(javaPrimitivesDOMFactory0);
      
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(javaPrimitivesDOMFactory0);
      assertNotNull(javaxDOMOutput0);
      
      groupFigure0.write(javaxDOMOutput0);
      assertTrue(groupFigure0.isRemovable());
      assertEquals(0, groupFigure0.getLayer());
      assertEquals(0, groupFigure0.getChildCount());
      assertFalse(groupFigure0.isConnectable());
      assertTrue(groupFigure0.isSelectable());
      assertTrue(groupFigure0.isVisible());
      
      // Undeclared exception!
      try { 
        groupFigure0.write(javaxDOMOutput0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      assertTrue(listFigure0.isConnectable());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isVisible());
      assertEquals(0, listFigure0.getLayer());
      assertEquals(0, listFigure0.getChildCount());
      assertTrue(listFigure0.isSelectable());
      assertNotNull(listFigure0);
      
      Dimension2DDouble dimension2DDouble0 = listFigure0.getPreferredSize();
      assertTrue(listFigure0.isConnectable());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isVisible());
      assertEquals(0, listFigure0.getLayer());
      assertEquals(0, listFigure0.getChildCount());
      assertTrue(listFigure0.isSelectable());
      assertEquals(0.0, dimension2DDouble0.getHeight(), 0.01);
      assertEquals(0.0, dimension2DDouble0.getWidth(), 0.01);
      assertNotNull(dimension2DDouble0);
      assertEquals(0.0, dimension2DDouble0.height, 0.01);
      assertEquals(0.0, dimension2DDouble0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      assertTrue(quadTreeDrawing0.isSelectable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertNotNull(quadTreeDrawing0);
      
      ImageFigure imageFigure0 = new ImageFigure(0.0, (-879.102), (-879.102), 2513.4702945067);
      assertTrue(imageFigure0.isRemovable());
      assertEquals(0, imageFigure0.getLayer());
      assertEquals(3.0, imageFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(imageFigure0.isConnectable());
      assertTrue(imageFigure0.isVisible());
      assertTrue(imageFigure0.isSelectable());
      assertNotNull(imageFigure0);
      
      quadTreeDrawing0.basicAdd((Figure) imageFigure0);
      assertTrue(quadTreeDrawing0.isSelectable());
      assertEquals(1, quadTreeDrawing0.getChildCount());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertTrue(imageFigure0.isRemovable());
      assertEquals(0, imageFigure0.getLayer());
      assertEquals(3.0, imageFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(imageFigure0.isConnectable());
      assertTrue(imageFigure0.isVisible());
      assertTrue(imageFigure0.isSelectable());
      
      quadTreeDrawing0.layout();
      assertTrue(quadTreeDrawing0.isSelectable());
      assertEquals(1, quadTreeDrawing0.getChildCount());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertEquals(0, quadTreeDrawing0.getLayer());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isVisible());
      assertEquals(12.0F, labelFigure0.getFontSize(), 0.01F);
      assertEquals(4, labelFigure0.getTextColumns());
      assertFalse(labelFigure0.isTextOverflow());
      assertFalse(labelFigure0.isEditable());
      assertEquals(0, labelFigure0.getLayer());
      assertEquals(3.0, labelFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(8, labelFigure0.getTabSize());
      assertTrue(labelFigure0.isConnectable());
      assertEquals("Label", labelFigure0.getText());
      assertTrue(labelFigure0.isSelectable());
      assertNotNull(labelFigure0);
      
      ListFigure listFigure0 = new ListFigure(labelFigure0);
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isVisible());
      assertEquals(12.0F, labelFigure0.getFontSize(), 0.01F);
      assertEquals(4, labelFigure0.getTextColumns());
      assertFalse(labelFigure0.isTextOverflow());
      assertFalse(labelFigure0.isEditable());
      assertEquals(0, labelFigure0.getLayer());
      assertEquals(3.0, labelFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(8, labelFigure0.getTabSize());
      assertTrue(labelFigure0.isConnectable());
      assertEquals("Label", labelFigure0.getText());
      assertTrue(labelFigure0.isSelectable());
      assertTrue(listFigure0.isVisible());
      assertTrue(listFigure0.isConnectable());
      assertTrue(listFigure0.isRemovable());
      assertEquals(0, listFigure0.getChildCount());
      assertEquals(0, listFigure0.getLayer());
      assertTrue(listFigure0.isSelectable());
      assertNotNull(listFigure0);
      
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertNotNull(labeledLineConnectionFigure0);
      
      Point2D.Double point2D_Double0 = labeledLineConnectionFigure0.getPoint(0);
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      Figure figure0 = listFigure0.findChild(point2D_Double0);
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isVisible());
      assertEquals(12.0F, labelFigure0.getFontSize(), 0.01F);
      assertEquals(4, labelFigure0.getTextColumns());
      assertFalse(labelFigure0.isTextOverflow());
      assertFalse(labelFigure0.isEditable());
      assertEquals(0, labelFigure0.getLayer());
      assertEquals(3.0, labelFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(8, labelFigure0.getTabSize());
      assertTrue(labelFigure0.isConnectable());
      assertEquals("Label", labelFigure0.getText());
      assertTrue(labelFigure0.isSelectable());
      assertTrue(listFigure0.isVisible());
      assertTrue(listFigure0.isConnectable());
      assertTrue(listFigure0.isRemovable());
      assertEquals(0, listFigure0.getChildCount());
      assertEquals(0, listFigure0.getLayer());
      assertTrue(listFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertNull(figure0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertTrue(quadTreeDrawing0.isSelectable());
      assertNotNull(quadTreeDrawing0);
      
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      int int0 = quadTreeDrawing0.findChildIndex(point2D_Double0);
      assertEquals((-1), int0);
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertTrue(quadTreeDrawing0.isSelectable());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      assertEquals(0, listFigure0.getLayer());
      assertEquals(0, listFigure0.getChildCount());
      assertTrue(listFigure0.isConnectable());
      assertTrue(listFigure0.isVisible());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isSelectable());
      assertNotNull(listFigure0);
      
      Point2D.Double point2D_Double0 = listFigure0.getStartPoint();
      assertEquals(0, listFigure0.getLayer());
      assertEquals(0, listFigure0.getChildCount());
      assertTrue(listFigure0.isConnectable());
      assertTrue(listFigure0.isVisible());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isSelectable());
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      Figure figure0 = listFigure0.findFigureInside(point2D_Double0);
      assertEquals(0, listFigure0.getLayer());
      assertEquals(0, listFigure0.getChildCount());
      assertTrue(listFigure0.isConnectable());
      assertTrue(listFigure0.isVisible());
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isSelectable());
      assertNull(figure0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertEquals(0, defaultDrawing0.getChildCount());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isSelectable());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isConnectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertNotNull(defaultDrawing0);
      
      boolean boolean0 = defaultDrawing0.contains((Figure) defaultDrawing0);
      assertFalse(boolean0);
      assertEquals(0, defaultDrawing0.getChildCount());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isSelectable());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isConnectable());
      assertEquals(0, defaultDrawing0.getLayer());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertNotNull(graphicalCompositeFigure0);
      
      LinkedList linkedList0 = (LinkedList)graphicalCompositeFigure0.getAttributesRestoreData();
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      assertTrue(groupFigure0.isSelectable());
      assertFalse(groupFigure0.isConnectable());
      assertEquals(0, groupFigure0.getChildCount());
      assertTrue(groupFigure0.isRemovable());
      assertTrue(groupFigure0.isVisible());
      assertEquals(0, groupFigure0.getLayer());
      assertNotNull(groupFigure0);
      
      BezierFigure bezierFigure0 = new BezierFigure();
      assertEquals(0, bezierFigure0.getLayer());
      assertEquals(3.0, bezierFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(bezierFigure0.isConnectable());
      assertTrue(bezierFigure0.isVisible());
      assertFalse(bezierFigure0.isClosed());
      assertTrue(bezierFigure0.isRemovable());
      assertTrue(bezierFigure0.isSelectable());
      assertNotNull(bezierFigure0);
      
      BezierNodeHandle bezierNodeHandle0 = new BezierNodeHandle(bezierFigure0, 0);
      assertEquals(0, bezierFigure0.getLayer());
      assertEquals(3.0, bezierFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(bezierFigure0.isConnectable());
      assertTrue(bezierFigure0.isVisible());
      assertFalse(bezierFigure0.isClosed());
      assertTrue(bezierFigure0.isRemovable());
      assertTrue(bezierFigure0.isSelectable());
      assertNotNull(bezierNodeHandle0);
      
      groupFigure0.set((AttributeKey<BezierNodeHandle>) null, bezierNodeHandle0);
      assertTrue(groupFigure0.isSelectable());
      assertFalse(groupFigure0.isConnectable());
      assertEquals(0, groupFigure0.getChildCount());
      assertTrue(groupFigure0.isRemovable());
      assertTrue(groupFigure0.isVisible());
      assertEquals(0, groupFigure0.getLayer());
      assertEquals(0, bezierFigure0.getLayer());
      assertEquals(3.0, bezierFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(bezierFigure0.isConnectable());
      assertTrue(bezierFigure0.isVisible());
      assertFalse(bezierFigure0.isClosed());
      assertTrue(bezierFigure0.isRemovable());
      assertTrue(bezierFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
      assertNotNull(graphicalCompositeFigure0);
      
      List<Figure> list0 = graphicalCompositeFigure0.getChildrenFrontToBack();
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertEquals(0, graphicalCompositeFigure0.getLayer());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertEquals(0, graphicalCompositeFigure0.getChildCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      assertTrue(quadTreeDrawing0.isConnectable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(0, quadTreeDrawing0.getChildCount());
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isSelectable());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertNotNull(quadTreeDrawing0);
      
      LabelFigure labelFigure0 = new LabelFigure();
      assertEquals(0, labelFigure0.getLayer());
      assertEquals(3.0, labelFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labelFigure0.isEditable());
      assertEquals(8, labelFigure0.getTabSize());
      assertTrue(labelFigure0.isConnectable());
      assertTrue(labelFigure0.isSelectable());
      assertEquals("Label", labelFigure0.getText());
      assertTrue(labelFigure0.isVisible());
      assertEquals(12.0F, labelFigure0.getFontSize(), 0.01F);
      assertTrue(labelFigure0.isRemovable());
      assertFalse(labelFigure0.isTextOverflow());
      assertEquals(4, labelFigure0.getTextColumns());
      assertNotNull(labelFigure0);
      
      quadTreeDrawing0.add(0, (Figure) labelFigure0);
      assertTrue(quadTreeDrawing0.isConnectable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(1, quadTreeDrawing0.getChildCount());
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isSelectable());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, labelFigure0.getLayer());
      assertEquals(3.0, labelFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(labelFigure0.isEditable());
      assertEquals(8, labelFigure0.getTabSize());
      assertTrue(labelFigure0.isConnectable());
      assertTrue(labelFigure0.isSelectable());
      assertEquals("Label", labelFigure0.getText());
      assertTrue(labelFigure0.isVisible());
      assertEquals(12.0F, labelFigure0.getFontSize(), 0.01F);
      assertTrue(labelFigure0.isRemovable());
      assertFalse(labelFigure0.isTextOverflow());
      assertEquals(4, labelFigure0.getTextColumns());
      
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(0.5);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.8775825618903728, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.8775825618903728, affineTransform0.getScaleX(), 0.01);
      assertEquals((-0.479425538604203), affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.479425538604203, affineTransform0.getShearY(), 0.01);
      assertNotNull(affineTransform0);
      
      quadTreeDrawing0.transform(affineTransform0);
      assertTrue(quadTreeDrawing0.isConnectable());
      assertFalse(quadTreeDrawing0.isDebugMode());
      assertEquals(1, quadTreeDrawing0.getChildCount());
      assertEquals(0, quadTreeDrawing0.getLayer());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isSelectable());
      assertEquals(3.0, quadTreeDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.8775825618903728, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.8775825618903728, affineTransform0.getScaleX(), 0.01);
      assertEquals((-0.479425538604203), affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.479425538604203, affineTransform0.getShearY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertEquals(0, defaultDrawing0.getChildCount());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isSelectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertNotNull(defaultDrawing0);
      
      TextFigure textFigure0 = new TextFigure("org.jhotdraw.draw.figure.AbstractCompositeFigure$EventHandler");
      assertFalse(textFigure0.isTextOverflow());
      assertTrue(textFigure0.isSelectable());
      assertEquals(4, textFigure0.getTextColumns());
      assertEquals(8, textFigure0.getTabSize());
      assertEquals(12.0F, textFigure0.getFontSize(), 0.01F);
      assertTrue(textFigure0.isVisible());
      assertTrue(textFigure0.isEditable());
      assertTrue(textFigure0.isConnectable());
      assertEquals("org.jhotdraw.draw.figure.AbstractCompositeFigure$EventHandler", textFigure0.getText());
      assertTrue(textFigure0.isRemovable());
      assertEquals(3.0, textFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textFigure0.getLayer());
      assertNotNull(textFigure0);
      
      defaultDrawing0.add(0, (Figure) textFigure0);
      assertEquals(1, defaultDrawing0.getChildCount());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isSelectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertFalse(textFigure0.isTextOverflow());
      assertTrue(textFigure0.isSelectable());
      assertEquals(4, textFigure0.getTextColumns());
      assertEquals(8, textFigure0.getTabSize());
      assertEquals(12.0F, textFigure0.getFontSize(), 0.01F);
      assertTrue(textFigure0.isVisible());
      assertTrue(textFigure0.isEditable());
      assertTrue(textFigure0.isConnectable());
      assertEquals("org.jhotdraw.draw.figure.AbstractCompositeFigure$EventHandler", textFigure0.getText());
      assertTrue(textFigure0.isRemovable());
      assertEquals(3.0, textFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textFigure0.getLayer());
      
      defaultDrawing0.bringToFront(textFigure0);
      assertEquals(1, defaultDrawing0.getChildCount());
      assertEquals(0, defaultDrawing0.getLayer());
      assertTrue(defaultDrawing0.isSelectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertFalse(textFigure0.isTextOverflow());
      assertTrue(textFigure0.isSelectable());
      assertEquals(4, textFigure0.getTextColumns());
      assertEquals(8, textFigure0.getTabSize());
      assertEquals(12.0F, textFigure0.getFontSize(), 0.01F);
      assertTrue(textFigure0.isVisible());
      assertTrue(textFigure0.isEditable());
      assertTrue(textFigure0.isConnectable());
      assertEquals("org.jhotdraw.draw.figure.AbstractCompositeFigure$EventHandler", textFigure0.getText());
      assertTrue(textFigure0.isRemovable());
      assertEquals(3.0, textFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textFigure0.getLayer());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      assertTrue(groupFigure0.isSelectable());
      assertFalse(groupFigure0.isConnectable());
      assertEquals(0, groupFigure0.getChildCount());
      assertTrue(groupFigure0.isRemovable());
      assertTrue(groupFigure0.isVisible());
      assertEquals(0, groupFigure0.getLayer());
      assertNotNull(groupFigure0);
      
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      assertTrue(lineConnectionFigure0.isRemovable());
      assertTrue(lineConnectionFigure0.isVisible());
      assertEquals(0, lineConnectionFigure0.getLayer());
      assertEquals(3.0, lineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(lineConnectionFigure0.isClosed());
      assertFalse(lineConnectionFigure0.isConnectable());
      assertTrue(lineConnectionFigure0.isSelectable());
      assertNotNull(lineConnectionFigure0);
      
      groupFigure0.bringToFront(lineConnectionFigure0);
      assertTrue(groupFigure0.isSelectable());
      assertFalse(groupFigure0.isConnectable());
      assertEquals(0, groupFigure0.getChildCount());
      assertTrue(groupFigure0.isRemovable());
      assertTrue(groupFigure0.isVisible());
      assertEquals(0, groupFigure0.getLayer());
      assertTrue(lineConnectionFigure0.isRemovable());
      assertTrue(lineConnectionFigure0.isVisible());
      assertEquals(0, lineConnectionFigure0.getLayer());
      assertEquals(3.0, lineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertFalse(lineConnectionFigure0.isClosed());
      assertFalse(lineConnectionFigure0.isConnectable());
      assertTrue(lineConnectionFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      defaultDrawing0.sendToBack(defaultDrawing0);
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      HashSet<LineConnectionFigure> hashSet0 = new HashSet<LineConnectionFigure>();
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      hashSet0.add(lineConnectionFigure0);
      graphicalCompositeFigure0.basicRemoveAll(hashSet0);
      assertTrue(graphicalCompositeFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      listFigure0.add((Figure) labeledLineConnectionFigure0);
      listFigure0.basicRemoveAllChildren();
      assertEquals(0, listFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      ArrayList<EllipseFigure> arrayList0 = new ArrayList<EllipseFigure>();
      EllipseFigure ellipseFigure0 = new EllipseFigure(0.0, 0.0, 2801.050943234598, 0.0);
      arrayList0.add(ellipseFigure0);
      defaultDrawing0.removeAll(arrayList0);
      assertTrue(arrayList0.contains(ellipseFigure0));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DiamondFigure diamondFigure0 = new DiamondFigure();
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure(diamondFigure0);
      graphicalCompositeFigure0.add((Figure) diamondFigure0);
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      graphicalCompositeFigure0.removeNotify(defaultDrawing0);
      assertEquals(0, defaultDrawing0.getLayer());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      AbstractDrawing abstractDrawing0 = defaultDrawing0.clone();
      abstractDrawing0.add((Figure) defaultDrawing0);
      abstractDrawing0.addNotify(defaultDrawing0);
      assertEquals(0, abstractDrawing0.getLayer());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Collection<Figure> collection0 = quadTreeDrawing0.getDecomposition();
      // Undeclared exception!
      try { 
        quadTreeDrawing0.basicAddAll(1021, collection0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1021, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      List<Figure> list0 = listFigure0.getChildren();
      defaultDrawing0.basicAddAll((-37), list0);
      assertEquals(0, defaultDrawing0.getLayer());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      Stack<EllipseFigure> stack0 = new Stack<EllipseFigure>();
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      stack0.add(ellipseFigure0);
      listFigure0.addAll(0, (Collection<? extends Figure>) stack0);
      assertEquals(1, listFigure0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      AbstractDrawing abstractDrawing0 = defaultDrawing0.clone();
      Collection<Figure> collection0 = defaultDrawing0.getDecomposition();
      abstractDrawing0.addAll(collection0);
      abstractDrawing0.addAll(collection0);
      ArrayList<EllipseFigure> arrayList0 = new ArrayList<EllipseFigure>();
      defaultDrawing0.removeAll(arrayList0);
      assertEquals(0, defaultDrawing0.getLayer());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Collection<Handle> collection0 = defaultDrawing0.createHandles(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Collection<Handle> collection0 = quadTreeDrawing0.createHandles(970);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      AbstractCompositeFigure.EventHandler abstractCompositeFigure_EventHandler0 = listFigure0.new EventHandler();
      abstractCompositeFigure_EventHandler0.attributeChanged((FigureEvent) null);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      AbstractCompositeFigure.EventHandler abstractCompositeFigure_EventHandler0 = listFigure0.new EventHandler();
      Rectangle2D.Double rectangle2D_Double0 = listFigure0.getDrawingArea(0.0);
      FigureEvent figureEvent0 = new FigureEvent(listFigure0, rectangle2D_Double0);
      abstractCompositeFigure_EventHandler0.figureRemoved(figureEvent0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      AbstractCompositeFigure.EventHandler abstractCompositeFigure_EventHandler0 = listFigure0.new EventHandler();
      Class<ConnectionStartHandle> class0 = ConnectionStartHandle.class;
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      ConnectionStartHandle connectionStartHandle0 = new ConnectionStartHandle(lineConnectionFigure0);
      AttributeKey<ConnectionStartHandle> attributeKey0 = new AttributeKey<ConnectionStartHandle>("", class0, connectionStartHandle0);
      Locator locator0 = RelativeLocator.northEast(true);
      MoveHandle moveHandle0 = new MoveHandle(lineConnectionFigure0, locator0);
      FigureEvent figureEvent0 = new FigureEvent(listFigure0, attributeKey0, moveHandle0, listFigure0);
      abstractCompositeFigure_EventHandler0.figureRequestRemove(figureEvent0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ListFigure listFigure0 = new ListFigure();
      AbstractCompositeFigure.EventHandler abstractCompositeFigure_EventHandler0 = listFigure0.createEventHandler();
      RelativeDecoratorLocator relativeDecoratorLocator0 = new RelativeDecoratorLocator(2940.348751032152, 2940.348751032152, false);
      NullHandle nullHandle0 = new NullHandle(listFigure0, relativeDecoratorLocator0);
      AbstractUndoableEdit abstractUndoableEdit0 = new AbstractUndoableEdit();
      UndoableEditEvent undoableEditEvent0 = new UndoableEditEvent(nullHandle0, abstractUndoableEdit0);
      abstractCompositeFigure_EventHandler0.undoableEditHappened(undoableEditEvent0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      // Undeclared exception!
      try { 
        defaultDrawing0.basicRemoveChild(3540);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3540, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      Class<ConnectorHandle> class0 = ConnectorHandle.class;
      ChopRoundRectangleConnector chopRoundRectangleConnector0 = new ChopRoundRectangleConnector(lineConnectionFigure0);
      ConnectorHandle connectorHandle0 = new ConnectorHandle(chopRoundRectangleConnector0, lineConnectionFigure0);
      AttributeKey<ConnectorHandle> attributeKey0 = new AttributeKey<ConnectorHandle>("", class0, connectorHandle0);
      ConnectorHandle connectorHandle1 = groupFigure0.get(attributeKey0);
      assertNull(connectorHandle1);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure();
      // Undeclared exception!
      try { 
        graphicalCompositeFigure0.basicAdd((Figure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure(1287.250924802, 1287.250924802, 1287.250924802, 0.0);
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure(ellipseFigure0);
      int int0 = graphicalCompositeFigure0.indexOf((Figure) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      Map<AttributeKey<?>, Object> map0 = groupFigure0.getAttributes();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      ListFigure listFigure0 = new ListFigure(defaultDrawing0);
      listFigure0.removeAllChildren();
      assertEquals(0, listFigure0.getLayer());
  }
}
