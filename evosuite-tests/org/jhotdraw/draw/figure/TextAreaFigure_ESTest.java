/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 12 15:46:36 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Collection;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.Drawing;
import org.jhotdraw.draw.QuadTreeDrawing;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.figure.TextAreaFigure;
import org.jhotdraw.draw.figure.TextHolderFigure;
import org.jhotdraw.draw.handle.Handle;
import org.jhotdraw.draw.io.ImageOutputFormat;
import org.jhotdraw.draw.locator.RelativeDecoratorLocator;
import org.jhotdraw.draw.locator.RelativeLocator;
import org.jhotdraw.draw.tool.Tool;
import org.jhotdraw.geom.Dimension2DDouble;
import org.jhotdraw.geom.Insets2D;
import org.jhotdraw.xml.DOMInput;
import org.jhotdraw.xml.DOMOutput;
import org.jhotdraw.xml.JavaPrimitivesDOMFactory;
import org.jhotdraw.xml.JavaxDOMOutput;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextAreaFigure_ESTest extends TextAreaFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals("Text", textAreaFigure0.getText());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isEditable());
      assertTrue(textAreaFigure0.isRemovable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertNotNull(textAreaFigure0);
      
      textAreaFigure0.setFontSize(0.0F);
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals("Text", textAreaFigure0.getText());
      assertEquals(0.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isEditable());
      assertTrue(textAreaFigure0.isRemovable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      
      Dimension2DDouble dimension2DDouble0 = textAreaFigure0.getPreferredTextSize(2276.856604871);
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals("Text", textAreaFigure0.getText());
      assertEquals(0.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isEditable());
      assertTrue(textAreaFigure0.isRemovable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals(0.0, dimension2DDouble0.getHeight(), 0.01);
      assertEquals(0.0, dimension2DDouble0.getWidth(), 0.01);
      assertNotNull(dimension2DDouble0);
      assertEquals(0.0, dimension2DDouble0.height, 0.01);
      assertEquals(0.0, dimension2DDouble0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals("Text", textAreaFigure0.getText());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isRemovable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isEditable());
      assertNotNull(textAreaFigure0);
      
      Collection<Handle> collection0 = textAreaFigure0.createHandles((-1235));
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals("Text", textAreaFigure0.getText());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isRemovable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isEditable());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("");
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertEquals("", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertNotNull(textAreaFigure0);
      
      textAreaFigure0.setEditable(false);
      assertFalse(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertEquals("", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isRemovable());
      assertEquals("Text", textAreaFigure0.getText());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isVisible());
      assertNotNull(textAreaFigure0);
      
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat((String) null, "strokeMiterLimitFactor", (String) null, (-1352));
      assertNull(imageOutputFormat0.getFileExtension());
      assertNotNull(imageOutputFormat0);
      
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertTrue(defaultDrawing0.isVisible());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertNotNull(defaultDrawing0);
      
      List<Figure> list0 = defaultDrawing0.getFiguresFrontToBack();
      assertTrue(defaultDrawing0.isVisible());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) defaultDrawing0, list0, 1345.8757734235, false);
      assertNull(imageOutputFormat0.getFileExtension());
      assertTrue(defaultDrawing0.isVisible());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertNotNull(bufferedImage0);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertNull(imageOutputFormat0.getFileExtension());
      assertTrue(defaultDrawing0.isVisible());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertNotNull(sunGraphics2D0);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals((-1), sunGraphics2D0.eargb);
      
      textAreaFigure0.drawFill(sunGraphics2D0);
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isRemovable());
      assertEquals("Text", textAreaFigure0.getText());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isVisible());
      assertNull(imageOutputFormat0.getFileExtension());
      assertTrue(defaultDrawing0.isVisible());
      assertEquals(0, defaultDrawing0.getChildCount());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isConnectable());
      assertFalse(defaultDrawing0.isDebugMode());
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(defaultDrawing0.isSelectable());
      assertEquals(0, defaultDrawing0.getLayer());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals((-1), sunGraphics2D0.eargb);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("4kYbD?FzqAH7~{.9-");
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(17, textAreaFigure0.getTextColumns());
      assertEquals("4kYbD?FzqAH7~{.9-", textAreaFigure0.getText());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isEditable());
      assertNotNull(textAreaFigure0);
      
      textAreaFigure0.editable = false;
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertFalse(textAreaFigure0.isEditable());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(17, textAreaFigure0.getTextColumns());
      assertEquals("4kYbD?FzqAH7~{.9-", textAreaFigure0.getText());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      
      boolean boolean0 = textAreaFigure0.isEditable();
      assertFalse(boolean0);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertFalse(textAreaFigure0.isEditable());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(17, textAreaFigure0.getTextColumns());
      assertEquals("4kYbD?FzqAH7~{.9-", textAreaFigure0.getText());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure((String) null);
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertNull(textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isSelectable());
      assertNotNull(textAreaFigure0);
      
      String string0 = textAreaFigure0.getText();
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertNull(textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isSelectable());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("m");
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals("m", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertNotNull(textAreaFigure0);
      
      String string0 = textAreaFigure0.getText();
      assertEquals("m", string0);
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals("m", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isSelectable());
      assertNotNull(textAreaFigure0);
      
      textAreaFigure0.setFontSize(0.0F);
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(0.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isSelectable());
      
      float float0 = textAreaFigure0.getFontSize();
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(0.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertNotNull(textAreaFigure0);
      
      textAreaFigure0.setFontSize(0.0F);
      assertEquals(0.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      
      Font font0 = textAreaFigure0.getFont();
      assertEquals(0.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertFalse(font0.isBold());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertEquals(0, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertEquals("VERDANA", font0.getName());
      assertEquals(0.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isTransformed());
      assertNotNull(font0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals("Text", textAreaFigure0.getText());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertNotNull(textAreaFigure0);
      
      textAreaFigure0.setFontSize((-32.13202F));
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals("Text", textAreaFigure0.getText());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals((-32.13202F), textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
      
      Font font0 = textAreaFigure0.getFont();
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals("Text", textAreaFigure0.getText());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals((-32.13202F), textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals("VERDANA", font0.getName());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.hasLayoutAttributes());
      assertEquals((-32.13202F), font0.getSize2D(), 0.01F);
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertEquals((-31), font0.getSize());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertFalse(font0.isBold());
      assertNotNull(font0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertNotNull(textAreaFigure0);
      
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(822.3);
      assertEquals(0.7154550721046867, affineTransform0.getShearX(), 0.01);
      assertEquals((-0.7154550721046867), affineTransform0.getShearY(), 0.01);
      assertEquals(0.9999999999999999, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.6986587434503897, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.6986587434503897, affineTransform0.getScaleX(), 0.01);
      assertNotNull(affineTransform0);
      
      textAreaFigure0.transform(affineTransform0);
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(0.7154550721046867, affineTransform0.getShearX(), 0.01);
      assertEquals((-0.7154550721046867), affineTransform0.getShearY(), 0.01);
      assertEquals(0.9999999999999999, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.6986587434503897, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.6986587434503897, affineTransform0.getScaleX(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = textAreaFigure0.getBounds();
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.5, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.5, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("");
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals("", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isEditable());
      assertNotNull(textAreaFigure0);
      
      Rectangle2D.Double rectangle2D_Double0 = textAreaFigure0.getDrawingArea();
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals("", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(2.5, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-2.5), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(2.5, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-2.5), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals((-2.5), rectangle2D_Double0.y, 0.01);
      assertEquals(5.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-2.5), rectangle2D_Double0.x, 0.01);
      assertEquals(5.0, rectangle2D_Double0.width, 0.01);
      
      textAreaFigure0.setBounds(rectangle2D_Double0);
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals("", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(2.5, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-2.5), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(2.5, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-2.5), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-2.5), rectangle2D_Double0.y, 0.01);
      assertEquals(5.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-2.5), rectangle2D_Double0.x, 0.01);
      assertEquals(5.0, rectangle2D_Double0.width, 0.01);
      
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertNotNull(labeledLineConnectionFigure0);
      
      Point2D.Double point2D_Double0 = labeledLineConnectionFigure0.getStartPoint();
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      boolean boolean0 = textAreaFigure0.figureContains(point2D_Double0);
      assertTrue(boolean0);
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals("", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isEditable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertEquals(0, labeledLineConnectionFigure0.getChildCount());
      assertEquals(3.0, labeledLineConnectionFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, labeledLineConnectionFigure0.getLayer());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertFalse(labeledLineConnectionFigure0.isClosed());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("D')rN");
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals("D')rN", textAreaFigure0.getText());
      assertEquals(5, textAreaFigure0.getTextColumns());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertNotNull(textAreaFigure0);
      
      textAreaFigure0.setVisible(false);
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals("D')rN", textAreaFigure0.getText());
      assertEquals(5, textAreaFigure0.getTextColumns());
      assertFalse(textAreaFigure0.isVisible());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      
      TextAreaFigure textAreaFigure1 = textAreaFigure0.clone();
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals("D')rN", textAreaFigure0.getText());
      assertEquals(5, textAreaFigure0.getTextColumns());
      assertFalse(textAreaFigure0.isVisible());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(5, textAreaFigure1.getTextColumns());
      assertTrue(textAreaFigure1.isSelectable());
      assertEquals(12.0F, textAreaFigure1.getFontSize(), 0.01F);
      assertTrue(textAreaFigure1.isEditable());
      assertEquals("D')rN", textAreaFigure1.getText());
      assertTrue(textAreaFigure1.isRemovable());
      assertEquals(3.0, textAreaFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure1.getLayer());
      assertTrue(textAreaFigure1.isConnectable());
      assertEquals(8, textAreaFigure1.getTabSize());
      assertFalse(textAreaFigure1.isVisible());
      assertFalse(textAreaFigure1.equals((Object)textAreaFigure0));
      assertNotSame(textAreaFigure0, textAreaFigure1);
      assertNotSame(textAreaFigure1, textAreaFigure0);
      assertNotNull(textAreaFigure1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertNotNull(textAreaFigure0);
      
      textAreaFigure0.setConnectable(false);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertFalse(textAreaFigure0.isConnectable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      
      TextAreaFigure textAreaFigure1 = textAreaFigure0.clone();
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertFalse(textAreaFigure0.isConnectable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(3.0, textAreaFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure1.getLayer());
      assertTrue(textAreaFigure1.isRemovable());
      assertTrue(textAreaFigure1.isVisible());
      assertEquals(12.0F, textAreaFigure1.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure1.getTabSize());
      assertEquals("Text", textAreaFigure1.getText());
      assertFalse(textAreaFigure1.isConnectable());
      assertTrue(textAreaFigure1.isEditable());
      assertEquals(4, textAreaFigure1.getTextColumns());
      assertTrue(textAreaFigure1.isSelectable());
      assertFalse(textAreaFigure1.equals((Object)textAreaFigure0));
      assertNotSame(textAreaFigure0, textAreaFigure1);
      assertNotSame(textAreaFigure1, textAreaFigure0);
      assertNotNull(textAreaFigure1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isSelectable());
      assertNotNull(textAreaFigure0);
      
      textAreaFigure0.setFontSize(0.0F);
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(0.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isSelectable());
      
      TextAreaFigure textAreaFigure1 = textAreaFigure0.clone();
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(0.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure1.isEditable());
      assertEquals(4, textAreaFigure1.getTextColumns());
      assertTrue(textAreaFigure1.isSelectable());
      assertTrue(textAreaFigure1.isVisible());
      assertEquals(0.0F, textAreaFigure1.getFontSize(), 0.01F);
      assertEquals("Text", textAreaFigure1.getText());
      assertEquals(8, textAreaFigure1.getTabSize());
      assertEquals(3.0, textAreaFigure1.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure1.getLayer());
      assertTrue(textAreaFigure1.isRemovable());
      assertTrue(textAreaFigure1.isConnectable());
      assertFalse(textAreaFigure1.equals((Object)textAreaFigure0));
      assertNotSame(textAreaFigure0, textAreaFigure1);
      assertNotSame(textAreaFigure1, textAreaFigure0);
      assertNotNull(textAreaFigure1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      assertTrue(textAreaFigure0.isRemovable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals("Text", textAreaFigure0.getText());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isEditable());
      assertNotNull(textAreaFigure0);
      
      // Undeclared exception!
      try { 
        textAreaFigure0.writeBounds((DOMOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextAreaFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("m");
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals("m", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertNotNull(textAreaFigure0);
      
      JavaPrimitivesDOMFactory javaPrimitivesDOMFactory0 = new JavaPrimitivesDOMFactory();
      assertNotNull(javaPrimitivesDOMFactory0);
      
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(javaPrimitivesDOMFactory0);
      assertNotNull(javaxDOMOutput0);
      
      // Undeclared exception!
      try { 
        textAreaFigure0.writeBounds(javaxDOMOutput0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sun.org.apache.xerces.internal.dom.DocumentImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.jhotdraw.xml.JavaxDOMOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isEditable());
      assertTrue(textAreaFigure0.isRemovable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals("Text", textAreaFigure0.getText());
      assertNotNull(textAreaFigure0);
      
      // Undeclared exception!
      try { 
        textAreaFigure0.write((DOMOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextAreaFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertNotNull(textAreaFigure0);
      
      // Undeclared exception!
      try { 
        textAreaFigure0.transform((AffineTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextAreaFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("f|{\"[Z!^!/q");
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isRemovable());
      assertEquals(11, textAreaFigure0.getTextColumns());
      assertEquals("f|{\"[Z!^!/q", textAreaFigure0.getText());
      assertNotNull(textAreaFigure0);
      
      // Undeclared exception!
      try { 
        textAreaFigure0.getTool((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure((String) null);
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertNull(textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertTrue(textAreaFigure0.isVisible());
      assertNotNull(textAreaFigure0);
      
      // Undeclared exception!
      try { 
        textAreaFigure0.getBaseline();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Font", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("");
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals("", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isSelectable());
      assertNotNull(textAreaFigure0);
      
      // Undeclared exception!
      try { 
        textAreaFigure0.figureContains((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure(" ");
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(" ", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertNotNull(textAreaFigure0);
      
      // Undeclared exception!
      try { 
        textAreaFigure0.drawText((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextAreaFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isConnectable());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertNotNull(textAreaFigure0);
      
      Dimension2DDouble dimension2DDouble0 = textAreaFigure0.getPreferredTextSize(0.0);
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isConnectable());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(0.0, dimension2DDouble0.getHeight(), 0.01);
      assertEquals(0.0, dimension2DDouble0.getWidth(), 0.01);
      assertNotNull(dimension2DDouble0);
      assertEquals(0.0, dimension2DDouble0.height, 0.01);
      assertEquals(0.0, dimension2DDouble0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure((String) null);
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertNull(textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertNotNull(textAreaFigure0);
      
      Dimension2DDouble dimension2DDouble0 = textAreaFigure0.getPreferredTextSize(540.0949578597703);
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertNull(textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(0.0, dimension2DDouble0.getHeight(), 0.01);
      assertEquals(0.0, dimension2DDouble0.getWidth(), 0.01);
      assertNotNull(dimension2DDouble0);
      assertEquals(0.0, dimension2DDouble0.width, 0.01);
      assertEquals(0.0, dimension2DDouble0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure((String) null);
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertNull(textAreaFigure0.getText());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertNotNull(textAreaFigure0);
      
      Rectangle2D.Double rectangle2D_Double0 = textAreaFigure0.getBounds();
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertNull(textAreaFigure0.getText());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("");
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals("", textAreaFigure0.getText());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isConnectable());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertNotNull(textAreaFigure0);
      
      String string0 = textAreaFigure0.getText();
      assertEquals("", string0);
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals("", textAreaFigure0.getText());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isConnectable());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals("Text", textAreaFigure0.getText());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isEditable());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertNotNull(textAreaFigure0);
      
      RelativeDecoratorLocator relativeDecoratorLocator0 = new RelativeDecoratorLocator((-2101.456314219108), (-2101.456314219108), true);
      assertNotNull(relativeDecoratorLocator0);
      
      Point2D.Double point2D_Double0 = relativeDecoratorLocator0.locate((Figure) textAreaFigure0);
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals("Text", textAreaFigure0.getText());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isEditable());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      
      textAreaFigure0.setBounds(point2D_Double0, point2D_Double0);
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals("Text", textAreaFigure0.getText());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isEditable());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("4kYbD?FzqAH7~{.9-");
      assertEquals(17, textAreaFigure0.getTextColumns());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isEditable());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals("4kYbD?FzqAH7~{.9-", textAreaFigure0.getText());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isConnectable());
      assertNotNull(textAreaFigure0);
      
      int int0 = textAreaFigure0.getTabSize();
      assertEquals(8, int0);
      assertEquals(17, textAreaFigure0.getTextColumns());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isEditable());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals("4kYbD?FzqAH7~{.9-", textAreaFigure0.getText());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("f|{\"[Z!^!/q");
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(textAreaFigure0.isRemovable());
      assertEquals(11, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals("f|{\"[Z!^!/q", textAreaFigure0.getText());
      assertNotNull(textAreaFigure0);
      
      textAreaFigure0.setText("");
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals("", textAreaFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      assertTrue(textAreaFigure0.isEditable());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertNotNull(textAreaFigure0);
      
      Font font0 = textAreaFigure0.getFont();
      assertTrue(textAreaFigure0.isEditable());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertFalse(font0.isItalic());
      assertFalse(font0.hasUniformLineMetrics());
      assertTrue(font0.isPlain());
      assertFalse(font0.isBold());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals("VERDANA", font0.getName());
      assertEquals(0, font0.getStyle());
      assertFalse(font0.isTransformed());
      assertNotNull(font0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("f|{\"[Z!^!/q");
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals("f|{\"[Z!^!/q", textAreaFigure0.getText());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertTrue(textAreaFigure0.isEditable());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(11, textAreaFigure0.getTextColumns());
      assertNotNull(textAreaFigure0);
      
      Insets2D.Double insets2D_Double0 = textAreaFigure0.getInsets();
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals("f|{\"[Z!^!/q", textAreaFigure0.getText());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertTrue(textAreaFigure0.isEditable());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(11, textAreaFigure0.getTextColumns());
      assertEquals(5.0, insets2D_Double0.getRight(), 0.01);
      assertEquals(5.0, insets2D_Double0.getBottom(), 0.01);
      assertEquals(5.0, insets2D_Double0.getTop(), 0.01);
      assertEquals(5.0, insets2D_Double0.getLeft(), 0.01);
      assertNotNull(insets2D_Double0);
      assertEquals(5.0, insets2D_Double0.right, 0.01);
      assertEquals(5.0, insets2D_Double0.top, 0.01);
      assertEquals(5.0, insets2D_Double0.bottom, 0.01);
      assertEquals(5.0, insets2D_Double0.left, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure((String) null);
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isEditable());
      assertNull(textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isSelectable());
      assertNotNull(textAreaFigure0);
      
      boolean boolean0 = textAreaFigure0.isTextOverflow();
      assertTrue(boolean0);
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isEditable());
      assertNull(textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("m");
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals("m", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isSelectable());
      assertNotNull(textAreaFigure0);
      
      boolean boolean0 = textAreaFigure0.isTextOverflow();
      assertTrue(boolean0);
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals("m", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isSelectable());
      
      boolean boolean1 = textAreaFigure0.isTextOverflow();
      assertTrue(boolean1);
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals("m", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("y");
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals("y", textAreaFigure0.getText());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertNotNull(textAreaFigure0);
      
      Collection<Handle> collection0 = textAreaFigure0.createHandles(0);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals("y", textAreaFigure0.getText());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isConnectable());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      assertTrue(textAreaFigure0.isEditable());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isRemovable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals("Text", textAreaFigure0.getText());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertNotNull(textAreaFigure0);
      
      Collection<Handle> collection0 = textAreaFigure0.createHandles(3252);
      assertTrue(textAreaFigure0.isEditable());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isRemovable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals("Text", textAreaFigure0.getText());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      assertTrue(textAreaFigure0.isRemovable());
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isVisible());
      assertNotNull(textAreaFigure0);
      
      RelativeDecoratorLocator relativeDecoratorLocator0 = new RelativeDecoratorLocator((-2101.456314219108), (-2101.456314219108), true);
      assertNotNull(relativeDecoratorLocator0);
      
      Point2D.Double point2D_Double0 = relativeDecoratorLocator0.locate((Figure) textAreaFigure0);
      assertTrue(textAreaFigure0.isRemovable());
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isVisible());
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      
      Tool tool0 = textAreaFigure0.getTool(point2D_Double0);
      assertTrue(textAreaFigure0.isRemovable());
      assertEquals("Text", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(8, textAreaFigure0.getTabSize());
      assertTrue(textAreaFigure0.isVisible());
      assertNull(tool0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure((String) null);
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isConnectable());
      assertNull(textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertNotNull(textAreaFigure0);
      
      int int0 = textAreaFigure0.getTextColumns();
      assertEquals(4, int0);
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isConnectable());
      assertNull(textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isSelectable());
      assertEquals(4, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("org.jhotdraw.draw.figure.TextAreaFigure$1");
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(41, textAreaFigure0.getTextColumns());
      assertEquals("org.jhotdraw.draw.figure.TextAreaFigure$1", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertNotNull(textAreaFigure0);
      
      int int0 = textAreaFigure0.getTextColumns();
      assertEquals(41, int0);
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(3.0, textAreaFigure0.getStrokeMiterLimitFactor(), 0.01);
      assertEquals(0, textAreaFigure0.getLayer());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertEquals(41, textAreaFigure0.getTextColumns());
      assertEquals("org.jhotdraw.draw.figure.TextAreaFigure$1", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isConnectable());
      assertEquals(12.0F, textAreaFigure0.getFontSize(), 0.01F);
      assertEquals(8, textAreaFigure0.getTabSize());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      Dimension2DDouble dimension2DDouble0 = textAreaFigure0.getPreferredTextSize(522.2968F);
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(12.220703125, dimension2DDouble0.height, 0.01);
      assertEquals(26.12890625, dimension2DDouble0.width, 0.01);
      assertEquals(8, textAreaFigure0.getTabSize());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("\t");
      // Undeclared exception!
      try { 
        textAreaFigure0.getPreferredTextSize(5.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jhotdraw.draw.figure.TextAreaFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("");
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      List<Figure> list0 = defaultDrawing0.getChildren();
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) defaultDrawing0, list0, 3418.86162897, true);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      textAreaFigure0.draw(graphics2D0);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals("", textAreaFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("\n");
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      List<Figure> list0 = quadTreeDrawing0.getChildren();
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) defaultDrawing0, list0, (-56.3710450736734), true);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      textAreaFigure0.drawText(graphics2D0);
      assertEquals("\n", textAreaFigure0.getText());
      assertEquals(8, textAreaFigure0.getTabSize());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      textAreaFigure0.invalidate();
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      RelativeLocator relativeLocator0 = new RelativeLocator();
      Point2D.Double point2D_Double0 = relativeLocator0.locate((Figure) labeledLineConnectionFigure0);
      textAreaFigure0.figureContains(point2D_Double0);
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      // Undeclared exception!
      try { 
        textAreaFigure0.read((DOMInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextAreaFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      JavaPrimitivesDOMFactory javaPrimitivesDOMFactory0 = new JavaPrimitivesDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(javaPrimitivesDOMFactory0);
      // Undeclared exception!
      try { 
        textAreaFigure0.write(javaxDOMOutput0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sun.org.apache.xerces.internal.dom.DocumentImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.jhotdraw.xml.JavaxDOMOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      textAreaFigure0.getFillColor();
      assertTrue(textAreaFigure0.isEditable());
      assertEquals("Text", textAreaFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("org.jhotdraw.draw.figure.TextAreaFigure$1");
      double double0 = textAreaFigure0.getBaseline();
      assertEquals("org.jhotdraw.draw.figure.TextAreaFigure$1", textAreaFigure0.getText());
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(17.064453125, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("K?@(?s");
      // Undeclared exception!
      try { 
        textAreaFigure0.drawFill((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextAreaFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      // Undeclared exception!
      try { 
        textAreaFigure0.drawStroke((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.TextAreaFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      textAreaFigure0.setFontSize(522.2968F);
      Dimension2DDouble dimension2DDouble0 = textAreaFigure0.getPreferredTextSize(522.2968F);
      assertEquals(1800.18603515625, dimension2DDouble0.height, 0.01);
      assertEquals(504.06878662109375, dimension2DDouble0.width, 0.01);
      assertEquals(8, textAreaFigure0.getTabSize());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat("B}*}J9 :LaOfv6", " ", "gI`,T_a6_0L", (-664));
      List<Figure> list0 = labeledLineConnectionFigure0.getChildren();
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) defaultDrawing0, list0, 0.0, false);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      textAreaFigure0.drawText(graphics2D0);
      assertEquals(8, textAreaFigure0.getTabSize());
      assertEquals(4, textAreaFigure0.getTextColumns());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      textAreaFigure0.getFontSize();
      assertTrue(textAreaFigure0.isEditable());
      assertEquals("Text", textAreaFigure0.getText());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      TextHolderFigure textHolderFigure0 = textAreaFigure0.getLabelFor();
      assertEquals("Text", textHolderFigure0.getText());
      assertTrue(textHolderFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("\n");
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      List<Figure> list0 = quadTreeDrawing0.getChildren();
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) defaultDrawing0, list0, (-56.3710450736734), true);
      // Undeclared exception!
      try { 
        textAreaFigure0.restoreTransformTo(bufferedImage0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.image.BufferedImage cannot be cast to java.awt.geom.Rectangle2D$Double
         //
         verifyException("org.jhotdraw.draw.figure.TextAreaFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("a].s^$");
      textAreaFigure0.getTextColor();
      assertEquals(6, textAreaFigure0.getTextColumns());
      assertTrue(textAreaFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      textAreaFigure0.getTransformRestoreData();
      assertTrue(textAreaFigure0.isEditable());
      assertEquals(4, textAreaFigure0.getTextColumns());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("m");
      boolean boolean0 = textAreaFigure0.isEditable();
      assertTrue(boolean0);
      assertEquals("m", textAreaFigure0.getText());
  }
}
