/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 12 16:02:27 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Cursor;
import java.awt.font.FontRenderContext;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.HashMap;
import java.util.Map;
import javax.swing.undo.UndoableEdit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.draw.AttributeKey;
import org.jhotdraw.draw.AttributeKeys;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.GraphicalCompositeFigure;
import org.jhotdraw.draw.QuadTreeDrawing;
import org.jhotdraw.draw.connector.ChopEllipseConnector;
import org.jhotdraw.draw.connector.Connector;
import org.jhotdraw.draw.connector.StickyRectangleConnector;
import org.jhotdraw.draw.event.FigureEvent;
import org.jhotdraw.draw.figure.AbstractFigure;
import org.jhotdraw.draw.figure.BezierFigure;
import org.jhotdraw.draw.figure.ConnectionFigure;
import org.jhotdraw.draw.figure.DiamondFigure;
import org.jhotdraw.draw.figure.EllipseFigure;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.GroupFigure;
import org.jhotdraw.draw.figure.ImageFigure;
import org.jhotdraw.draw.figure.LabelFigure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.figure.LineConnectionFigure;
import org.jhotdraw.draw.figure.LineFigure;
import org.jhotdraw.draw.figure.ListFigure;
import org.jhotdraw.draw.figure.RectangleFigure;
import org.jhotdraw.draw.figure.RoundRectangleFigure;
import org.jhotdraw.draw.figure.TextAreaFigure;
import org.jhotdraw.draw.figure.TextFigure;
import org.jhotdraw.draw.figure.TriangleFigure;
import org.jhotdraw.draw.handle.BezierControlPointHandle;
import org.jhotdraw.draw.handle.CloseHandle;
import org.jhotdraw.draw.handle.NullHandle;
import org.jhotdraw.draw.locator.BezierLabelLocator;
import org.jhotdraw.draw.locator.FontSizeLocator;
import org.jhotdraw.draw.locator.Locator;
import org.jhotdraw.draw.locator.RelativeDecoratorLocator;
import org.jhotdraw.draw.locator.RelativeLocator;
import org.jhotdraw.geom.Dimension2DDouble;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractFigure_ESTest extends AbstractFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DiamondFigure diamondFigure0 = new DiamondFigure(3218.427535092486, (-654.4725887108), (-841.15368934), (-415.61241686276804));
      assertTrue(diamondFigure0.isRemovable());
      
      diamondFigure0.setRemovable(false);
      assertFalse(diamondFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      assertTrue(lineConnectionFigure0.isSelectable());
      
      lineConnectionFigure0.setSelectable(false);
      assertFalse(lineConnectionFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RectangleFigure rectangleFigure0 = new RectangleFigure();
      Rectangle2D.Double rectangle2D_Double0 = rectangleFigure0.getDrawingArea();
      rectangleFigure0.setBounds(rectangle2D_Double0);
      assertTrue(rectangleFigure0.isSelectable());
      assertTrue(rectangleFigure0.isRemovable());
      assertTrue(rectangleFigure0.isConnectable());
      assertTrue(rectangleFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      Locator locator0 = RelativeLocator.east(false);
      NullHandle nullHandle0 = new NullHandle(lineConnectionFigure0, locator0);
      lineConnectionFigure0.addFigureListener(nullHandle0);
      // Undeclared exception!
      try { 
        lineConnectionFigure0.updateConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.handle.LocatorHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.validate();
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DiamondFigure diamondFigure0 = new DiamondFigure();
      diamondFigure0.invalidate();
      assertTrue(diamondFigure0.isSelectable());
      assertTrue(diamondFigure0.isConnectable());
      assertTrue(diamondFigure0.isRemovable());
      assertTrue(diamondFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure(",");
      textFigure0.fireFigureRequestRemove();
      assertTrue(textFigure0.isSelectable());
      assertTrue(textFigure0.isConnectable());
      assertTrue(textFigure0.isRemovable());
      assertTrue(textFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("eAY@p");
      textAreaFigure0.fireFigureRemoved();
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("H3T.");
      labelFigure0.fireFigureAdded();
      assertTrue(labelFigure0.isSelectable());
      assertTrue(labelFigure0.isVisible());
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DiamondFigure diamondFigure0 = new DiamondFigure(3218.427535092486, (-654.4725887108), (-841.15368934), (-415.61241686276804));
      diamondFigure0.fireAttributeChanged((AttributeKey<String>) null, "H;E", "char");
      assertTrue(diamondFigure0.isConnectable());
      assertTrue(diamondFigure0.isVisible());
      assertTrue(diamondFigure0.isRemovable());
      assertTrue(diamondFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      labeledLineConnectionFigure0.addNotify(defaultDrawing0);
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isRemovable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LineFigure lineFigure0 = new LineFigure();
      boolean boolean0 = lineFigure0.isConnectable();
      assertTrue(lineFigure0.isRemovable());
      assertTrue(lineFigure0.isVisible());
      assertFalse(boolean0);
      assertTrue(lineFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("eAY@p");
      Point2D.Double point2D_Double0 = new Point2D.Double();
      textAreaFigure0.getTool(point2D_Double0);
      assertTrue(textAreaFigure0.isConnectable());
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.getStartPoint();
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(8, (-3.14), 8, (-2510.1552676536962));
      Dimension2DDouble dimension2DDouble0 = roundRectangleFigure0.getPreferredSize();
      assertTrue(roundRectangleFigure0.isSelectable());
      assertTrue(roundRectangleFigure0.isVisible());
      assertEquals((-2510.1552676536962), dimension2DDouble0.height, 0.01);
      assertTrue(roundRectangleFigure0.isRemovable());
      assertTrue(roundRectangleFigure0.isConnectable());
      assertEquals(8.0, dimension2DDouble0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RectangleFigure rectangleFigure0 = new RectangleFigure(1394.0, 1394.0, (-805.0), (-805.0));
      Dimension2DDouble dimension2DDouble0 = rectangleFigure0.getPreferredSize();
      assertEquals((-805.0), dimension2DDouble0.width, 0.01);
      assertTrue(rectangleFigure0.isSelectable());
      assertTrue(rectangleFigure0.isConnectable());
      assertEquals((-805.0), dimension2DDouble0.height, 0.01);
      assertTrue(rectangleFigure0.isVisible());
      assertTrue(rectangleFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure(255.0, 255.0, 0.0, (-234.704767));
      FontRenderContext fontRenderContext0 = triangleFigure0.getFontRenderContext();
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(fontRenderContext0.isAntiAliased());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.getDrawing();
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure((-3844.2011), 0.0, 0.0, 3.14);
      FontSizeLocator fontSizeLocator0 = new FontSizeLocator();
      Point2D.Double point2D_Double0 = fontSizeLocator0.locate((Figure) roundRectangleFigure0, (Figure) roundRectangleFigure0);
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      roundRectangleFigure0.findConnector(point2D_Double0, labeledLineConnectionFigure0);
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertEquals((-3844.2011), point2D_Double0.x, 0.01);
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(roundRectangleFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      AbstractFigure abstractFigure0 = groupFigure0.clone();
      assertTrue(abstractFigure0.isRemovable());
      assertTrue(abstractFigure0.isVisible());
      assertFalse(abstractFigure0.isConnectable());
      assertNotSame(abstractFigure0, groupFigure0);
      assertTrue(abstractFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.setBounds((Rectangle2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DiamondFigure diamondFigure0 = new DiamondFigure((-2506.291098969637), (-2506.291098969637), (-2506.291098969637), (-2578.266532001795));
      // Undeclared exception!
      try { 
        diamondFigure0.getCursor((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Path2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(0.0, (-4307.98493), 0.0, 0.0);
      Rectangle2D.Double rectangle2D_Double0 = roundRectangleFigure0.getDrawingArea();
      labelFigure0.fireFigureChanged(rectangle2D_Double0);
      assertTrue(roundRectangleFigure0.isSelectable());
      assertTrue(roundRectangleFigure0.isRemovable());
      assertTrue(roundRectangleFigure0.isVisible());
      assertTrue(roundRectangleFigure0.isConnectable());
      assertTrue(labelFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("-2RU>8L");
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Rectangle2D.Double rectangle2D_Double0 = defaultDrawing0.getFigureDrawBounds();
      textFigure0.fireAreaInvalidated(rectangle2D_Double0);
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isSelectable());
      assertTrue(textFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Dimension2DDouble dimension2DDouble0 = labeledLineConnectionFigure0.getPreferredSize();
      assertEquals(0.0, dimension2DDouble0.width, 0.01);
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertEquals(0.0, dimension2DDouble0.height, 0.01);
      assertFalse(labeledLineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.fireAreaInvalidated();
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure(0.0, 0.0, 4.0, 4.0);
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      imageFigure0.addNotify(quadTreeDrawing0);
      assertTrue(quadTreeDrawing0.isSelectable());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertTrue(quadTreeDrawing0.isRemovable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(imageFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DiamondFigure diamondFigure0 = new DiamondFigure();
      HashMap<Figure, Figure> hashMap0 = new HashMap<Figure, Figure>();
      diamondFigure0.remap(hashMap0, false);
      assertTrue(diamondFigure0.isSelectable());
      assertTrue(diamondFigure0.isVisible());
      assertTrue(diamondFigure0.isRemovable());
      assertTrue(diamondFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("H3T.");
      assertTrue(labelFigure0.isConnectable());
      
      labelFigure0.setConnectable(false);
      assertFalse(labelFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure((-2.5), 5.0, (-2295.04), 46.84045412839);
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      ellipseFigure0.removeNotify(defaultDrawing0);
      assertTrue(defaultDrawing0.isSelectable());
      assertTrue(defaultDrawing0.isConnectable());
      assertTrue(defaultDrawing0.isRemovable());
      assertTrue(defaultDrawing0.isVisible());
      assertTrue(ellipseFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      assertTrue(defaultDrawing0.isVisible());
      
      defaultDrawing0.setVisible(false);
      assertFalse(defaultDrawing0.isVisible());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      assertTrue(labeledLineConnectionFigure0.isVisible());
      
      labeledLineConnectionFigure0.setVisible(true);
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure((-2182.567629), (-2182.567629), 1479.1, 1479.1);
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      Point2D.Double point2D_Double0 = lineConnectionFigure0.getEndPoint();
      Figure figure0 = ellipseFigure0.findFigureInside(point2D_Double0);
      assertNull(figure0);
      assertTrue(ellipseFigure0.isConnectable());
      assertFalse(lineConnectionFigure0.isConnectable());
      assertTrue(lineConnectionFigure0.isSelectable());
      assertTrue(lineConnectionFigure0.isVisible());
      assertTrue(lineConnectionFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      TextFigure textFigure0 = new TextFigure();
      boolean boolean0 = textFigure0.includes(labeledLineConnectionFigure0);
      assertTrue(textFigure0.isSelectable());
      assertTrue(textFigure0.isConnectable());
      assertTrue(textFigure0.isRemovable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(textFigure0.isVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(1439.5928147287912, 0.0, 0.0, 0.0);
      // Undeclared exception!
      try { 
        roundRectangleFigure0.changed();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // changed was called without a prior call to willChange. 0
         //
         verifyException("org.jhotdraw.draw.figure.AbstractFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      boolean boolean0 = labeledLineConnectionFigure0.isChanging();
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertFalse(boolean0);
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextFigure textFigure0 = new TextFigure("-2RU>8L");
      GroupFigure groupFigure0 = new GroupFigure();
      Point2D.Double point2D_Double0 = groupFigure0.getStartPoint();
      Cursor cursor0 = textFigure0.getCursor(point2D_Double0);
      assertTrue(groupFigure0.isSelectable());
      assertFalse(groupFigure0.isConnectable());
      assertTrue(textFigure0.isConnectable());
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertTrue(groupFigure0.isRemovable());
      assertEquals("Hand Cursor", cursor0.getName());
      assertTrue(groupFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      LineFigure lineFigure0 = new LineFigure();
      Point2D.Double point2D_Double0 = lineFigure0.getOutermostPoint();
      Cursor cursor0 = groupFigure0.getCursor(point2D_Double0);
      assertTrue(lineFigure0.isSelectable());
      assertFalse(lineFigure0.isConnectable());
      assertEquals("Default Cursor", cursor0.getName());
      assertTrue(lineFigure0.isVisible());
      assertTrue(lineFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure();
      triangleFigure0.createHandles(890);
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("H3T.");
      Class<LabelFigure> class0 = LabelFigure.class;
      AttributeKey<LabelFigure> attributeKey0 = new AttributeKey<LabelFigure>("H3T.", class0);
      UndoableEdit undoableEdit0 = attributeKey0.setUndoable(labelFigure0, labelFigure0);
      labelFigure0.fireUndoableEditHappened(undoableEdit0);
      assertTrue(labelFigure0.isVisible());
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isSelectable());
      assertTrue(labelFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure();
      imageFigure0.fireFigureHandlesChanged();
      assertTrue(imageFigure0.isSelectable());
      assertTrue(imageFigure0.isVisible());
      assertTrue(imageFigure0.isRemovable());
      assertTrue(imageFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure();
      Class<CloseHandle> class0 = CloseHandle.class;
      RelativeDecoratorLocator relativeDecoratorLocator0 = new RelativeDecoratorLocator((-1308.3679548856), (-1308.3679548856), false);
      CloseHandle closeHandle0 = new CloseHandle(imageFigure0, relativeDecoratorLocator0);
      AttributeKey<CloseHandle> attributeKey0 = new AttributeKey<CloseHandle>("layoutAlignment", class0, closeHandle0, false);
      StickyRectangleConnector stickyRectangleConnector0 = new StickyRectangleConnector(imageFigure0);
      FigureEvent figureEvent0 = new FigureEvent(imageFigure0, attributeKey0, (Object) null, stickyRectangleConnector0);
      // Undeclared exception!
      try { 
        imageFigure0.fireFigureChanged(figureEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.handle.LocatorHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure((String) null);
      RectangleFigure rectangleFigure0 = new RectangleFigure();
      Rectangle2D.Double rectangle2D_Double0 = rectangleFigure0.getDrawingArea();
      FigureEvent figureEvent0 = new FigureEvent(textAreaFigure0, rectangle2D_Double0);
      textAreaFigure0.fireFigureChanged(figureEvent0);
      assertTrue(rectangleFigure0.isSelectable());
      assertTrue(rectangleFigure0.isVisible());
      assertTrue(rectangleFigure0.isRemovable());
      assertTrue(rectangleFigure0.isConnectable());
      assertTrue(textAreaFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      TextFigure textFigure0 = new TextFigure(",");
      Class<BezierControlPointHandle> class0 = BezierControlPointHandle.class;
      AttributeKey<BezierControlPointHandle> attributeKey0 = new AttributeKey<BezierControlPointHandle>("transformable", class0);
      StickyRectangleConnector stickyRectangleConnector0 = new StickyRectangleConnector();
      FigureEvent figureEvent0 = new FigureEvent(textFigure0, attributeKey0, stickyRectangleConnector0, class0);
      labeledLineConnectionFigure0.fireAreaInvalidated(figureEvent0);
      assertTrue(textFigure0.isVisible());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(textFigure0.isSelectable());
      assertTrue(textFigure0.isConnectable());
      assertTrue(textFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure((-57.422451176244), 180.0, 180.0, (-57.422451176244));
      LabelFigure labelFigure0 = new LabelFigure("+S1tCH(#Y");
      triangleFigure0.addFigureListener(labelFigure0);
      triangleFigure0.willChange();
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = (LabeledLineConnectionFigure)labeledLineConnectionFigure0.getLock();
      assertTrue(labeledLineConnectionFigure1.isRemovable());
      assertFalse(labeledLineConnectionFigure1.isConnectable());
      assertTrue(labeledLineConnectionFigure1.isSelectable());
      assertTrue(labeledLineConnectionFigure1.isVisible());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      int int0 = labeledLineConnectionFigure0.getChangingDepth();
      assertEquals(0, int0);
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure((String) null);
      textAreaFigure0.fireFigureChanged();
      assertTrue(textAreaFigure0.isRemovable());
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isConnectable());
      assertTrue(textAreaFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      triangleFigure0.getConnectors((ConnectionFigure) null);
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("@q_O*D4HY$`wjW");
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_WEST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      ChopEllipseConnector chopEllipseConnector0 = new ChopEllipseConnector(triangleFigure0);
      Connector connector0 = triangleFigure0.findCompatibleConnector(chopEllipseConnector0, true);
      labelFigure0.findCompatibleConnector(connector0, true);
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(labelFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure();
      imageFigure0.toString();
      assertTrue(imageFigure0.isRemovable());
      assertTrue(imageFigure0.isVisible());
      assertTrue(imageFigure0.isConnectable());
      assertTrue(imageFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      ellipseFigure0.getDecomposition();
      assertTrue(ellipseFigure0.isSelectable());
      assertTrue(ellipseFigure0.isVisible());
      assertTrue(ellipseFigure0.isRemovable());
      assertTrue(ellipseFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure("w");
      boolean boolean0 = labelFigure0.isSelectable();
      assertTrue(boolean0);
      assertTrue(labelFigure0.isConnectable());
      assertTrue(labelFigure0.isRemovable());
      assertTrue(labelFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BezierFigure bezierFigure0 = new BezierFigure();
      bezierFigure0.requestRemove();
      assertTrue(bezierFigure0.isConnectable());
      assertTrue(bezierFigure0.isSelectable());
      assertTrue(bezierFigure0.isRemovable());
      assertTrue(bezierFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TriangleFigure triangleFigure0 = new TriangleFigure((-57.422451176244), 180.0, 180.0, (-57.422451176244));
      boolean boolean0 = triangleFigure0.isConnectable();
      assertTrue(triangleFigure0.isSelectable());
      assertTrue(triangleFigure0.isVisible());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      quadTreeDrawing0.getTool(point2D_Double0);
      assertTrue(quadTreeDrawing0.isSelectable());
      assertTrue(quadTreeDrawing0.isVisible());
      assertTrue(quadTreeDrawing0.isConnectable());
      assertTrue(quadTreeDrawing0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.remap((Map<Figure, Figure>) null, false);
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GroupFigure groupFigure0 = new GroupFigure();
      CloseHandle closeHandle0 = new CloseHandle(groupFigure0);
      groupFigure0.removeFigureListener(closeHandle0);
      assertFalse(groupFigure0.isConnectable());
      assertTrue(groupFigure0.isSelectable());
      assertTrue(groupFigure0.isRemovable());
      assertTrue(groupFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      GraphicalCompositeFigure graphicalCompositeFigure0 = new GraphicalCompositeFigure(labeledLineConnectionFigure0);
      graphicalCompositeFigure0.setTransformable(false);
      assertTrue(graphicalCompositeFigure0.isConnectable());
      assertTrue(graphicalCompositeFigure0.isVisible());
      assertTrue(graphicalCompositeFigure0.isRemovable());
      assertTrue(graphicalCompositeFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure();
      ListFigure listFigure0 = new ListFigure(imageFigure0);
      assertTrue(listFigure0.isRemovable());
      assertTrue(listFigure0.isConnectable());
      assertTrue(listFigure0.isSelectable());
      assertTrue(listFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      BezierLabelLocator bezierLabelLocator0 = new BezierLabelLocator(2, (-2503.459943804994), 0);
      Point2D.Double point2D_Double0 = bezierLabelLocator0.locate((Figure) labeledLineConnectionFigure0, (Figure) labeledLineConnectionFigure0);
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, (-796.056027162698), 0, attributeKeys_Orientation0);
      triangleFigure0.setBounds(point2D_Double0, point2D_Double0);
      assertTrue(triangleFigure0.isConnectable());
      assertTrue(triangleFigure0.isRemovable());
      assertTrue(triangleFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertTrue(triangleFigure0.isVisible());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BezierFigure bezierFigure0 = new BezierFigure();
      boolean boolean0 = bezierFigure0.isTransformable();
      assertTrue(boolean0);
      assertTrue(bezierFigure0.isSelectable());
      assertTrue(bezierFigure0.isVisible());
      assertTrue(bezierFigure0.isRemovable());
      assertTrue(bezierFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure((-2711.43594270056), (-2711.43594270056), (-2711.43594270056), (-2711.43594270056));
      LabelFigure labelFigure0 = new LabelFigure();
      Point2D.Double point2D_Double0 = ellipseFigure0.getEndPoint();
      labelFigure0.getActions(point2D_Double0);
      assertTrue(labelFigure0.isVisible());
      assertEquals((-5422.87188540112), point2D_Double0.y, 0.01);
      assertTrue(labelFigure0.isRemovable());
      assertEquals((-5422.87188540112), point2D_Double0.x, 0.01);
      assertTrue(labelFigure0.isConnectable());
      assertTrue(labelFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      GroupFigure groupFigure0 = new GroupFigure();
      Point2D.Double point2D_Double0 = new Point2D.Double((-449.0), (-449.0));
      groupFigure0.findConnector(point2D_Double0, labeledLineConnectionFigure0);
      assertTrue(groupFigure0.isRemovable());
      assertTrue(groupFigure0.isVisible());
      assertFalse(groupFigure0.isConnectable());
      assertTrue(groupFigure0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      int int0 = labeledLineConnectionFigure0.getLayer();
      assertFalse(labeledLineConnectionFigure0.isConnectable());
      assertEquals(0, int0);
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertTrue(labeledLineConnectionFigure0.isVisible());
      assertTrue(labeledLineConnectionFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      boolean boolean0 = labeledLineConnectionFigure0.isVisible();
      assertTrue(boolean0);
      assertTrue(labeledLineConnectionFigure0.isRemovable());
      assertTrue(labeledLineConnectionFigure0.isSelectable());
      assertFalse(labeledLineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("*z=#;KvWn9=@l6");
      boolean boolean0 = textAreaFigure0.isRemovable();
      assertTrue(textAreaFigure0.isVisible());
      assertTrue(textAreaFigure0.isConnectable());
      assertTrue(textAreaFigure0.isSelectable());
      assertTrue(boolean0);
  }
}
