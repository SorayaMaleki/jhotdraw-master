/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 12 15:54:36 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.beans.PropertyChangeListener;
import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.MissingResourceException;
import javax.swing.plaf.synth.SynthDesktopPaneUI;
import javax.swing.undo.UndoableEdit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jhotdraw.draw.AbstractDrawing;
import org.jhotdraw.draw.AttributeKey;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.DefaultDrawingView;
import org.jhotdraw.draw.Drawing;
import org.jhotdraw.draw.GraphicalCompositeFigure;
import org.jhotdraw.draw.QuadTreeDrawing;
import org.jhotdraw.draw.connector.Connector;
import org.jhotdraw.draw.connector.LocatorConnector;
import org.jhotdraw.draw.event.CompositeFigureListener;
import org.jhotdraw.draw.event.FigureEvent;
import org.jhotdraw.draw.figure.BezierFigure;
import org.jhotdraw.draw.figure.DiamondFigure;
import org.jhotdraw.draw.figure.EllipseFigure;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.GroupFigure;
import org.jhotdraw.draw.figure.ImageFigure;
import org.jhotdraw.draw.figure.LabelFigure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.figure.LineConnectionFigure;
import org.jhotdraw.draw.figure.ListFigure;
import org.jhotdraw.draw.figure.RectangleFigure;
import org.jhotdraw.draw.figure.RoundRectangleFigure;
import org.jhotdraw.draw.figure.TextAreaFigure;
import org.jhotdraw.draw.figure.TriangleFigure;
import org.jhotdraw.draw.handle.BezierScaleHandle;
import org.jhotdraw.draw.handle.ConnectorHandle;
import org.jhotdraw.draw.layouter.Layouter;
import org.jhotdraw.draw.layouter.VerticalLayouter;
import org.jhotdraw.draw.locator.BezierLabelLocator;
import org.jhotdraw.draw.locator.FontSizeLocator;
import org.jhotdraw.draw.locator.RelativeDecoratorLocator;
import org.jhotdraw.geom.BezierPath;
import org.jhotdraw.util.ResourceBundleUtil;
import org.jhotdraw.xml.JavaPrimitivesDOMFactory;
import org.jhotdraw.xml.JavaxDOMOutput;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LabeledLineConnectionFigure_ESTest extends LabeledLineConnectionFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.getLayouter();
      BezierScaleHandle bezierScaleHandle0 = new BezierScaleHandle(labeledLineConnectionFigure0);
      Figure figure0 = bezierScaleHandle0.getOwner();
      labeledLineConnectionFigure0.remove(figure0);
      labeledLineConnectionFigure0.validate();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.updateConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.handle.AbstractHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "rzO]%<PhJ");
      int int0 = 0;
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure1.transform((AffineTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.geom.BezierPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      labeledLineConnectionFigure1.getEndPoint();
      labeledLineConnectionFigure1.getChildren();
      labeledLineConnectionFigure0.path = null;
      labeledLineConnectionFigure1.add((Figure) labeledLineConnectionFigure0);
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.getDrawingArea();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.BezierFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.getDrawingArea();
      ListFigure listFigure0 = new ListFigure(labeledLineConnectionFigure0);
      GraphicalCompositeFigure graphicalCompositeFigure0 = listFigure0.clone();
      int int0 = 0;
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Drawing drawing0 = defaultDrawing0.getDrawing();
      graphicalCompositeFigure0.addNotify(drawing0);
      listFigure0.invalidate();
      labeledLineConnectionFigure0.fireFigureRemoved(graphicalCompositeFigure0, 0);
      labeledLineConnectionFigure0.getChildCount();
      CompositeFigureListener compositeFigureListener0 = mock(CompositeFigureListener.class, new ViolatedAssumptionAnswer());
      listFigure0.removeCompositeFigureListener(compositeFigureListener0);
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.contains((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.RectangularShape", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      ListFigure listFigure0 = new ListFigure(labeledLineConnectionFigure0);
      Rectangle2D.Double rectangle2D_Double0 = listFigure0.getDrawingArea();
      labeledLineConnectionFigure0.setBounds(rectangle2D_Double0);
      labeledLineConnectionFigure1.createHandles(0);
      labeledLineConnectionFigure0.fireAreaInvalidated();
      SynthDesktopPaneUI synthDesktopPaneUI0 = new SynthDesktopPaneUI();
      labeledLineConnectionFigure1.addPropertyChangeListener("", (PropertyChangeListener) synthDesktopPaneUI0);
      labeledLineConnectionFigure1.add(0, (Figure) labeledLineConnectionFigure0);
      labeledLineConnectionFigure1.getLayouter();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.getChild(1744);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1744, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.getChildCount();
      DiamondFigure diamondFigure0 = new DiamondFigure(0, 2213.514331420246, 0, 256.0);
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      labeledLineConnectionFigure0.removeNotify(defaultDrawing0);
      diamondFigure0.fireAreaInvalidated();
      CompositeFigureListener compositeFigureListener0 = mock(CompositeFigureListener.class, new ViolatedAssumptionAnswer());
      diamondFigure0.fireFigureRequestRemove();
      labeledLineConnectionFigure0.addCompositeFigureListener(compositeFigureListener0);
      diamondFigure0.getStartPoint();
      labeledLineConnectionFigure0.remove(diamondFigure0);
      labeledLineConnectionFigure0.updateConnection();
      labeledLineConnectionFigure0.getChildCount();
      labeledLineConnectionFigure0.validate();
      defaultDrawing0.getDecomposition();
      RectangleFigure rectangleFigure0 = new RectangleFigure();
      Rectangle2D.Double rectangle2D_Double0 = rectangleFigure0.getBounds();
      FigureEvent figureEvent0 = new FigureEvent(defaultDrawing0, rectangle2D_Double0);
      figureEvent0.getFigure();
      labeledLineConnectionFigure0.fireAreaInvalidated(figureEvent0);
      AffineTransform affineTransform0 = new AffineTransform((-558.88603076), 2213.514331420246, 2193.71947, 0.0, 0, 106.3813563653931);
      labeledLineConnectionFigure0.transform(affineTransform0);
      labeledLineConnectionFigure0.fireFigureAdded(diamondFigure0, 0);
      assertTrue(diamondFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      labeledLineConnectionFigure1.validate();
      labeledLineConnectionFigure1.basicAdd((Figure) labeledLineConnectionFigure0);
      EllipseFigure ellipseFigure0 = new EllipseFigure(0.0, 0.0, 0.0, 0.0);
      EllipseFigure ellipseFigure1 = ellipseFigure0.clone();
      TriangleFigure triangleFigure0 = new TriangleFigure();
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      Point2D.Double point2D_Double0 = bezierPath0.getPointOnPath((-4100.798017785469), 151.5783);
      Connector connector0 = ellipseFigure1.findConnector(point2D_Double0, labeledLineConnectionFigure0);
      labeledLineConnectionFigure1.setEndConnector(connector0);
      CompositeFigureListener compositeFigureListener0 = mock(CompositeFigureListener.class, new ViolatedAssumptionAnswer());
      labeledLineConnectionFigure1.addCompositeFigureListener(compositeFigureListener0);
      labeledLineConnectionFigure0.contains(point2D_Double0);
      labeledLineConnectionFigure0.getDrawingArea();
      Hashtable<Figure, Figure> hashtable0 = new Hashtable<Figure, Figure>();
      labeledLineConnectionFigure1.remap(hashtable0, false);
      triangleFigure0.getAttributes();
      labeledLineConnectionFigure0.findFigureInside(point2D_Double0);
      labeledLineConnectionFigure0.basicAdd(0, (Figure) triangleFigure0);
      labeledLineConnectionFigure0.fireFigureAdded((Figure) null, 2);
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure1.basicAdd(3, (Figure) triangleFigure0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      ListFigure listFigure0 = new ListFigure();
      listFigure0.getFontRenderContext();
      labeledLineConnectionFigure0.getOutermostPoint();
      listFigure0.fireFigureChanged();
      listFigure0.layout();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.set((AttributeKey<ListFigure>) null, listFigure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.invalidate();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      labeledLineConnectionFigure0.removeNotify(quadTreeDrawing0);
      RelativeDecoratorLocator relativeDecoratorLocator0 = new RelativeDecoratorLocator();
      RelativeDecoratorLocator.northEast();
      Point2D.Double point2D_Double0 = relativeDecoratorLocator0.locate((Figure) labeledLineConnectionFigure0);
      point2D_Double0.setLocation(0.0, 0.0);
      ArrayList<ListFigure> arrayList0 = new ArrayList<ListFigure>();
      quadTreeDrawing0.findFigureExcept(point2D_Double0, (Collection<? extends Figure>) arrayList0);
      labeledLineConnectionFigure0.remove((Figure) null);
      labeledLineConnectionFigure0.basicAdd(0, (Figure) quadTreeDrawing0);
      labeledLineConnectionFigure0.getChildCount();
      labeledLineConnectionFigure0.removeAllChildren();
      labeledLineConnectionFigure0.indexOf((Figure) null);
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.add((Figure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.LabeledLineConnectionFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      AttributeKey<ByteArrayInputStream> attributeKey0 = new AttributeKey<ByteArrayInputStream>("Nntsf1Zrd]eZ2z9(7-K", class0, (ByteArrayInputStream) null);
      labeledLineConnectionFigure1.set(attributeKey0, (ByteArrayInputStream) null);
      labeledLineConnectionFigure1.getChildCount();
      labeledLineConnectionFigure0.getStartPoint();
      labeledLineConnectionFigure1.updateConnection();
      labeledLineConnectionFigure1.basicAdd((Figure) labeledLineConnectionFigure0);
      labeledLineConnectionFigure0.getLayouter();
      Point2D.Double point2D_Double0 = null;
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure1.findFigureInside((Point2D.Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      labeledLineConnectionFigure0.basicAdd((Figure) quadTreeDrawing0);
      labeledLineConnectionFigure0.getStartFigure();
      labeledLineConnectionFigure0.basicRemove((Figure) null);
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.basicAdd((Figure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.LabeledLineConnectionFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      BezierPath bezierPath0 = new BezierPath();
      Point2D.Double point2D_Double0 = bezierPath0.chop((Point2D.Double) null);
      labeledLineConnectionFigure1.splitSegment(point2D_Double0, (float) 0);
      labeledLineConnectionFigure1.getDrawingArea(791.30624709);
      labeledLineConnectionFigure1.getChildren();
      boolean boolean0 = labeledLineConnectionFigure1.contains((Figure) labeledLineConnectionFigure0);
      labeledLineConnectionFigure0.getChildren();
      boolean boolean1 = labeledLineConnectionFigure1.add((Figure) labeledLineConnectionFigure0);
      assertFalse(boolean1 == boolean0);
      
      List<Figure> list0 = labeledLineConnectionFigure1.getChildrenFrontToBack();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      BezierLabelLocator bezierLabelLocator0 = new BezierLabelLocator();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.removeChild(2300);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2300, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.invalidate();
      BezierLabelLocator bezierLabelLocator0 = new BezierLabelLocator();
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      Class<Object> class0 = Object.class;
      AttributeKey<Object> attributeKey0 = new AttributeKey<Object>("", class0, "Ju!dA,B_", false);
      FigureEvent figureEvent0 = new FigureEvent(labeledLineConnectionFigure0, attributeKey0, "", labeledLineConnectionFigure0);
      labeledLineConnectionFigure0.fireFigureChanged(figureEvent0);
      Class<ImageFigure> class1 = ImageFigure.class;
      AttributeKey<ImageFigure> attributeKey1 = new AttributeKey<ImageFigure>("Ju!dA,B_", class1);
      labeledLineConnectionFigure0.setAttributeEnabled(attributeKey1, true);
      Point2D.Double point2D_Double0 = bezierLabelLocator0.getRelativeLabelPoint(labeledLineConnectionFigure0, ellipseFigure0);
      boolean boolean0 = labeledLineConnectionFigure0.contains(point2D_Double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.getLayouter();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      BezierScaleHandle bezierScaleHandle0 = new BezierScaleHandle(labeledLineConnectionFigure1);
      Figure figure0 = bezierScaleHandle0.getOwner();
      labeledLineConnectionFigure0.remove(figure0);
      labeledLineConnectionFigure1.validate();
      labeledLineConnectionFigure0.updateConnection();
      labeledLineConnectionFigure1.getDrawing();
      labeledLineConnectionFigure1.removeNotify((Drawing) null);
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure1.removeChild(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.handle.AbstractHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      int int0 = 0;
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      LinkedList<EllipseFigure> linkedList0 = new LinkedList<EllipseFigure>();
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      ellipseFigure0.applyAttributesTo(quadTreeDrawing0);
      ellipseFigure0.getStartPoint();
      linkedList0.add(ellipseFigure0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      quadTreeDrawing0.findFigureBehind((Point2D.Double) null, (Collection<? extends Figure>) linkedList0);
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.add(0, (Figure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.LabeledLineConnectionFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.setTransformable(true);
      labeledLineConnectionFigure0.validate();
      BezierPath bezierPath0 = labeledLineConnectionFigure0.getCappedPath();
      BezierPath bezierPath1 = bezierPath0.clone();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Point2D.Double point2D_Double1 = bezierPath1.chop(point2D_Double0);
      Point2D.Double point2D_Double2 = labeledLineConnectionFigure0.chop(point2D_Double1);
      labeledLineConnectionFigure0.getTool(point2D_Double2);
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.add((Figure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.LabeledLineConnectionFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      labeledLineConnectionFigure1.basicAdd((Figure) defaultDrawing0);
      GroupFigure groupFigure0 = new GroupFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure2 = labeledLineConnectionFigure1.clone();
      Point2D.Double point2D_Double0 = labeledLineConnectionFigure2.getOutermostPoint();
      Point2D.Double point2D_Double1 = groupFigure0.chop(point2D_Double0);
      labeledLineConnectionFigure0.findFigureInside(point2D_Double1);
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure2.basicAdd((-3520), (Figure) groupFigure0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3520, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      labeledLineConnectionFigure0.getChildren();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((-1859.3335351275352));
      labeledLineConnectionFigure1.add((Figure) labeledLineConnectionFigure0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1859.3335351275352);
      doubleArray0[1] = (-1859.3335351275352);
      Class<ImageFigure> class0 = ImageFigure.class;
      AttributeKey<ImageFigure> attributeKey0 = new AttributeKey<ImageFigure>("", class0);
      ImageFigure imageFigure0 = new ImageFigure(1.0, 0.0, 1.0, 0.0);
      ImageFigure imageFigure1 = imageFigure0.clone();
      labeledLineConnectionFigure1.fireAttributeChanged(attributeKey0, imageFigure1, imageFigure1);
      doubleArray0[2] = (-1859.3335351275352);
      doubleArray0[3] = (-1859.3335351275352);
      doubleArray0[4] = (-1859.3335351275352);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1859.3335351275352);
      doubleArray0[7] = (-1859.3335351275352);
      affineTransform0.quadrantRotate(0);
      affineTransform0.transform(doubleArray0, 0, doubleArray0, 13, 0);
      labeledLineConnectionFigure0.getDrawingArea();
      labeledLineConnectionFigure0.transform(affineTransform0);
      labeledLineConnectionFigure1.basicRemove(labeledLineConnectionFigure0);
      labeledLineConnectionFigure1.fireFigureAdded(labeledLineConnectionFigure0, (-1476));
      labeledLineConnectionFigure1.add((Figure) labeledLineConnectionFigure0);
      labeledLineConnectionFigure0.basicAdd((Figure) labeledLineConnectionFigure1);
      labeledLineConnectionFigure0.invalidate();
      labeledLineConnectionFigure1.fireFigureRemoved(labeledLineConnectionFigure0, 0);
      Point2D.Double point2D_Double0 = labeledLineConnectionFigure0.getStartPoint();
      point2D_Double0.y = 431.0;
      labeledLineConnectionFigure1.contains(point2D_Double0);
      labeledLineConnectionFigure1.layout();
      assertEquals(1, labeledLineConnectionFigure1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      labeledLineConnectionFigure1.getDrawingArea();
      labeledLineConnectionFigure1.getPropertyChangeListeners();
      labeledLineConnectionFigure0.getChildren();
      labeledLineConnectionFigure1.fireFigureAdded(labeledLineConnectionFigure0, 0);
      labeledLineConnectionFigure0.basicAdd((Figure) labeledLineConnectionFigure1);
      Class<String> class0 = String.class;
      AttributeKey<String> attributeKey0 = new AttributeKey<String>("liner", class0, "");
      attributeKey0.set(labeledLineConnectionFigure0, "");
      // Undeclared exception!
      try { 
        attributeKey0.setClone(labeledLineConnectionFigure1, "");
        fail("Expecting exception: InternalError");
      
      } catch(InternalError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.getCenter();
      int int0 = (-1321);
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.getChild((-1321));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.getChildCount();
      int int0 = 0;
      Hashtable<Figure, Figure> hashtable0 = new Hashtable<Figure, Figure>();
      hashtable0.put(labeledLineConnectionFigure0, labeledLineConnectionFigure0);
      hashtable0.put(labeledLineConnectionFigure0, labeledLineConnectionFigure0);
      labeledLineConnectionFigure0.remap(hashtable0, true);
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.getChild(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      labeledLineConnectionFigure1.fireFigureAdded(labeledLineConnectionFigure0, (-1174));
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.getChild(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      BezierPath bezierPath0 = new BezierPath();
      bezierPath0.trimToSize();
      Point2D.Double point2D_Double0 = bezierPath0.getCenter();
      labeledLineConnectionFigure0.findFigureInside(point2D_Double0);
      labeledLineConnectionFigure0.validate();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      quadTreeDrawing0.getStroke();
      QuadTreeDrawing quadTreeDrawing1 = quadTreeDrawing0.clone();
      point2D_Double0.x = (-1.0);
      labeledLineConnectionFigure0.addNotify(quadTreeDrawing1);
      BezierPath.Node bezierPath_Node0 = labeledLineConnectionFigure0.getNode(0);
      bezierPath0.add(bezierPath_Node0);
      labeledLineConnectionFigure0.setLayouter((Layouter) null);
      labeledLineConnectionFigure0.contains(point2D_Double0);
      labeledLineConnectionFigure0.removeAllChildren();
      labeledLineConnectionFigure0.clone();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.add((Figure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.LabeledLineConnectionFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.getDecomposition();
      labeledLineConnectionFigure0.getBounds();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure1.removeChild((-43));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.basicRemoveAllChildren();
      labeledLineConnectionFigure0.getChildCount();
      Layouter layouter0 = labeledLineConnectionFigure0.getLayouter();
      assertNull(layouter0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      BezierLabelLocator bezierLabelLocator0 = new BezierLabelLocator(2781.8633, 13.286197413612, (-2685.86391732));
      Point2D.Double point2D_Double0 = bezierLabelLocator0.getRelativeLabelPoint(labeledLineConnectionFigure1, labeledLineConnectionFigure1);
      boolean boolean0 = labeledLineConnectionFigure1.contains(point2D_Double0);
      assertFalse(boolean0);
      
      labeledLineConnectionFigure1.fireFigureAdded(labeledLineConnectionFigure0, (-1));
      assertNotSame(labeledLineConnectionFigure1, labeledLineConnectionFigure0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      labeledLineConnectionFigure0.getLayouter();
      labeledLineConnectionFigure1.setLayouter((Layouter) null);
      DefaultDrawingView defaultDrawingView0 = new DefaultDrawingView();
      labeledLineConnectionFigure1.getOutermostPoint();
      labeledLineConnectionFigure0.setSelectable(false);
      defaultDrawingView0.getDrawing();
      labeledLineConnectionFigure1.removeNotify((Drawing) null);
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.basicAdd(0, (Figure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.LabeledLineConnectionFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      labeledLineConnectionFigure0.invalidate();
      labeledLineConnectionFigure0.addCompositeFigureListener((CompositeFigureListener) null);
      ConnectorHandle connectorHandle0 = null;
      try {
        connectorHandle0 = new ConnectorHandle((Connector) null, labeledLineConnectionFigure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.handle.ConnectorHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      labeledLineConnectionFigure1.fireFigureRequestRemove();
      JavaPrimitivesDOMFactory javaPrimitivesDOMFactory0 = new JavaPrimitivesDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(javaPrimitivesDOMFactory0);
      labeledLineConnectionFigure0.writeLiner(javaxDOMOutput0);
      boolean boolean0 = false;
      FontSizeLocator fontSizeLocator0 = new FontSizeLocator();
      Point2D.Double point2D_Double0 = fontSizeLocator0.locate((Figure) labeledLineConnectionFigure0);
      fontSizeLocator0.locate((Figure) labeledLineConnectionFigure0, (Figure) labeledLineConnectionFigure0);
      point2D_Double0.y = 1.0;
      labeledLineConnectionFigure1.findNode(point2D_Double0);
      labeledLineConnectionFigure0.setTransformable(false);
      labeledLineConnectionFigure1.setSelectable(true);
      labeledLineConnectionFigure0.basicAdd((Figure) labeledLineConnectionFigure1);
      labeledLineConnectionFigure1.fireUndoableEditHappened((UndoableEdit) null);
      CompositeFigureListener compositeFigureListener0 = null;
      labeledLineConnectionFigure1.removeCompositeFigureListener((CompositeFigureListener) null);
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.basicAdd(1806, (Figure) labeledLineConnectionFigure1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1806, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      GroupFigure groupFigure0 = new GroupFigure();
      LabelFigure labelFigure0 = new LabelFigure();
      Point2D.Double point2D_Double0 = labelFigure0.origin;
      labeledLineConnectionFigure0.remove(labelFigure0);
      labelFigure0.findFigureInside(point2D_Double0);
      Point2D.Double point2D_Double1 = labelFigure0.origin;
      point2D_Double1.clone();
      point2D_Double1.clone();
      point2D_Double1.y = 0.0;
      groupFigure0.findFigureInside(point2D_Double1);
      labeledLineConnectionFigure0.contains((Figure) null);
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      AbstractDrawing abstractDrawing0 = defaultDrawing0.clone();
      labeledLineConnectionFigure0.addNotify(abstractDrawing0);
      labeledLineConnectionFigure0.removeNotify(defaultDrawing0);
      labeledLineConnectionFigure0.removeAllChildren();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.basicRemoveChild((-709));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.fireFigureAdded();
      labeledLineConnectionFigure0.basicRemoveAllChildren();
      labeledLineConnectionFigure0.getChildrenFrontToBack();
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.add(1328, (Figure) roundRectangleFigure0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1328, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      AbstractDrawing abstractDrawing0 = defaultDrawing0.clone();
      labeledLineConnectionFigure1.removeNotify(abstractDrawing0);
      assertNotSame(labeledLineConnectionFigure1, labeledLineConnectionFigure0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      GroupFigure groupFigure0 = new GroupFigure();
      groupFigure0.getFontRenderContext();
      Layouter layouter0 = groupFigure0.layouter;
      labeledLineConnectionFigure0.setLayouter((Layouter) null);
      labeledLineConnectionFigure0.basicAdd((Figure) groupFigure0);
      labeledLineConnectionFigure0.removeAllChildren();
      labeledLineConnectionFigure0.updateConnection();
      labeledLineConnectionFigure0.fireFigureRemoved(groupFigure0, 266);
      DefaultDrawingView defaultDrawingView0 = new DefaultDrawingView();
      BezierPath.Node bezierPath_Node0 = labeledLineConnectionFigure0.getNode(1);
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.setNode((-3274), bezierPath_Node0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.getCappedPath();
      labeledLineConnectionFigure0.removeAllChildren();
      labeledLineConnectionFigure0.getDrawingArea();
      DefaultDrawingView defaultDrawingView0 = new DefaultDrawingView();
      // Undeclared exception!
      try { 
        defaultDrawingView0.selectAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.DefaultDrawingView", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      RelativeDecoratorLocator relativeDecoratorLocator0 = new RelativeDecoratorLocator();
      Point2D.Double point2D_Double0 = relativeDecoratorLocator0.locate((Figure) labeledLineConnectionFigure0);
      point2D_Double0.x = (-1.0);
      labeledLineConnectionFigure0.findFigureInside(point2D_Double0);
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      Class<BezierFigure> class0 = BezierFigure.class;
      boolean boolean0 = true;
      AttributeKey<BezierFigure> attributeKey0 = new AttributeKey<BezierFigure>("liner", class0, labeledLineConnectionFigure0, true);
      BezierFigure bezierFigure0 = new BezierFigure(false);
      labeledLineConnectionFigure1.set(attributeKey0, bezierFigure0);
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure1.basicRemoveChild(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      BezierPath.Node bezierPath_Node0 = labeledLineConnectionFigure0.getNode(0);
      labeledLineConnectionFigure0.addNode(0, bezierPath_Node0);
      labeledLineConnectionFigure1.getDrawingArea();
      labeledLineConnectionFigure1.basicRemove(labeledLineConnectionFigure0);
      labeledLineConnectionFigure0.validate();
      labeledLineConnectionFigure0.getChildren();
      labeledLineConnectionFigure1.getDrawingArea();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.draw((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      labeledLineConnectionFigure1.updateConnection();
      labeledLineConnectionFigure0.add((Figure) labeledLineConnectionFigure1);
      labeledLineConnectionFigure1.getDrawingArea();
      labeledLineConnectionFigure1.getChildrenFrontToBack();
      labeledLineConnectionFigure0.basicRemoveAllChildren();
      boolean boolean0 = labeledLineConnectionFigure0.add((Figure) labeledLineConnectionFigure1);
      assertEquals(1, labeledLineConnectionFigure0.getChildCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.getBounds();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      Hashtable<Figure, Figure> hashtable0 = new Hashtable<Figure, Figure>();
      GroupFigure groupFigure0 = new GroupFigure();
      hashtable0.put(groupFigure0, labeledLineConnectionFigure0);
      labeledLineConnectionFigure1.remap(hashtable0, true);
      assertNotSame(labeledLineConnectionFigure1, labeledLineConnectionFigure0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance(3943.4392576163955, 0.0);
      labeledLineConnectionFigure1.transform(affineTransform0);
      assertNotSame(labeledLineConnectionFigure1, labeledLineConnectionFigure0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      labeledLineConnectionFigure1.getAttributes();
      int int0 = (-13);
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure1.add((-13), (Figure) labeledLineConnectionFigure0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -13, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure1.fireFigureRequestRemove();
      labeledLineConnectionFigure0.basicRemove(labeledLineConnectionFigure1);
      labeledLineConnectionFigure1.clone();
      Locale locale0 = Locale.PRC;
      try { 
        ResourceBundleUtil.getBundle("", locale0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name , locale zh_CN
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      BezierPath bezierPath0 = labeledLineConnectionFigure0.path;
      Point2D.Double point2D_Double0 = bezierPath0.getPointOnPath(0.0, 0.0);
      point2D_Double0.y = (double) 1;
      point2D_Double0.clone();
      Point2D.Double point2D_Double1 = bezierPath0.chop(point2D_Double0);
      labeledLineConnectionFigure1.splitSegment(point2D_Double1, (-2813.5170428));
      labeledLineConnectionFigure1.getDrawingArea();
      labeledLineConnectionFigure1.updateConnection();
      labeledLineConnectionFigure0.add((Figure) labeledLineConnectionFigure1);
      labeledLineConnectionFigure1.getChildCount();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.getChild(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Class<String> class0 = String.class;
      AttributeKey<String> attributeKey0 = new AttributeKey<String>("liner", class0);
      labeledLineConnectionFigure0.set(attributeKey0, "");
      LocatorConnector locatorConnector0 = new LocatorConnector();
      BezierLabelLocator bezierLabelLocator0 = new BezierLabelLocator((-22.32786069198609), 2, (-22.32786069198609));
      Point2D.Double point2D_Double0 = bezierLabelLocator0.getRelativePoint(labeledLineConnectionFigure0);
      // Undeclared exception!
      try { 
        locatorConnector0.contains(point2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.connector.LocatorConnector", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Class<LineConnectionFigure> class0 = LineConnectionFigure.class;
      AttributeKey<LineConnectionFigure> attributeKey0 = new AttributeKey<LineConnectionFigure>("liner", class0);
      attributeKey0.set(labeledLineConnectionFigure0, labeledLineConnectionFigure0);
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.set(attributeKey0, (LineConnectionFigure) labeledLineConnectionFigure1);
      labeledLineConnectionFigure0.basicRemoveAllChildren();
      labeledLineConnectionFigure0.basicAdd((Figure) labeledLineConnectionFigure1);
      LabeledLineConnectionFigure labeledLineConnectionFigure2 = labeledLineConnectionFigure1.clone();
      VerticalLayouter verticalLayouter0 = new VerticalLayouter();
      LabeledLineConnectionFigure labeledLineConnectionFigure3 = labeledLineConnectionFigure0.clone();
      BezierPath bezierPath0 = labeledLineConnectionFigure3.getCappedPath();
      labeledLineConnectionFigure2.requestRemove();
      Point2D.Double point2D_Double0 = bezierPath0.getCenter();
      Point2D.Double point2D_Double1 = labeledLineConnectionFigure3.chop(point2D_Double0);
      verticalLayouter0.calculateLayout(labeledLineConnectionFigure2, point2D_Double1, point2D_Double1);
      labeledLineConnectionFigure2.setLayouter(verticalLayouter0);
      BezierPath bezierPath1 = labeledLineConnectionFigure0.getBezierPath();
      bezierPath1.getPointOnPath(0.0, (-756.03647));
      Point2D.Double point2D_Double2 = bezierPath1.getCenter();
      labeledLineConnectionFigure0.findFigureInside(point2D_Double2);
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      labeledLineConnectionFigure3.addNotify(quadTreeDrawing0);
      assertEquals(1, labeledLineConnectionFigure0.getChildCount());
      
      labeledLineConnectionFigure2.validate();
      labeledLineConnectionFigure2.validate();
      assertNotSame(labeledLineConnectionFigure1, labeledLineConnectionFigure2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Class<String> class0 = String.class;
      AttributeKey<String> attributeKey0 = new AttributeKey<String>("org.jhotdraw.draw.figure.LabeledLineConnectionFigure$1", class0, "org.jhotdraw.draw.figure.LabeledLineConnectionFigure$1", true);
      labeledLineConnectionFigure0.set(attributeKey0, "org.jhotdraw.draw.figure.LabeledLineConnectionFigure$1");
      TextAreaFigure textAreaFigure0 = new TextAreaFigure("3kl:AtYI,Uo|");
      labeledLineConnectionFigure0.indexOf(textAreaFigure0);
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.basicRemoveChild(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      labeledLineConnectionFigure0.setVisible(true);
      labeledLineConnectionFigure1.getCenter();
      labeledLineConnectionFigure1.add((Figure) labeledLineConnectionFigure0);
      Point2D.Double point2D_Double0 = labeledLineConnectionFigure1.getEndPoint();
      labeledLineConnectionFigure1.layout();
      Figure figure0 = labeledLineConnectionFigure1.removeChild(0);
      labeledLineConnectionFigure1.getChildrenFrontToBack();
      LabeledLineConnectionFigure labeledLineConnectionFigure2 = labeledLineConnectionFigure1.clone();
      labeledLineConnectionFigure2.getTool(point2D_Double0);
      labeledLineConnectionFigure1.remove(figure0);
      labeledLineConnectionFigure0.contains(figure0);
      labeledLineConnectionFigure0.fireFigureAdded(figure0, 0);
      assertFalse(labeledLineConnectionFigure0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.getChildrenFrontToBack();
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      labeledLineConnectionFigure0.basicRemove(defaultDrawing0);
      labeledLineConnectionFigure0.indexOf(defaultDrawing0);
      FontSizeLocator fontSizeLocator0 = new FontSizeLocator();
      Point2D.Double point2D_Double0 = fontSizeLocator0.locate((Figure) labeledLineConnectionFigure0);
      Figure figure0 = labeledLineConnectionFigure0.findFigureInside(point2D_Double0);
      assertNull(figure0);
  }
}
