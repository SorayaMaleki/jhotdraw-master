/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 12 16:25:12 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.DataInputStream;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Stack;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.draw.AbstractDrawing;
import org.jhotdraw.draw.AttributeKey;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.Drawing;
import org.jhotdraw.draw.QuadTreeDrawing;
import org.jhotdraw.draw.figure.AbstractAttributedCompositeFigure;
import org.jhotdraw.draw.figure.BezierFigure;
import org.jhotdraw.draw.figure.DiamondFigure;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.GroupFigure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.figure.LineConnectionFigure;
import org.jhotdraw.draw.figure.LineFigure;
import org.jhotdraw.draw.figure.ListFigure;
import org.jhotdraw.draw.io.ImageOutputFormat;
import org.jhotdraw.geom.BezierPath;
import org.jhotdraw.xml.DOMOutput;
import org.jhotdraw.xml.DefaultDOMFactory;
import org.jhotdraw.xml.JavaPrimitivesDOMFactory;
import org.jhotdraw.xml.JavaxDOMOutput;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractAttributedCompositeFigure_ESTest extends AbstractAttributedCompositeFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      DefaultDOMFactory defaultDOMFactory0 = new DefaultDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(defaultDOMFactory0);
      defaultDrawing0.write(javaxDOMOutput0);
      assertEquals(3.0, defaultDrawing0.getStrokeMiterLimitFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      LinkedList<DataInputStream> linkedList0 = new LinkedList<DataInputStream>();
      // Undeclared exception!
      try { 
        defaultDrawing0.restoreAttributesTo(linkedList0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Class<GroupFigure> class0 = GroupFigure.class;
      AttributeKey<GroupFigure> attributeKey0 = new AttributeKey<GroupFigure>("", class0);
      GroupFigure groupFigure0 = new GroupFigure();
      attributeKey0.setClone(defaultDrawing0, groupFigure0);
      boolean boolean0 = defaultDrawing0.hasAttribute(attributeKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      LinkedList linkedList0 = (LinkedList)defaultDrawing0.getAttributesRestoreData();
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Class<BezierFigure> class0 = BezierFigure.class;
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      AttributeKey<BezierFigure> attributeKey0 = new AttributeKey<BezierFigure>("AZz*QVp[Yh6OgZFc]", class0, labeledLineConnectionFigure0, false);
      BezierFigure bezierFigure0 = quadTreeDrawing0.get(attributeKey0);
      assertSame(labeledLineConnectionFigure0, bezierFigure0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      AbstractAttributedCompositeFigure abstractAttributedCompositeFigure0 = defaultDrawing0.clone();
      assertNotSame(abstractAttributedCompositeFigure0, defaultDrawing0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      JavaPrimitivesDOMFactory javaPrimitivesDOMFactory0 = new JavaPrimitivesDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(javaPrimitivesDOMFactory0);
      // Undeclared exception!
      try { 
        ((AbstractAttributedCompositeFigure)defaultDrawing0).writeAttributes(javaxDOMOutput0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class #document does not exist
         //
         verifyException("org.jhotdraw.xml.JavaPrimitivesDOMFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      // Undeclared exception!
      try { 
        quadTreeDrawing0.write((DOMOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AbstractDrawing", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Class<BezierFigure> class0 = BezierFigure.class;
      AttributeKey<BezierFigure> attributeKey0 = new AttributeKey<BezierFigure>((String) null, class0);
      // Undeclared exception!
      try { 
        defaultDrawing0.setAttributeEnabled(attributeKey0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Class<GroupFigure> class0 = GroupFigure.class;
      AttributeKey<GroupFigure> attributeKey0 = new AttributeKey<GroupFigure>((String) null, class0);
      GroupFigure groupFigure0 = new GroupFigure();
      // Undeclared exception!
      try { 
        quadTreeDrawing0.set(attributeKey0, groupFigure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      // Undeclared exception!
      try { 
        quadTreeDrawing0.restoreAttributesTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      DiamondFigure diamondFigure0 = new DiamondFigure();
      // Undeclared exception!
      try { 
        defaultDrawing0.restoreAttributesTo(diamondFigure0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jhotdraw.draw.figure.DiamondFigure cannot be cast to java.util.LinkedList
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      LineFigure lineFigure0 = new LineFigure();
      BezierPath bezierPath0 = lineFigure0.getCappedPath();
      Class<Integer> class0 = Integer.class;
      AttributeKey<Integer> attributeKey0 = new AttributeKey<Integer>((String) null, class0, (Integer) bezierPath0.C1C2_MASK, true);
      // Undeclared exception!
      try { 
        quadTreeDrawing0.removeAttribute(attributeKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.AttributeKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      // Undeclared exception!
      try { 
        quadTreeDrawing0.drawFigure((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedCompositeFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Class<LineConnectionFigure> class0 = LineConnectionFigure.class;
      AttributeKey<LineConnectionFigure> attributeKey0 = new AttributeKey<LineConnectionFigure>("wM:XC]6Q7+", class0, (LineConnectionFigure) null, false);
      defaultDrawing0.set(attributeKey0, (LineConnectionFigure) null);
      assertTrue(defaultDrawing0.isConnectable());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Class<String> class0 = String.class;
      AttributeKey<String> attributeKey0 = new AttributeKey<String>(";::MGR", class0);
      String string0 = defaultDrawing0.get(attributeKey0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      Class<Short> class0 = Short.class;
      AttributeKey<Short> attributeKey0 = new AttributeKey<Short>("", class0);
      quadTreeDrawing0.removeAttribute(attributeKey0);
      assertTrue(quadTreeDrawing0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Class<Integer> class0 = Integer.class;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      AttributeKey<Integer> attributeKey0 = new AttributeKey<Integer>("a", class0, integer0);
      defaultDrawing0.setAttributeEnabled(attributeKey0, true);
      AbstractDrawing abstractDrawing0 = defaultDrawing0.clone();
      assertNotSame(abstractDrawing0, defaultDrawing0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Rectangle2D.Double rectangle2D_Double0 = defaultDrawing0.getFigureDrawBounds();
      assertEquals(5.0, rectangle2D_Double0.width, 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals((-2.5), rectangle2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      double double0 = defaultDrawing0.getStrokeMiterLimitFactor();
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Class<GroupFigure> class0 = GroupFigure.class;
      AttributeKey<GroupFigure> attributeKey0 = new AttributeKey<GroupFigure>("", class0);
      GroupFigure groupFigure0 = new GroupFigure();
      attributeKey0.setClone(defaultDrawing0, groupFigure0);
      Map<AttributeKey<?>, Object> map0 = defaultDrawing0.getAttributes();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Class<ListFigure> class0 = ListFigure.class;
      AttributeKey<ListFigure> attributeKey0 = new AttributeKey<ListFigure>("", class0);
      boolean boolean0 = defaultDrawing0.isAttributeEnabled((AttributeKey<?>) attributeKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Class<LineFigure> class0 = LineFigure.class;
      AttributeKey<LineFigure> attributeKey0 = new AttributeKey<LineFigure>("liner", class0, labeledLineConnectionFigure0, true);
      defaultDrawing0.setAttributeEnabled(attributeKey0, true);
      defaultDrawing0.set((AttributeKey<Double>) null, (Double) 0.0);
      assertTrue(defaultDrawing0.isSelectable());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Class<LineFigure> class0 = LineFigure.class;
      AttributeKey<LineFigure> attributeKey0 = new AttributeKey<LineFigure>("liner", class0, labeledLineConnectionFigure0, true);
      defaultDrawing0.setAttributeEnabled(attributeKey0, false);
      assertEquals("liner", attributeKey0.getKey());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Map<AttributeKey<?>, Object> map0 = defaultDrawing0.getAttributes();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat();
      Stack<Figure> stack0 = new Stack<Figure>();
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) quadTreeDrawing0, (List<Figure>) stack0, 0.0, true);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      quadTreeDrawing0.drawFigure(graphics2D0);
      assertTrue(quadTreeDrawing0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      QuadTreeDrawing quadTreeDrawing0 = new QuadTreeDrawing();
      BasicStroke basicStroke0 = (BasicStroke)quadTreeDrawing0.getStroke();
      assertEquals(0, basicStroke0.getLineJoin());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      Class<GroupFigure> class0 = GroupFigure.class;
      AttributeKey<GroupFigure> attributeKey0 = new AttributeKey<GroupFigure>("", class0);
      boolean boolean0 = defaultDrawing0.hasAttribute(attributeKey0);
      assertFalse(boolean0);
  }
}
