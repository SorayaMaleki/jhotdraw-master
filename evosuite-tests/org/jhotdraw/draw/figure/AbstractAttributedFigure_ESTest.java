/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 12 16:19:49 GMT 2021
 */

package org.jhotdraw.draw.figure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.text.AttributedCharacterIterator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JLayeredPane;
import javax.swing.JTextPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jhotdraw.draw.AttributeKey;
import org.jhotdraw.draw.AttributeKeys;
import org.jhotdraw.draw.DefaultDrawing;
import org.jhotdraw.draw.Drawing;
import org.jhotdraw.draw.connector.StickyRectangleConnector;
import org.jhotdraw.draw.figure.AbstractAttributedFigure;
import org.jhotdraw.draw.figure.BezierFigure;
import org.jhotdraw.draw.figure.EllipseFigure;
import org.jhotdraw.draw.figure.Figure;
import org.jhotdraw.draw.figure.ImageFigure;
import org.jhotdraw.draw.figure.LabelFigure;
import org.jhotdraw.draw.figure.LabeledLineConnectionFigure;
import org.jhotdraw.draw.figure.LineConnectionFigure;
import org.jhotdraw.draw.figure.LineFigure;
import org.jhotdraw.draw.figure.RectangleFigure;
import org.jhotdraw.draw.figure.RoundRectangleFigure;
import org.jhotdraw.draw.figure.TextAreaFigure;
import org.jhotdraw.draw.figure.TriangleFigure;
import org.jhotdraw.draw.io.ImageOutputFormat;
import org.jhotdraw.geom.BezierPath;
import org.jhotdraw.geom.Dimension2DDouble;
import org.jhotdraw.xml.DOMInput;
import org.jhotdraw.xml.DOMOutput;
import org.jhotdraw.xml.DefaultDOMFactory;
import org.jhotdraw.xml.JavaPrimitivesDOMFactory;
import org.jhotdraw.xml.JavaxDOMOutput;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractAttributedFigure_ESTest extends AbstractAttributedFigure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDOMFactory defaultDOMFactory0 = new DefaultDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(defaultDOMFactory0);
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(0.0, 548.938539, (-3938.338641703), 548.938539);
      StickyRectangleConnector stickyRectangleConnector0 = new StickyRectangleConnector(roundRectangleFigure0);
      // Undeclared exception!
      try { 
        stickyRectangleConnector0.write(javaxDOMOutput0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Storable name not known to factory: org.jhotdraw.draw.figure.RoundRectangleFigure
         //
         verifyException("org.jhotdraw.xml.DefaultDOMFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      // Undeclared exception!
      try { 
        labeledLineConnectionFigure0.read((DOMInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure();
      Rectangle2D.Double rectangle2D_Double0 = roundRectangleFigure0.getDrawingArea((-1444.24));
      assertEquals(5.0, rectangle2D_Double0.width, 0.01);
      assertEquals(5.0, rectangle2D_Double0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Rectangle2D.Double rectangle2D_Double0 = labeledLineConnectionFigure0.getDrawingArea();
      assertEquals(5.0, rectangle2D_Double0.height, 0.01);
      assertEquals(5.0, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(1185.5235299, (-1828.3165982829905), 0.0, 1185.5235299);
      Rectangle2D.Double rectangle2D_Double0 = roundRectangleFigure0.getDrawingArea();
      assertEquals((-641.2930683829904), rectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH;
      TriangleFigure triangleFigure0 = new TriangleFigure((-2058.65939), 1.0, (-2058.65939), (-1.575), attributeKeys_Orientation0);
      BezierPath bezierPath0 = triangleFigure0.getBezierPath();
      labeledLineConnectionFigure0.path = bezierPath0;
      Rectangle2D.Double rectangle2D_Double0 = labeledLineConnectionFigure0.getDrawingArea();
      assertEquals(6.574999988079071, rectangle2D_Double0.height, 0.01);
      assertEquals(2063.659423828125, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      Map<AttributeKey<?>, Object> map0 = ellipseFigure0.getAttributes();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Map<AttributeKey<?>, Object> map0 = labeledLineConnectionFigure0.getAttributes();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      AbstractAttributedFigure abstractAttributedFigure0 = labeledLineConnectionFigure0.clone();
      assertNotSame(abstractAttributedFigure0, labeledLineConnectionFigure0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      JavaPrimitivesDOMFactory javaPrimitivesDOMFactory0 = new JavaPrimitivesDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(javaPrimitivesDOMFactory0);
      // Undeclared exception!
      try { 
        labelFigure0.writeAttributes(javaxDOMOutput0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class #document does not exist
         //
         verifyException("org.jhotdraw.xml.JavaPrimitivesDOMFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure();
      DefaultDOMFactory defaultDOMFactory0 = new DefaultDOMFactory();
      JavaxDOMOutput javaxDOMOutput0 = new JavaxDOMOutput(defaultDOMFactory0);
      // Undeclared exception!
      try { 
        imageFigure0.write(javaxDOMOutput0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sun.org.apache.xerces.internal.dom.DocumentImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.jhotdraw.xml.JavaxDOMOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RoundRectangleFigure roundRectangleFigure0 = new RoundRectangleFigure(10.0, 0.5, 0.5, 1284.0);
      JTextPane jTextPane0 = new JTextPane();
      // Undeclared exception!
      try { 
        roundRectangleFigure0.restoreAttributesTo(jTextPane0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JTextPane cannot be cast to java.util.HashMap
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(0.0, 0.0, 1.57, 0.0, attributeKeys_Orientation0);
      Rectangle2D.Double rectangle2D_Double0 = triangleFigure0.getDrawingArea(0.0);
      assertEquals(5.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-2.5), rectangle2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      Class<AttributedCharacterIterator.Attribute> class0 = AttributedCharacterIterator.Attribute.class;
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.LANGUAGE;
      AttributeKey<AttributedCharacterIterator.Attribute> attributeKey0 = new AttributeKey<AttributedCharacterIterator.Attribute>("", class0, attributedCharacterIterator_Attribute0);
      triangleFigure0.set(attributeKey0, attributedCharacterIterator_Attribute0);
      assertEquals("", attributeKey0.getKey());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Class<RectangleFigure> class0 = RectangleFigure.class;
      RectangleFigure rectangleFigure0 = new RectangleFigure();
      AttributeKey<RectangleFigure> attributeKey0 = new AttributeKey<RectangleFigure>(")Bs]?!jhKm-9I", class0, rectangleFigure0, false);
      boolean boolean0 = labeledLineConnectionFigure0.isAttributeEnabled(attributeKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Class<LabelFigure> class0 = LabelFigure.class;
      AttributeKey<LabelFigure> attributeKey0 = new AttributeKey<LabelFigure>("gM$|Q0!y}g4;a8R(", class0);
      LabelFigure labelFigure0 = labeledLineConnectionFigure0.get(attributeKey0);
      assertNull(labelFigure0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BezierFigure bezierFigure0 = new BezierFigure(true);
      Class<BezierFigure> class0 = BezierFigure.class;
      AttributeKey<BezierFigure> attributeKey0 = new AttributeKey<BezierFigure>("meta", class0, bezierFigure0, true);
      boolean boolean0 = bezierFigure0.hasAttribute(attributeKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.applyAttributesTo(labeledLineConnectionFigure0);
      assertFalse(labeledLineConnectionFigure0.isClosed());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Class<Integer> class0 = Integer.class;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      AttributeKey<Integer> attributeKey0 = new AttributeKey<Integer>("liner", class0, integer0);
      labeledLineConnectionFigure0.setAttributeEnabled(attributeKey0, false);
      LabeledLineConnectionFigure labeledLineConnectionFigure1 = labeledLineConnectionFigure0.clone();
      assertNotSame(labeledLineConnectionFigure1, labeledLineConnectionFigure0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AttributeKeys.Orientation attributeKeys_Orientation0 = AttributeKeys.Orientation.NORTH_EAST;
      TriangleFigure triangleFigure0 = new TriangleFigure(attributeKeys_Orientation0);
      double double0 = triangleFigure0.getStrokeMiterLimitFactor();
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LabelFigure labelFigure0 = new LabelFigure();
      // Undeclared exception!
      try { 
        labelFigure0.draw((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LineConnectionFigure lineConnectionFigure0 = new LineConnectionFigure();
      Map<AttributeKey<?>, Object> map0 = lineConnectionFigure0.getAttributes();
      TextAreaFigure textAreaFigure0 = new TextAreaFigure((String) null);
      textAreaFigure0.setAttributes(map0);
      assertTrue(textAreaFigure0.isEditable());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      Class<Dimension2DDouble> class0 = Dimension2DDouble.class;
      Dimension2DDouble dimension2DDouble0 = new Dimension2DDouble();
      AttributeKey<Dimension2DDouble> attributeKey0 = new AttributeKey<Dimension2DDouble>("mGilb vW)(R;>7xSg", class0, dimension2DDouble0);
      labeledLineConnectionFigure0.setAttributeEnabled(attributeKey0, true);
      assertEquals("mGilb vW)(R;>7xSg", attributeKey0.getKey());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextAreaFigure textAreaFigure0 = new TextAreaFigure();
      AttributeKey<?> attributeKey0 = textAreaFigure0.getAttributeKey("w");
      assertNull(attributeKey0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure(0.0, (-1188.70783853), 0.0, 0.0);
      ImageOutputFormat imageOutputFormat0 = new ImageOutputFormat("y", "y", "M(e'W$\"T@", 2);
      DefaultDrawing defaultDrawing0 = new DefaultDrawing();
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      List<Figure> list0 = labeledLineConnectionFigure0.getChildrenFrontToBack();
      BufferedImage bufferedImage0 = imageOutputFormat0.toImage((Drawing) defaultDrawing0, list0, 0.0, true);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      imageFigure0.drawFigure(sunGraphics2D0);
      assertEquals(0, sunGraphics2D0.strokeHint);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LineFigure lineFigure0 = new LineFigure();
      HashMap hashMap0 = (HashMap)lineFigure0.getAttributesRestoreData();
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ImageFigure imageFigure0 = new ImageFigure();
      // Undeclared exception!
      try { 
        imageFigure0.restoreAttributesTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedFigure", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LabeledLineConnectionFigure labeledLineConnectionFigure0 = new LabeledLineConnectionFigure();
      labeledLineConnectionFigure0.removeAttribute((AttributeKey<RoundRectangleFigure>) null);
      assertTrue(labeledLineConnectionFigure0.isRemovable());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EllipseFigure ellipseFigure0 = new EllipseFigure();
      // Undeclared exception!
      try { 
        ellipseFigure0.write((DOMOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jhotdraw.draw.figure.AbstractAttributedFigure", e);
      }
  }
}
